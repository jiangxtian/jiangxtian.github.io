<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>TreeMap</title>
      <link href="/2023/02/21/TreeMap/"/>
      <url>/2023/02/21/TreeMap/</url>
      
        <content type="html"><![CDATA[<h1 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h1><ul><li>TreeMap跟TreeSet底层原理一样，都是红黑树结构的。</li><li>由键决定特性：不重复、无索引、可排序</li><li>可排序：对键进行排序。</li><li>注意：默认按照键的从小到大进行排序，也可以自己规定键的排序规则</li></ul><h2 id="代码书写两种排序规则"><a href="#代码书写两种排序规则" class="headerlink" title="代码书写两种排序规则"></a>代码书写两种排序规则</h2><ul><li><p>实现Comparable接口，指定比较规则。</p></li><li><p>创建集合时传递Comparator比较器对象，指定比较规侧。</p><blockquote><p>当默认的比较规则不满足要求时，用compareator比较器对象</p></blockquote><ol><li><pre><code class="java">package day_25;import java.util.Comparator;public class TreeMap_Demo1 &#123;    public static void main(String[] args) &#123;        /*        TreeMap集合：基本应用        需求1：        键：整数表示id        值：字符串表示商品名称        要求：按照id的升序排列、按照id的降序排列         */        //Integer Double默认情况下都是按照升序排列的        //String按照字母再ASCII码表中对应的数字升序进行排列        //abcdefg ..        java.util.TreeMap&lt;Integer,String&gt; tm =new java.util.TreeMap&lt;&gt;(new Comparator&lt;Integer&gt;() &#123;            @Override            public int compare(Integer o1, Integer o2) &#123;                //o1:当前要添加的元素                //o2:表示已经在红黑树中存在的元素                return o2 - o1;            &#125;        &#125;);        tm.put(4,&quot;ff&quot;);        tm.put(3,&quot;ff&quot;);        tm.put(1,&quot;ff&quot;);        tm.put(2,&quot;ff&quot;);        tm.put(5,&quot;ff&quot;);        System.out.println(tm);    &#125;&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```java</span><br><span class="line">   package day_25;</span><br><span class="line">   </span><br><span class="line">   public class Student2 implements Comparable&lt;Student2&gt; &#123;</span><br><span class="line">       private String name;</span><br><span class="line">       private int age;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">       public Student2() &#123;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       public Student2(String name, int age) &#123;</span><br><span class="line">           this.name = name;</span><br><span class="line">           this.age = age;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       /**</span><br><span class="line">        * 获取</span><br><span class="line">        *</span><br><span class="line">        * @return name</span><br><span class="line">        */</span><br><span class="line">       public String getName() &#123;</span><br><span class="line">           return name;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       /**</span><br><span class="line">        * 设置</span><br><span class="line">        *</span><br><span class="line">        * @param name</span><br><span class="line">        */</span><br><span class="line">       public void setName(String name) &#123;</span><br><span class="line">           this.name = name;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       /**</span><br><span class="line">        * 获取</span><br><span class="line">        *</span><br><span class="line">        * @return age</span><br><span class="line">        */</span><br><span class="line">       public int getAge() &#123;</span><br><span class="line">           return age;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       /**</span><br><span class="line">        * 设置</span><br><span class="line">        *</span><br><span class="line">        * @param age</span><br><span class="line">        */</span><br><span class="line">       public void setAge(int age) &#123;</span><br><span class="line">           this.age = age;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       public String toString() &#123;</span><br><span class="line">           return &quot;Student2&#123;name = &quot; + name + &quot;, age = &quot; + age + &quot;&#125;&quot;;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       @Override</span><br><span class="line">       public int compareTo(Student2 o) &#123;</span><br><span class="line">           //this:表示当前要添加的元素</span><br><span class="line">           //o:表示已经在红黑树中存在的元素</span><br><span class="line">           int i = this.getAge() - o.getAge();</span><br><span class="line">           i = i == 0 ? this.getName().compareTo(o.getName()) : i;</span><br><span class="line">           return i;</span><br><span class="line">   </span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   package day_25;</span><br><span class="line">   </span><br><span class="line">   import java.util.TreeMap;</span><br><span class="line">   </span><br><span class="line">   public class TreeMap_Demo2 &#123;</span><br><span class="line">       public static void main(String[] args) &#123;</span><br><span class="line">           /*</span><br><span class="line">           TreeMap集合：基本应用</span><br><span class="line">           需求2：</span><br><span class="line">           键：学生对象</span><br><span class="line">           值：籍贯</span><br><span class="line">           要求按照学生年龄的升序排列，年龄一样按照姓名的字母排列，同姓名年龄视为同一个人。</span><br><span class="line">            */</span><br><span class="line">           TreeMap&lt;Student2,String&gt; tm = new TreeMap&lt;&gt;();</span><br><span class="line">           Student2 s1 = new Student2(&quot;zhabngsan&quot;,25);</span><br><span class="line">           Student2 s2 = new Student2(&quot;zabngsan&quot;,26);</span><br><span class="line">           Student2 s3 = new Student2(&quot;zabngsan&quot;,26);</span><br><span class="line">           Student2 s4 = new Student2(&quot;kk&quot;,23);</span><br><span class="line">           tm.put(s1,&quot;江苏&quot;);</span><br><span class="line">           tm.put(s2,&quot;天津&quot;);</span><br><span class="line">           tm.put(s3,&quot;伤害&quot;);</span><br><span class="line">           tm.put(s4,&quot;哈尔滨&quot;);</span><br><span class="line">           System.out.println(tm);</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="java">package day_25;import java.util.TreeMap;public class TreeMap_Demo3 &#123;    public static void main(String[] args) &#123;        /*需求：            字符串“aababcabcdabcde”            请统计字符串中每一个字符出现的次数，并按照以下格式输出            输出结果：            a(5)b(4)c(3)d(2)e(1)            新的统计思想：利用map集合进行统计            如果题日中没有要求对结果进行排序，默认使用HashMap            如果题目中要求对结果进行排序，请使用TreeMap            键：表示要统计的内容            值：表示次数*/        String s = &quot;aababcabcdabcde&quot;;        TreeMap&lt;Character, Integer&gt; treeMap = new TreeMap&lt;&gt;();        for (int i = 0; i &lt; s.length(); i++) &#123;            char c = s.charAt(i);            if (treeMap.containsKey(c)) &#123;                int count = treeMap.get(c);                count++;                treeMap.put(c, count);            &#125; else &#123;                treeMap.put(c, 1);            &#125;        &#125;        StringBuilder sb = new StringBuilder();        treeMap.forEach((key, value) -&gt; sb.append(key).append(&quot;(&quot;).append(value).append(&quot;)&quot;));        System.out.println(sb);    &#125;&#125;</code></pre></li><li></li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap</title>
      <link href="/2023/02/21/HashMap/"/>
      <url>/2023/02/21/HashMap/</url>
      
        <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="HashMap特点"><a href="#HashMap特点" class="headerlink" title="HashMap特点"></a>HashMap特点</h2><ol><li>HashMap是Map里面的一个实现类。</li><li>没有额外需要学习的特有方法，直接使用Map里面的方法就可以了。</li><li>特点都是由键决定的：无序、不重复、无索引</li><li>HashMap跟HashSet底层原理是一模一样的，都是哈希表结构</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>HashMap底层是哈希表结构的</li><li>依赖hashCode方法和equals方法保证<font color = red>键的唯一</font></li><li>如果键存储的是自定义对象，需要重写hashCode和equals方法</li><li>如果值存储自定义对象，不需要重写nashCode和equals方法</li></ol><h2 id="HashMap练习"><a href="#HashMap练习" class="headerlink" title="HashMap练习"></a>HashMap练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_25;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BiConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap_Demo1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：创建一个HashMap集合，键是学生对象(Student),值是籍贯(String)。</span></span><br><span class="line"><span class="comment">    存储三个键值对元素，并遍历</span></span><br><span class="line"><span class="comment">    要求：同姓名，同年龄认为是同一个学生</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    核心点：</span></span><br><span class="line"><span class="comment">    HashMap的键位置如果存储的是自定义对象，需要重写HashCode和equals方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        Map&lt;Student,String&gt; map= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(s1,<span class="string">&quot;huNan&quot;</span>);</span><br><span class="line">        map.put(s2,<span class="string">&quot;HerBin&quot;</span>);</span><br><span class="line">        map.put(s3,<span class="string">&quot;shanXi&quot;</span>);</span><br><span class="line">        map.put(s4,<span class="string">&quot;fuJin&quot;</span>);</span><br><span class="line"><span class="comment">//        Set&lt;Student&gt; students = map.keySet();</span></span><br><span class="line"><span class="comment">//        students.forEach(new Consumer&lt;Student&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void accept(Student student) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println(map.get(student));</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line"></span><br><span class="line">        map.forEach(<span class="keyword">new</span> <span class="title class_">BiConsumer</span>&lt;Student, String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Student student, String s)</span> &#123;</span><br><span class="line">                System.out.println(student+<span class="string">&quot; &quot;</span>+s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>&#96;&#96;&#96;java<br>package day_25;</p><p>import java.util.*;</p><p>public class HashMap_demo2 {<br>public static void main(String[] args) {<br>    &#x2F;*<br>    某个班级8日名学生，现在需要组成秋游活动，<br>    班长提供了四个景点依次是(A、B、C、D),<br>    每个学生只能选择一个景点，请统计出最终哪个景点想去的人数最多。<br>     *&#x2F;<br>    String[] arr &#x3D; {“A”, “B”, “C”, “D”};<br>    ArrayList<String> list &#x3D; new ArrayList&lt;&gt;();<br>    Random r &#x3D; new Random();<br>    for (int i &#x3D; 0; i &lt; 80; i++) {<br>        int index &#x3D; r.nextInt(arr.length);<br>        list.add(arr[index]);<br>    }<br>    &#x2F;&#x2F; System.out.print(list);<br>    HashMap&lt;String, Integer&gt; hm &#x3D; new HashMap&lt;&gt;();<br>    for (String s : list) {<br>        if (hm.containsKey(s)) {<br>            Integer num &#x3D; hm.get(s);<br>            num++;<br>            hm.put(s, num);<br>        } else {<br>            hm.put(s, 1);<br>        }<br>     }<br>    System.out.println(hm);<br>    int max &#x3D; 0;<br>    Set<String> strings &#x3D; hm.keySet();<br>    for (String s : strings) {<br>        int count &#x3D; hm.get(s);<br>        if (count &gt;&#x3D; max){<br>           max &#x3D; count;<br>       }<br>    }<br>&#x2F;&#x2F;        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries &#x3D; hm.entrySet();<br>&#x2F;&#x2F;<br>&#x2F;&#x2F;        for (Map.Entry&lt;String, Integer&gt; sMax : entries) {<br>&#x2F;&#x2F;            int value &#x3D; sMax.getValue();<br>&#x2F;&#x2F;            if (value &gt;&#x3D; max){<br>&#x2F;&#x2F;                max &#x3D; value;<br>&#x2F;&#x2F;            }<br>&#x2F;&#x2F;        }<br>    System.out.println(max);<br><br>}<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># LinkHashMap</span><br><span class="line"></span><br><span class="line">## 特点</span><br><span class="line"></span><br><span class="line">- 由键快定：有序、不重复、无索引。</span><br><span class="line">- 这里的有序指的是保证存储和取出的元素顺序一致</span><br><span class="line">- 原理：底层数据结构是依然哈希表，只是每个键值对元素又额外的多了一个双链表的机制记录存储的顺序。</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package day_25;</span><br><span class="line"></span><br><span class="line">import java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line">public class LinkHashMap &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LinkedHashMap&lt;String,Integer&gt; lhm = new LinkedHashMap&lt;&gt;();</span><br><span class="line">        lhm.put(&quot;a&quot;,1);</span><br><span class="line">        lhm.put(&quot;b&quot;,1);</span><br><span class="line">        lhm.put(&quot;c&quot;,1);</span><br><span class="line">        lhm.put(&quot;d&quot;,1);</span><br><span class="line">        System.out.println(lhm);// &#123;a=1, b=1, c=1, d=1&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Map</title>
      <link href="/2023/02/20/Map/"/>
      <url>/2023/02/20/Map/</url>
      
        <content type="html"><![CDATA[<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><h2 id="Map常见的Api"><a href="#Map常见的Api" class="headerlink" title="Map常见的Api"></a>Map常见的Api</h2><blockquote><p>Mp是双列集合的顶层接口，它的功能是全部双列集合都可以继承使用的</p></blockquote><p>   <img src="https://pic.imgdb.cn/item/63f37b02f144a01007f478f2.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_25;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Map_Demo1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    V put(K key,V value)                  添加元素</span></span><br><span class="line"><span class="comment">    V remove(object key)                  根据键删除键值对元素</span></span><br><span class="line"><span class="comment">    void clear()                          移除所有的键值对元素</span></span><br><span class="line"><span class="comment">    boolean containsKey(object key)       判断集合是否包含指定的键</span></span><br><span class="line"><span class="comment">    boolean containsValue(object value)   判断集合是否包含指定的值</span></span><br><span class="line"><span class="comment">    boolean isEmpty()                     判断集合是否为空</span></span><br><span class="line"><span class="comment">i   int size()                            集合的长度，也就是集合中键值对的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建Map对象</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加元素</span></span><br><span class="line">        <span class="comment">// put方法细节</span></span><br><span class="line">        <span class="comment">// 添加/覆盖</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在添加数据的时候，如果键不存在，那么直接把键值对对象添加到map集合当中， 方法返回Null</span></span><br><span class="line">        <span class="comment">// 在添加数据的时候，如果键是存在的，那么会把原有的键值对对象覆盖，会把被覆盖的值进行返回。</span></span><br><span class="line">        map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String value = map.put(&quot;a&quot;, &quot;4&quot;);</span></span><br><span class="line">        <span class="comment">// System.out.println(value);  // 1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除</span></span><br><span class="line">        <span class="comment">// map.remove(&quot;a&quot;); // &#123;b=2, c=3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//清空</span></span><br><span class="line">        <span class="comment">//map.clear();</span></span><br><span class="line">        <span class="comment">//判断是否包含</span></span><br><span class="line"><span class="comment">//        boolean keyResult = map.containsKey(&quot;a&quot;); // true</span></span><br><span class="line"><span class="comment">//        System.out.println(keyResult);//true</span></span><br><span class="line"><span class="comment">//        boolean valueResult = map.containsValue(&quot;1&quot;); // true</span></span><br><span class="line"><span class="comment">//        System.out.println(valueResult);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(map.isEmpty());  // false</span></span><br><span class="line">        System.out.println(map.size()); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印集合</span></span><br><span class="line">        System.out.println(map); <span class="comment">//  &#123;a=4, b=2, c=3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Map遍历"><a href="#Map遍历" class="headerlink" title="Map遍历"></a>Map遍历</h2><ol><li><p>键找值</p><ul><li><p>&#96;&#96;&#96;java<br>package day_25;</p><p>import java.util.HashMap;<br>import java.util.Iterator;<br>import java.util.Map;<br>import java.util.Set;</p><p>public class Map_Demo2 {<br>public static void main(String[] args) {<br><br>    &#x2F;&#x2F; Map 遍历，键找值<br>    Map&lt;String, String&gt; m &#x3D; new HashMap&lt;&gt;();<br>    m.put(“a”, “1”);<br>    m.put(“b”, “2”);<br>    m.put(“c”, “3”);<br>    &#x2F;&#x2F; lambda表达式<br>    Set<String> st &#x3D; m.keySet();<br>&#x2F;&#x2F;        st.forEach(s -&gt; System.out.print(m.get(s) + “ “));</p><pre><code>    // 增强for遍历    for (String s : st) &#123;        System.out.print(m.get(s) + &quot; &quot;);    &#125;    // 迭代器遍历    Iterator&lt;String&gt; iterator = st.iterator();    while (iterator.hasNext())&#123;        String s = iterator.next();        System.out.println(m.get(s));    &#125;&#125;</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 键值对</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">     package day_25;</span><br><span class="line">     </span><br><span class="line">     import java.util.HashMap;</span><br><span class="line">     import java.util.Iterator;</span><br><span class="line">     import java.util.Map;</span><br><span class="line">     import java.util.Set;</span><br><span class="line">     </span><br><span class="line">     public class Map_Demo3 &#123;</span><br><span class="line">         public static void main(String[] args) &#123;</span><br><span class="line">             //Map集合的第二种遍历方式</span><br><span class="line">             //1.创建Map集合的对象</span><br><span class="line">             Map&lt;String, String&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">             //2.添加元素</span><br><span class="line">             //键：人物的外号</span><br><span class="line">             //值：人物的名字</span><br><span class="line">             map.put(&quot;标枪选手&quot;, &quot;马超&quot;);</span><br><span class="line">             map.put(&quot;人物挂件&quot;, &quot;明世隐&quot;);</span><br><span class="line">             map.put(&quot;御龙骑士&quot;, &quot;尹志平&quot;);</span><br><span class="line">             //3.Map集合的第二种遍历方式</span><br><span class="line">             //通过键值对对象进行遍历</span><br><span class="line">             //3.1通过一个方法获取所有的键值对对象，返回一个Set集合</span><br><span class="line">             Set&lt;Map.Entry&lt;String, String&gt;&gt; entries = map.entrySet();</span><br><span class="line">     </span><br><span class="line">             // 增强for遍历</span><br><span class="line">     //        for (Map.Entry&lt;String, String&gt; entry : entries) &#123;</span><br><span class="line">     //            System.out.println(entry.getKey());</span><br><span class="line">     //            System.out.println(entry.getValue());</span><br><span class="line">     //        &#125;</span><br><span class="line">     </span><br><span class="line">             // lambda 遍历</span><br><span class="line">             // entries.forEach(stringStringEntry -&gt; System.out.println(stringStringEntry.getKey() + &quot; &quot; + stringStringEntry.getValue()));</span><br><span class="line">     </span><br><span class="line">             // 迭代器遍历</span><br><span class="line">             Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = entries.iterator();</span><br><span class="line">             while (iterator.hasNext())&#123;</span><br><span class="line">                 Map.Entry&lt;String, String&gt; next = iterator.next();</span><br><span class="line">                 System.out.println(next.getKey()+&quot; &quot;+next.getValue());</span><br><span class="line">             &#125;</span><br><span class="line">     </span><br><span class="line">         &#125;</span><br><span class="line">     </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li></ul></li><li><p>lambda表达式</p><ul><li><pre><code class="java">// lambda 遍历    Map&lt;Student,String&gt; map= new HashMap&lt;&gt;();    map.forEach(new BiConsumer&lt;Student, String&gt;() &#123;            @Override            public void accept(Student student, String s) &#123;                System.out.println(student+&quot; &quot;+s);            &#125;        &#125;);</code></pre></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双列集合</title>
      <link href="/2023/02/20/%E5%8F%8C%E5%88%97%E9%9B%86%E5%90%88/"/>
      <url>/2023/02/20/%E5%8F%8C%E5%88%97%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="双列集合"><a href="#双列集合" class="headerlink" title="双列集合"></a>双列集合</h1><ol><li>双列集合一次需要存一对数据，分别为键和值</li><li>键不能重复，值可以重复</li><li>键和值是一一对应的，每一个键只能找到自己对应的值</li><li>键+值这个整体我们称之为“键值对”或者“键值对对象”，在Java中叫做“Entry对象”</li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单列集合总结-day24</title>
      <link href="/2023/02/19/%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/19/%E5%8D%95%E5%88%97%E9%9B%86%E5%90%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="单列集合总结"><a href="#单列集合总结" class="headerlink" title="单列集合总结"></a>单列集合总结</h1><ol><li>如果想要集合中的元素可重复</li></ol><ul><li><strong>用ArrayList:集合，基于数组的。<font color = red>（用的最多）</font></strong></li></ul><ol start="2"><li>如果想要集合中的元素可重复，而且当前的<font color =red>增删操作明显多于查询</font><ul><li><strong>用LinkedList:集合，基于链表的。</strong></li></ul></li><li>如果想对集合中的元素去重<ul><li><strong>用HashSet集合，基于哈希表的。<font color = red>（用的最多）</font></strong></li></ul></li><li>如果想对集合中的元素去重，而且**<font color = red>保证存取顺序</font>**<ul><li><strong>用LinkedHashSet?集合，基于哈希表和双链表，效率低于HashSet.。</strong></li></ul></li><li>如果想对集合中的元素进行<font color= red>排序</font><ul><li><strong>用TreeSet:集合，基于红黑树。后续也可以用List集合实现排序。</strong></li></ul></li></ol><p><img src="https://pic.imgdb.cn/item/63f1e6c2f144a01007be7d50.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口详解-day22</title>
      <link href="/2023/02/19/%E6%8E%A5%E5%8F%A3%20%E5%AF%B9%E8%B1%A1%20=new%20%E5%AE%9E%E7%8E%B0%E7%B1%BB%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/02/19/%E6%8E%A5%E5%8F%A3%20%E5%AF%B9%E8%B1%A1%20=new%20%E5%AE%9E%E7%8E%B0%E7%B1%BB%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="接口的详解-接口-对象-x3D-new-实现类"><a href="#接口的详解-接口-对象-x3D-new-实现类" class="headerlink" title="接口的详解_接口 对象&#x3D;new 实现类"></a>接口的详解_接口 对象&#x3D;new 实现类</h1><ul><li>接口是为了实现多态。</li><li>接口是为了实现多态。</li><li>接口是为了实现多态。</li></ul><h2 id="先讲一下接口回调。"><a href="#先讲一下接口回调。" class="headerlink" title="先讲一下接口回调。"></a>先讲一下接口回调。</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">People</span>&#123;</span><br><span class="line">   <span class="keyword">void</span> <span class="title function_">peopleList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">peopleList</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I’m a student.&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">implements</span> <span class="title class_">People</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">peopleList</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I’m a teacher.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    People a;             <span class="comment">//声明接口变量</span></span><br><span class="line">    a=<span class="keyword">new</span> <span class="title class_">Student</span>();      <span class="comment">//实例化，接口变量中存放对象的引用</span></span><br><span class="line">    a.peopleList();        <span class="comment">//接口回调</span></span><br><span class="line">    a=<span class="keyword">new</span> <span class="title class_">Teacher</span>();     <span class="comment">//实例化，接口变量中存放对象的引用</span></span><br><span class="line">    a.peopleList();       <span class="comment">//接口回调</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">I’m a student.</span><br><span class="line">I’m a teacher.</span><br><span class="line"> </span><br><span class="line">例子参考：https:<span class="comment">//zhidao.baidu.com/question/1923748969384870227.html</span></span><br></pre></td></tr></table></figure><h3 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h3><blockquote><p>今天在公司里面写一个接口及其实现类的时候，<br>遇到一个现象引起了我的思考。<br>我做的一个后台管理里面的查询功能，<br>在controller层对接口的方法进行实现的时候，<br>我采用的是接口的引用对象来实现。<br>为什么不采用实现类创建引用对象来调用方法实现呢？</p><p>按照正常的逻辑，<br>接口里面只定义了方法名称。<br>主要的实现还是在继承接口的实现类里面，<br>而我看了别人的代码，<br>他们也大部分都是创建接口对象来实现，<br>重写的方法体是在实现类里面，接口对象为什么就可以使用。<br>例如：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//List是接口,ArrayList是它的实现类</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>原因：这就是JAVA多态的特点。<br>父类引用指向子类对象，<br>父类（接口）的引用就能够直接调用子类（实现类）的方法。</p><p>为什么在实际的开发过程中不采用直接创建实现类对象来调用方法呢？<br>我在知乎上看到这一篇文章，觉得非常收益，<br>这么做的主要目的还是为了能够减少开发过程中代码的修改量。</p><p>[快速理解Java多态的含义][<a href="https://zhuanlan.zhihu.com/p/53731349]">https://zhuanlan.zhihu.com/p/53731349]</a></p><h2 id="快速理解Java多态的含义"><a href="#快速理解Java多态的含义" class="headerlink" title="快速理解Java多态的含义"></a>快速理解Java多态的含义</h2><blockquote><p>自己把这篇文章归纳总结如下：<br>定义一个animal抽象类， 里面有两个方法。<br>接下里定义两个类（cat和dog）去继承animal，<br>cat和dog分别重写了animal中的方法。</p><p>我们在调用dog里面的方法之后，<br>想修改为调用cat的方法。 —-<br>只需要将Animal animal&#x3D;new Dog()改成Animal<br>animal&#x3D;new Catl()， 只改变了一个对象。<br>接着继续调用animal.sing()，animal.run()。<br>实际的开发过程中要维护大量的代码量，<br>如果要换一个对象，改的代码更少。</p></blockquote><p>[][]</p><p>[][]</p><p>[博客园 深入理解JAva的接口和抽象类][<a href="https://www.cnblogs.com/dolphin0520/p/3811437.html]">https://www.cnblogs.com/dolphin0520/p/3811437.html]</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//implA 为接口 ClassB为其实现类</span></span><br><span class="line">implA A=<span class="keyword">new</span> <span class="title class_">ClassB</span>();<span class="comment">//接口类型的引用变量A 去接收对象地址</span></span><br><span class="line">or</span><br><span class="line">ClassB A=<span class="keyword">new</span> <span class="title class_">ClassB</span>();<span class="comment">//类类型的引用变量A 去接收对象地址</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123; <span class="comment">//接口A               </span></span><br><span class="line"> <span class="comment">//接口的方法声明必须是 public abstract ，即便不写默认也是</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">implements</span> <span class="title class_">A</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//your coding</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们要使用B类对象，调用B类方法，我们很容易就会习惯的写出</p><p><code> A demo=new B();</code></p><blockquote><p>用接口类型的引用变量demo，<br><strong>去接收实现类B实例化出来的对象地址(这里的&#x3D;是传递的地址)。</strong></p></blockquote><blockquote><p>为什么不是B demo&#x3D;new B();</p></blockquote><blockquote><p>呢，这样也不会有问题啊？<br>（当然A demo&#x3D;newA();<br>是不可能的，因为接口是不能用来实例化对象的，<br>但可以用来声明一个接口类型的引用变量）。</p></blockquote><p>先把结论丢出来吧<br>应该优先使用接口而不是类来引用对象，但只有存在适当的接口类型时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">PetInterface</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        p.talk();</span><br><span class="line">        p.batheSelf();<span class="comment">//无法调用 ，报错The method batheSelf() is undefined for the type PetInterface</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PetInterface</span> &#123;                </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">PetInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bark!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">PetInterface</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">talk</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Meow!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">batheSelf</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Cat bathing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>我们看到，<br>方法batheSelf()仅仅存在实现类中时，<br>若我们仍然使用接口来引用对象时<br>PetInterface p &#x3D; newCat()，<br>那些仅仅存在实现类中的方法，<br>是无法直接调用的即p.batheSelf()无法调用会报错。<br>所以这时使用Cat p &#x3D; new Cat()即类来引用是更好的。</p></blockquote><blockquote><p>也就是说，<br>使用接口类去引用对象是有前提条件的<br>——即实现类中全是接口类的方法的实现，没有自己单独的方法。<br><strong>当实现类存在自己的方法时，使用实现类来声明变量。</strong></p></blockquote><h2 id="【转型问题】"><a href="#【转型问题】" class="headerlink" title="【转型问题】"></a>【转型问题】</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">PetInterface</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();<span class="comment">//向上转型 Cat-&gt;PetInterface </span></span><br><span class="line">        p.talk();</span><br><span class="line">        p.batheSelf();<span class="comment">//无法调用 ，报错The method batheSelf() is undefined for the type PetInterface</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们说直接p.batheSelf()会报错，<br>这是因为向上转型的过程中Cat-&gt;PetInterface ，<br>对PetInterface 接口造成的唯一效应就是函数的“遗失”而非”获得”<br>（即遗失了实现类自己独有的函数方法batheSelf()），<br>而Cat向上转型至PetInterface可能会窄化其功能，<br>但无论如何不会窄于PetInterface接口功能。<br>当然也存在向下转型，</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//p.batheSelf();替换为下面形式</span></span><br><span class="line">((Cat)p).batheSelf();<span class="comment">//向下转型，可正常调用执行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TreeSet-day24</title>
      <link href="/2023/02/18/TreeSet/"/>
      <url>/2023/02/18/TreeSet/</url>
      
        <content type="html"><![CDATA[<h1 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h1><h2 id="TreeSet-特点"><a href="#TreeSet-特点" class="headerlink" title="TreeSet 特点"></a>TreeSet 特点</h2><ul><li>不重复、无索引、可排序</li><li>可排序：按照元素的默认规则（有小到大)排序。</li><li>TreeSet:集合底层是基于红黑树的数据结构实现排序的，增删改查性能都较好。</li><li>底层不是哈希表，是红黑树</li></ul><h2 id="TreeSet集合默认的规则"><a href="#TreeSet集合默认的规则" class="headerlink" title="TreeSet集合默认的规则"></a>TreeSet集合默认的规则</h2><ul><li>对于数值类型：Integer,Double,默认按照从小到大的顺序进行排序。</li><li>对于字符、字符串类型：按照字符在ASCLL码表中的数字升序进行排序。</li></ul><h2 id="TreeSet-排序"><a href="#TreeSet-排序" class="headerlink" title="TreeSet 排序"></a>TreeSet 排序</h2><h3 id="TreeSet的两种比较方式"><a href="#TreeSet的两种比较方式" class="headerlink" title="TreeSet的两种比较方式"></a>TreeSet的两种比较方式</h3><ol><li>默认排序&#x2F;自然排序：Javabean类实现Comparable接口指定比较规则</li><li>比较器排序：创建TreeSet&gt;对象时候，传递比较器Comparator指定规侧</li></ol><blockquote><p>使用原则：默认使用第一种，如果第一种不能满足当前需求，就使用第二种</p></blockquote><h4 id="排序方式一"><a href="#排序方式一" class="headerlink" title="排序方式一"></a>排序方式一</h4><h3 id="Integer排序"><a href="#Integer排序" class="headerlink" title="Integer排序"></a>Integer排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package day_24;</span><br><span class="line"></span><br><span class="line">import java.util.Iterator;</span><br><span class="line"></span><br><span class="line">public class TreeSet &#123;</span><br><span class="line">    /*</span><br><span class="line">    需求：利用TreeSet存储整数并进行排序</span><br><span class="line">     */</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        java.util.TreeSet&lt;Integer&gt; ts = new java.util.TreeSet&lt;&gt;();</span><br><span class="line">        ts.add(1);</span><br><span class="line">        ts.add(5);</span><br><span class="line">        ts.add(2);</span><br><span class="line">        ts.add(4);</span><br><span class="line">        ts.add(3);</span><br><span class="line">        System.out.println(ts);  // [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // 遍历</span><br><span class="line">        // 迭代器</span><br><span class="line">        Iterator&lt;Integer&gt; it = ts.iterator();</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            Integer next = it.next();</span><br><span class="line">            System.out.print(next);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        // 增强for </span><br><span class="line">        for (Integer t : ts) &#123;</span><br><span class="line">            System.out.print(t);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        // lambda</span><br><span class="line">        ts.forEach(integer -&gt; System.out.print(integer));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义类型排序"><a href="#自定义类型排序" class="headerlink" title="自定义类型排序"></a>自定义类型排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student2</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student2&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student2 o)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getAge() - o.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student2</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="string">&quot;zahngsan&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">Student2</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="type">Student2</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="string">&quot;wangwu&quot;</span>,<span class="number">25</span>);</span><br><span class="line">        <span class="type">Student2</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student2</span>(<span class="string">&quot;zahngsan&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        TreeSet&lt;Student2&gt; st= <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        st.add(s1);</span><br><span class="line">        st.add(s2);</span><br><span class="line">        st.add(s3);</span><br><span class="line">        st.add(s4);</span><br><span class="line">        System.out.println(st);</span><br><span class="line">        <span class="comment">// [Student2&#123;name = zahngsan, age = 23&#125;, Student2&#123;name = lisi, age = 24&#125;, Student2&#123;name = wangwu, age = 25&#125;]</span></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student3</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student3&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">// 语文成绩</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> chinese;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> math;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> english;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student3</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">int</span> chinese, <span class="type">int</span> math, <span class="type">int</span> english)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.chinese = chinese;</span><br><span class="line">        <span class="built_in">this</span>.math = math;</span><br><span class="line">        <span class="built_in">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> chinese</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getChinese</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chinese</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChinese</span><span class="params">(<span class="type">int</span> chinese)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> math</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> math</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMath</span><span class="params">(<span class="type">int</span> math)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.math = math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> english</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEnglish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> english</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnglish</span><span class="params">(<span class="type">int</span> english)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student3&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;, chinese = &quot;</span> + chinese + <span class="string">&quot;, math = &quot;</span> + math + <span class="string">&quot;, english = &quot;</span> + english + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student3 o)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果总分一样，按照语文成绩排</span></span><br><span class="line"><span class="comment">        如果语文一样，按照数学成绩排</span></span><br><span class="line"><span class="comment">        如果数学成绩一样，按照英语成绩排</span></span><br><span class="line"><span class="comment">        如果英文成绩一样，按照年龄排</span></span><br><span class="line"><span class="comment">        如果年龄一样，按照姓名的字母顺序排</span></span><br><span class="line"><span class="comment">        如果都一样，认为是同一个学生，不存。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> <span class="built_in">this</span>.getChinese() + <span class="built_in">this</span>.getMath() + <span class="built_in">this</span>.getEnglish();</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> o.getChinese() + o.getMath() + o.getEnglish();</span><br><span class="line">        System.out.println(o.getName()+ <span class="string">&quot;分数&quot;</span>+sum2);</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getName()+ <span class="string">&quot;分数&quot;</span>+sum1);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sum1 - sum2;</span><br><span class="line">        i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getChinese() - o.getChinese() : i;</span><br><span class="line">        i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getMath() - o.getMath() : i;</span><br><span class="line">        i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getEnglish() - o.getEnglish() : i;</span><br><span class="line">        i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getAge() - o.getAge() : i;</span><br><span class="line">        i = i == <span class="number">0</span> ? <span class="built_in">this</span>.getName().compareTo(o.getName()) : i;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo4</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：创建5个学生对象</span></span><br><span class="line"><span class="comment">    属性：（姓名，年龄，语文成绩，数学成绩，英语成绩），</span></span><br><span class="line"><span class="comment">    按照总分从高到低输出到控制台</span></span><br><span class="line"><span class="comment">    如果总分一样，按照语文成绩排</span></span><br><span class="line"><span class="comment">    如果语文一样，按照数学成绩排</span></span><br><span class="line"><span class="comment">    如果数学成绩一样，按照英语成绩排</span></span><br><span class="line"><span class="comment">    如果英文成绩一样，按照年龄排</span></span><br><span class="line"><span class="comment">    如果年龄一样，按照姓名的字母顺序排</span></span><br><span class="line"><span class="comment">    如果都一样，认为是同一个学生，不存。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student3</span> <span class="variable">st1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student3</span>(<span class="string">&quot;ZhangSan&quot;</span>,<span class="number">23</span>,<span class="number">65</span>,<span class="number">80</span>,<span class="number">59</span>);</span><br><span class="line">        <span class="type">Student3</span> <span class="variable">st2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student3</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">24</span>,<span class="number">75</span>,<span class="number">70</span>,<span class="number">69</span>);</span><br><span class="line">        <span class="type">Student3</span> <span class="variable">st3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student3</span>(<span class="string">&quot;WangWu&quot;</span>,<span class="number">25</span>,<span class="number">85</span>,<span class="number">60</span>,<span class="number">89</span>);</span><br><span class="line">        <span class="type">Student3</span> <span class="variable">st4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student3</span>(<span class="string">&quot;ZhaoLiu&quot;</span>,<span class="number">26</span>,<span class="number">95</span>,<span class="number">50</span>,<span class="number">49</span>);</span><br><span class="line"></span><br><span class="line">        TreeSet&lt;Student3&gt; st = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        st.add(st1);</span><br><span class="line">        st.add(st2);</span><br><span class="line">        st.add(st3);</span><br><span class="line">        st.add(st4);</span><br><span class="line">        System.out.println(st);</span><br><span class="line">        <span class="comment">// [Student3&#123;name = ZhaoLiu, age = 26, chinese = 95, math = 50, english = 49&#125;,</span></span><br><span class="line">        <span class="comment">// Student3&#123;name = ZhangSan, age = 23, chinese = 65, math = 80, english = 59&#125;,</span></span><br><span class="line">        <span class="comment">// Student3&#123;name = lisi, age = 24, chinese = 75, math = 70, english = 69&#125;,</span></span><br><span class="line">        <span class="comment">// Student3&#123;name = WangWu, age = 25, chinese = 85, math = 60, english = 89&#125;]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63f1d3b6f144a01007a197fb.jpg"></p><h4 id="排序方式二"><a href="#排序方式二" class="headerlink" title="排序方式二"></a>排序方式二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetDemo3</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：请自行选择比较器排序和自然排序两种方式：</span></span><br><span class="line"><span class="comment">    要求：存入四个字符串，“c”,“ab”,“df”,“qwer”</span></span><br><span class="line"><span class="comment">    按照长度排序，如果一样长则按照首字母排序</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    String类中定义了排序规则，因此方式一不适合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        TreeSet&lt;String&gt; ts = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(</span><br><span class="line">           (String o1, String o2)-&gt; &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> o1.length() - o2.length();</span><br><span class="line">                i = i == <span class="number">0</span> ? o1.compareTo(o2) : i;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        ts.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;df&quot;</span>);</span><br><span class="line">        ts.add(<span class="string">&quot;qwer&quot;</span>);</span><br><span class="line">        <span class="comment">//  System.out.println(ts); // 默认String中的排序方式 [ab, c, df, qwer]</span></span><br><span class="line">        System.out.println(ts);  <span class="comment">// 修改排序方式后 [c, ab, df, qwer]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Set系列集合-day24</title>
      <link href="/2023/02/18/Set%E7%B3%BB%E5%88%97%E9%9B%86%E5%90%88/"/>
      <url>/2023/02/18/Set%E7%B3%BB%E5%88%97%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Set系列集合"><a href="#Set系列集合" class="headerlink" title="Set系列集合"></a>Set系列集合</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>无序：存取顺序不一致</li><li>不重复：可以去除重复</li><li>无索引：没有带索引的方法，所以不能使用普通fo循环遍历，也不能通过索引来获取元素</li></ul><h2 id="Set集合实现类"><a href="#Set集合实现类" class="headerlink" title="Set集合实现类"></a>Set集合实现类</h2><ul><li>HashSet:无序、不重复、无索引</li><li>LinkedHashSet:有序、不重复、无索引</li><li>TreeSet:可排序、不重复、无索引</li></ul><p><mark>Set接口中的方法上基本上与Collection的API一致。</mark></p><p><img src="https://pic.imgdb.cn/item/63f0a6b9f144a01007d52189.jpg"></p><h2 id="遍历方式"><a href="#遍历方式" class="headerlink" title="遍历方式"></a>遍历方式</h2><ul><li>迭代器</li><li>增强for</li><li>lambda表达式</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetDemo1</span> &#123;</span><br><span class="line">    <span class="comment">/*\</span></span><br><span class="line"><span class="comment">    利用Set系列的集合，添加字符串，并使用多种方式遍历。</span></span><br><span class="line"><span class="comment">    迭代器</span></span><br><span class="line"><span class="comment">    增强for</span></span><br><span class="line"><span class="comment">    Lambda表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.创建一个Set集合的对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; s = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2,添加元素</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">r1</span> <span class="operator">=</span> s.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">r2</span> <span class="operator">=</span> s.add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        s.add(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        System.out.println(r1);<span class="comment">//true</span></span><br><span class="line">        System.out.println(r2);<span class="comment">// false  Set元素是唯一的</span></span><br><span class="line">        System.out.println(s); <span class="comment">// [李四, 张三, 王五]    存和取得顺序是不一样的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器遍历</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = s.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123; <span class="comment">// 判断当前位置是否有元素</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> iterator.next(); <span class="comment">// 获取当前元素，并移动指针</span></span><br><span class="line">            System.out.println(str);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增强for遍历</span></span><br><span class="line">        <span class="keyword">for</span> (String item : s) &#123;</span><br><span class="line">            System.out.println(item);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// lambda 表达式遍历</span></span><br><span class="line"><span class="comment">//        s.forEach(new Consumer&lt;String&gt;() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void accept(String str) &#123;</span></span><br><span class="line"><span class="comment">//                System.out.print(str);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;);</span></span><br><span class="line">        s.forEach(str -&gt; System.out.print(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashSet-day24</title>
      <link href="/2023/02/18/HashSet/"/>
      <url>/2023/02/18/HashSet/</url>
      
        <content type="html"><![CDATA[<h1 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h1><h2 id="HashSet底层原理"><a href="#HashSet底层原理" class="headerlink" title="HashSet底层原理"></a>HashSet底层原理</h2><ul><li>HashSets集合底层采取哈希表存储数据</li><li>哈希表是一种对于增删改查数据性能都较好的结构</li></ul><h2 id="哈希表的组成"><a href="#哈希表的组成" class="headerlink" title="哈希表的组成"></a>哈希表的组成</h2><ul><li>JDK8之前：数组+链表</li><li>JDK8开始：数组+链表+红黑树</li></ul><h2 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h2><blockquote><p>哈希值：对象的整数表现形式</p></blockquote><ul><li>根据hashCode方法算出来的int类型的整数</li><li>该方法定义在Object类中，所有对象都可以调用，默认使用地址值进行计算</li><li>一般情况下，会重写hashCode方法，利用对象内部的属性值计算哈希值</li></ul><h2 id="对象的哈希值特点"><a href="#对象的哈希值特点" class="headerlink" title="对象的哈希值特点"></a>对象的哈希值特点</h2><ul><li><p>如果没有重写hashCode方法，不同对象计算出的哈希值是不同的 </p></li><li><p>如果已经重写hashcode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的</p></li><li><p>在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样。（哈希碰撞）</p><h2 id="HashSet-JDK8以后底层原理"><a href="#HashSet-JDK8以后底层原理" class="headerlink" title="HashSet JDK8以后底层原理"></a>HashSet JDK8以后底层原理</h2></li></ul><ol><li>创建一个默认长度16，默认加载因子0.75的数组，数组名table</li><li>根据元素的哈希值跟数组的长度计算出应存入的位置</li><li>判断当前位置是否为nul,如果是nul直接存入</li><li>如果位置不为null,表示有元素，则调用equals方法比较属性值</li><li>一样：不存     不一样：存入数组，形成链表</li><li>JDK8以前：新元素存入数组，老元素挂在新元素下面</li><li>JDK8以后：新元素直接挂在老元素下面</li></ol><ul><li>JDK8以后，当链表长度超过8，而且数组长度大于等于64时，自动转换为红黑树</li><li>如果集合中存储的是自定义对象，必须要重写hashCode和equals方法</li></ul><h2 id="HashSet的三个问题"><a href="#HashSet的三个问题" class="headerlink" title="HashSet的三个问题"></a>HashSet的三个问题</h2><ol><li><p>问题1：HashSet.为什么存和取的顺序不一样？</p><blockquote><p>底层是链表或者红黑树</p></blockquote></li><li><p>问题2：HashSet:为什么没有索引？</p><blockquote><p>底层是链表或者红黑树</p></blockquote></li><li><p>问题3：HashSet;是利用叶么机制保证数据去重的？</p><blockquote><p>HashCode方法<br>equals.方法</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetDemo1</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    哈希值：</span></span><br><span class="line"><span class="comment">对象的整数表现形式</span></span><br><span class="line"><span class="comment">1.如果没有重写hashCode方法，不同对象计算出的哈希值是不同的</span></span><br><span class="line"><span class="comment">2.如果已经重写hashcode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的</span></span><br><span class="line"><span class="comment">3.但是在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样。（哈希碰撞）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="comment">//1.如果没有重写hashCode方法，不同对象计算出的哈希值是不同的</span></span><br><span class="line">        System.out.println(s1.hashCode()); <span class="comment">// 1324119927</span></span><br><span class="line">        System.out.println(s2.hashCode()); <span class="comment">//990368553</span></span><br><span class="line">        <span class="comment">//如果已经重写hashcode方法，不同的对象只要属性值相同，计算出的哈希值就是一样的</span></span><br><span class="line">        <span class="comment">// System.out.println(s1.hashCode()); // 24022543</span></span><br><span class="line">        <span class="comment">// System.out.println(s2.hashCode()); //24022543</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 但是在小部分情况下，不同的属性值或者不同的地址值计算出来的哈希值也有可能一样。（哈希碰撞）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.hashCode());  <span class="comment">// 96354</span></span><br><span class="line">        System.out.println(<span class="string">&quot;acD&quot;</span>.hashCode());  <span class="comment">// 96354</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="LinkHashSet-底层原理"><a href="#LinkHashSet-底层原理" class="headerlink" title="LinkHashSet 底层原理"></a>LinkHashSet 底层原理</h1><ul><li><p><font color = red>有序、</font>不重复、无索引。</p><blockquote><p>这里的有序指的是保证存储和取出的元素顺序一致</p></blockquote></li><li><p>原理：底层数据结构是依然哈希表，只是每个元素又额外的多了一个双链表的机制记录存储的顺序。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_24;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkHashSetDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>,<span class="number">24</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;WangWu&quot;</span>,<span class="number">25</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        LinkedHashSet&lt;Student&gt; hs  =<span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;();</span><br><span class="line">        System.out.println(hs.add(s1));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(hs.add(s2));  <span class="comment">// true</span></span><br><span class="line">        System.out.println(hs.add(s3)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(hs.add(s4)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        System.out.println(hs);  <span class="comment">// [Student&#123;name = 张三, age = 23&#125;, Student&#123;name = lisi, age = 24&#125;, Student&#123;name = WangWu, age = 25&#125;]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>LinkedHashSet集合的特点和原理是怎么样的？<ul><li>有序、不重复、无索引</li><li>底层基于哈希表，使用双链表记录添加顺序</li></ul></li><li>在以后如果要数据去重，我们使用哪个？<ul><li>默认使用HashSet</li><li>如果要求去重且存取有序，才使用LinkedHashSet</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型总结</title>
      <link href="/2023/02/15/%E6%B3%9B%E5%9E%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2023/02/15/%E6%B3%9B%E5%9E%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型总结"><a href="#泛型总结" class="headerlink" title="泛型总结"></a>泛型总结</h1><h2 id="什么是泛型？"><a href="#什么是泛型？" class="headerlink" title="什么是泛型？"></a>什么是泛型？</h2><ul><li>JDK5引入的特性，可以在编译阶段约束操作的数据类型，并进行检查</li></ul><h2 id="泛型的好处？"><a href="#泛型的好处？" class="headerlink" title="泛型的好处？"></a>泛型的好处？</h2><ul><li>统一数据类型</li><li>把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的异常，因为在编译阶段类型就能确定下来。</li></ul><h2 id="泛型的细节？"><a href="#泛型的细节？" class="headerlink" title="泛型的细节？"></a>泛型的细节？</h2><ul><li>泛型中不能写基本数据类型</li><li>指定泛型的具体类型后，传递数据时，可以传入该类型和他的子类类型</li><li>如果不写泛型，类型默认是Object</li></ul><h2 id="哪里定义泛型？"><a href="#哪里定义泛型？" class="headerlink" title="哪里定义泛型？"></a>哪里定义泛型？</h2><ul><li>泛型类：在类名后面定义泛型，创建该类对象的时候，确定类型</li><li>泛型方法：在修饰符后面定义方法，调用该方法的时候，确定类型</li><li>泛型接口：在接口名后面定义泛型，实现类确定类型，实现类延续泛型</li></ul><h2 id="泛型的继承和通配符"><a href="#泛型的继承和通配符" class="headerlink" title="泛型的继承和通配符"></a>泛型的继承和通配符</h2><ul><li>泛型不具备继承性，但是数据具备继承性</li><li>泛型的通配符：？</li><li>？extend E</li><li>？super E</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>·定义类、方法、接口的时候，如果类型不确定，就可以定义泛型</li><li>·如果类型不确定，但是能知道是哪个继承体系中的，可以使用泛型的通配符</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型的继承和通配符-day23</title>
      <link href="/2023/02/15/Java%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%BB%A7%E6%89%BF%E5%92%8C%E9%80%9A%E9%85%8D%E7%AC%A63/"/>
      <url>/2023/02/15/Java%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%BB%A7%E6%89%BF%E5%92%8C%E9%80%9A%E9%85%8D%E7%AC%A63/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型的继承和通配符"><a href="#Java泛型的继承和通配符" class="headerlink" title="Java泛型的继承和通配符"></a>Java泛型的继承和通配符</h1><h2 id="泛型不具备继承性，但是数据具备继承性"><a href="#泛型不具备继承性，但是数据具备继承性" class="headerlink" title="泛型不具备继承性，但是数据具备继承性"></a>泛型不具备继承性，但是数据具备继承性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">此时，泛型里面写的是什么类型，那么只能传递什么类型的数据。</span><br><span class="line">弊端：</span><br><span class="line">利用泛型方法有一个小弊端，此时他可以接受任意的数据类型</span><br><span class="line">Ye Fu zi</span><br><span class="line">Student</span><br><span class="line">希望：本方法虽然不确定类型，但是以后我希望只能传递Ye Fu zi</span><br><span class="line">此时我们就可以使用泛型的通配符：</span><br><span class="line">?也表示不确定的类型</span><br><span class="line">他可以进行类型的限定</span><br><span class="line">？<span class="keyword">extends</span> <span class="title class_">E</span>:表示可以传递E或者E所有的子类类型</span><br><span class="line">?<span class="built_in">super</span> E:表示可以传递E或者E所有的父类类型</span><br><span class="line">应用场景：</span><br><span class="line"><span class="number">1.</span>如果我们在定义类、方法、接口的时候，如果类型不确定，就可以定义泛型类、泛型方法、泛型接口。</span><br><span class="line"><span class="number">2.</span>如果类型不确定，但是能知道以后只能传递某个继承体系中的，就可以泛型的通配符</span><br><span class="line">泛型的通配符：</span><br><span class="line">关键点：可以限定类型的范围。</span><br></pre></td></tr></table></figure><h2 id="泛型练习"><a href="#泛型练习" class="headerlink" title="泛型练习"></a>泛型练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_23.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo3</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    需求：</span></span><br><span class="line"><span class="comment">定义一个继承结构：</span></span><br><span class="line"><span class="comment">                                                动物</span></span><br><span class="line"><span class="comment">                                                |</span></span><br><span class="line"><span class="comment">                                  狗                                猫</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                           |             |                     |         |</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                        泰迪             哈士奇               波斯猫        狸花猫</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">属性：名字，年龄</span></span><br><span class="line"><span class="comment">行为：吃东西</span></span><br><span class="line"><span class="comment">波斯猫方法体打印：一只叫做XXX的，X岁的波斯猫，正在吃小饼干</span></span><br><span class="line"><span class="comment">狸花猫方法体打印：一只叫做XX的，X岁的狸花猫，正在吃鱼</span></span><br><span class="line"><span class="comment">泰迪方法体打印：一只叫做XX的，X岁的泰迪，正在吃骨头，边吃边蹭</span></span><br><span class="line"><span class="comment">哈士奇方法体打印：一只叫做XXX的，，X岁的哈士奇，正在吃骨头，边吃边拆家</span></span><br><span class="line"><span class="comment">测试类中定义一个方法用于饲养动物</span></span><br><span class="line"><span class="comment">public static void keepPet(ArrayList&lt;???&gt;list)&#123;&#125;</span></span><br><span class="line"><span class="comment">//遍历集合，调用动物的eat方法</span></span><br><span class="line"><span class="comment">要求1：该方法能养所有品种的猫，但是不能养狗</span></span><br><span class="line"><span class="comment">要求2：该方法能养所有品种的狗，但是不能养猫</span></span><br><span class="line"><span class="comment">要求3：该方法能养所有的动物，但是不能传递其他类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;PerSionCat&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;LiHuaCat&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;HusKeyDog&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ArrayList&lt;TeddyDog&gt; list4 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        keepPet(list1);</span><br><span class="line">        keepPet(list2);</span><br><span class="line">        keepPet(list3);</span><br><span class="line">        keepPet(list4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 要求1：该方法能养所有品种的猫，但是不能养狗</span></span><br><span class="line">    <span class="comment">// public static  void keepPet(ArrayList&lt;? extends cat&gt; list)&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 要求2：该方法能养所有品种的狗，但是不能养猫</span></span><br><span class="line">    <span class="comment">// public static  void keepPet(ArrayList&lt;? extends Dog&gt; list)&#123;&#125;</span></span><br><span class="line">    <span class="comment">// 要求3：该方法能养所有的动物，但是不能传递其他类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(ArrayList&lt;? extends Animal&gt; list)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda-day23</title>
      <link href="/2023/02/15/Java%E6%B3%9B%E5%9E%8B/"/>
      <url>/2023/02/15/Java%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h1><h2 id="泛型深入"><a href="#泛型深入" class="headerlink" title="泛型深入"></a>泛型深入</h2><ul><li>泛型：是DK5中引入的特性，可以在编译阶段约束操作的数据类型，并进行检查。</li><li>泛型的格式：&lt;数据类型&gt;</li><li>注意：泛型只能支持引用数据类型。</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//没有泛型的时候，集合如何存储数据</span></span><br><span class="line"><span class="comment">//结论：</span></span><br><span class="line"><span class="comment">//如果我们没有给集合指定类型，默认认为所有的数据类型都是object类型</span></span><br><span class="line"><span class="comment">//此时可以往集合添加任意的数据类型。</span></span><br><span class="line"><span class="comment">//带来一个坏处：我们在获取数据的时候，无法使用他的特有行为。</span></span><br><span class="line"><span class="comment">//此时推出了泛型，可以在添加数据的时候就把类型进行统一。</span></span><br><span class="line"><span class="comment">//而且我们在获取数据的时候，也省的强转了，非常的方便。</span></span><br></pre></td></tr></table></figure><h2 id="泛型的好处"><a href="#泛型的好处" class="headerlink" title="泛型的好处"></a>泛型的好处</h2><ul><li>统一数据类型。</li><li>把运行时期的问题提前到了编译期间，避免了强制类型转换可能出现的异常，因为在编译阶段类型就能确定下来。</li><li>扩展知识点：Java中的泛型是伪泛型</li></ul><h2 id="泛型的细节"><a href="#泛型的细节" class="headerlink" title="泛型的细节"></a>泛型的细节</h2><ul><li>泛型中不能写基本数据类型</li><li>指定泛型的具体类型后，传递数据时，可以传入该类类型或者其子类类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Animal&gt;list <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Animal</span>());</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">cat</span>());</span><br><span class="line">list.add(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br></pre></td></tr></table></figure><ul><li>如果不写泛型，类型默认是Object</li></ul><h2 id="泛型可以在很多地方进行定义"><a href="#泛型可以在很多地方进行定义" class="headerlink" title="泛型可以在很多地方进行定义"></a>泛型可以在很多地方进行定义</h2><ul><li>类后面 — 泛型类</li><li>方法上面 —- 泛型方法</li><li>接口后面 - — 泛型接口</li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><blockquote><p>使用场景：当一个类中，某个变量的数据类型不确定时，就可以定义带有泛型的类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符c1ass类名&lt;类型&gt;&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span> &lt;E&gt;&#123;&#125;</span><br><span class="line"> <span class="comment">// 创建该类对象时，E就确定类型</span></span><br><span class="line"><span class="comment">// 此处E可以理解为变量，但是不是用来记录数据的，而是记录数据的类型，可以写成：T、E、K、V等  </span></span><br></pre></td></tr></table></figure><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><h3 id="方法中形参类型不确定时"><a href="#方法中形参类型不确定时" class="headerlink" title="方法中形参类型不确定时"></a>方法中形参类型不确定时</h3><ul><li>方案①：使用类名后面定义的泛型<br>所有方法部能用</li><li>方案②：在方法申明上定义自己的泛型<br>只有本方法能用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 修饰符&lt;类型&gt;返回值类型方法名（类型变量名）&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>&lt;T&gt;<span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Tt)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处T可以理解为变量，但是不是用来记录数据的，而是记录类型的，可以写成：T、E、K、V等</span></span><br></pre></td></tr></table></figure><h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符interface接口名&lt;类型&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt;&#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重点–如何使用一个带泛型的接口"><a href="#重点–如何使用一个带泛型的接口" class="headerlink" title="重点–如何使用一个带泛型的接口"></a>重点–如何使用一个带泛型的接口</h3><ul><li><p>方式1：实现类给出具体类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList2</span> <span class="keyword">implements</span> <span class="title class_">List</span>&lt;String&gt;</span><br></pre></td></tr></table></figure></li><li><p>方式2：实现类延续泛型，创建对象时再确定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class MyArrayList3&lt;E&gt; implements List&lt;E&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_23;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        MyArraylist&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">MyArraylist</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        System.out.println(list.get(<span class="number">2</span>));</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        MyArraylist&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">MyArraylist</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        System.out.println(list2.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(list2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_23;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ListUtils.add(list,<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>,<span class="string">&quot;ccc&quot;</span>,<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ListUtils.add(list2,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">        System.out.println(list2);</span><br><span class="line">        ArrayList&lt;Integer&gt; list3 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        ListUtils.addAl12(list3,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">22</span>,<span class="number">2</span>,<span class="number">22</span>);</span><br><span class="line">        System.out.println(list3);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_23;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">ListUtils</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    类中定义一个静态方法addAll,用来添加多个集合的元素。</span></span><br><span class="line"><span class="comment">    参数一：集合</span></span><br><span class="line"><span class="comment">    参数二~最后：要添加的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;E&gt; <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(ArrayList&lt;E&gt; list,E e1,E e2,E e3,E e4)</span>&#123;</span><br><span class="line">        list.add(e1);</span><br><span class="line">        list.add(e2);</span><br><span class="line">        list.add(e3);</span><br><span class="line">        list.add(e4);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...e可无限延伸，底层是个数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>&lt;E&gt;<span class="keyword">void</span> <span class="title function_">addAl12</span><span class="params">(ArrayList&lt;E&gt;list,E...e)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (E element :e) &#123;</span><br><span class="line">            list.add(element);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_23;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArraylist</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    当我在编写一个类的时候，如果不确定类型，那么这个类就可以定义为泛型类。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object[] obj = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    E:表示是不确定的类型。该类型在类名后面已经定义过了。</span></span><br><span class="line"><span class="comment">    e:形参的名字，变量名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>&#123;</span><br><span class="line">        obj[size] = e;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E) obj[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Arrays.toString(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_23;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList2</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> fromIndex, <span class="type">int</span> toIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2023/02/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20-1/"/>
      <url>/2023/02/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%20-1/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构-1"><a href="#数据结构-1" class="headerlink" title="数据结构 -1"></a>数据结构 -1</h1><h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><blockquote><p>二叉查找树，又称二叉排序树或者二叉搜索树</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>每一个节点上最多有两个子节点</li><li>任意节点左子树上的值都小于当前节点</li><li>任意节点右子树上的值都大于当前节点</li></ul><h3 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h3><blockquote><p>规则：</p><p>小的存左边</p><p>大的存右边</p><p>一样的不存</p></blockquote><h3 id="弊端"><a href="#弊端" class="headerlink" title="弊端"></a>弊端</h3><p>当数据有规律递增或者递减时，左右子树高度差太大</p><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><blockquote><p>从根结点开始，然后按照当前结点，左子结点，右子结点的顺序遍历</p></blockquote><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><blockquote><p>从最左边的子节点开始，然后按照左子结点，当前结点，右子结点的顺序遍历</p></blockquote><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><blockquote><p>从最左边的子节点开始，然后按照左子结点，右子结点，当前结点的顺序遍历</p></blockquote><h3 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h3><blockquote><p>从根节点开始一层一层的遍历</p></blockquote><h2 id="节点的内部结构"><a href="#节点的内部结构" class="headerlink" title="节点的内部结构"></a>节点的内部结构</h2><ul><li>父节点地址</li><li>值</li><li>左子节点地址</li><li>右子节点地址</li></ul><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><blockquote><p>规则：任意左右子树高度差不超过1</p></blockquote><h3 id="旋转机制"><a href="#旋转机制" class="headerlink" title="旋转机制"></a>旋转机制</h3><ul><li>规则1：左旋</li><li>规则2：右旋</li><li>触发时机：当添加一个节点之后，该树不再是一颗平衡二叉树</li></ul><h4 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h4><ul><li>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</li><li>步骤<ul><li>以不平衡的点作为支点</li><li>将根节点的右侧往左拉</li><li>原先的右子节点变成新的父节点，并把多<br>余的左子节点出让，给已经降级的根节点<br>当右子节点</li></ul></li></ul><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><ul><li>确定支点：从添加的节点开始，不断的往父节点找不平衡的节点</li><li>步骤<ul><li>以不平衡的点作为支点</li><li>就是将根节点的左侧往右拉</li><li>原先的左子节点变成新的父节点，并把多<br>余的右子节点出让，给已经降级的根节点<br>当左子节点</li></ul></li></ul><h3 id="旋转的四种情况"><a href="#旋转的四种情况" class="headerlink" title="旋转的四种情况"></a>旋转的四种情况</h3><ul><li>左左<ul><li>一次右旋</li><li>左左：当根节点左子树的左子树有节点插入，导致二叉树不平衡</li></ul></li><li>左右<ul><li>先后部左旋，再整本右旋</li><li>左右：当根节点左子树的右子树有节点插入，导致二叉树不平衡</li></ul></li><li>右右<ul><li>一次左旋</li><li>右右：当根节点右子树的右子树有节点插入，导致二叉树不平衡</li></ul></li><li>右左<ul><li>先后部右旋，再整体左旋</li><li>右左：当根节点右子树的左子树有节点插入，导致二叉树不平衡</li></ul></li></ul><p><img src="https://pic.imgdb.cn/item/63ecfa53f144a01007ac1df2.jpg"></p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><blockquote><p>红黑树是一种自平衡的二叉查找树，是计算机科学中用到的一种数据结构。<br>1972年出现，当时被称之为平衡二叉B树。后来，1978年被修改为如今的”红黑树”。<br>它是一种特殊的二叉查找树，红黑树的每一个节点上都有存储位表示节点的颜色，<br>每一个节点可以是红或者黑；红黑树不是高度平衡的，它的平衡是通过”红黑规则”进行实现的</p></blockquote><ul><li>是一个二叉查找树</li><li>但是不是高度平衡的</li><li>条件： 特有的红黑规则</li></ul><h3 id="红黑规则"><a href="#红黑规则" class="headerlink" title="红黑规则"></a>红黑规则</h3><ol><li>每一个节点或是红色的，或是黑色的</li><li>根节点必须是黑色</li><li>如果一个节点没有子节点或者父节点，则该节点相应的指针属性值为Nil，这些Nil视为叶节点，每个叶节点（Nil）是黑色的</li><li>如果某一个节点是红色，那么它的子节点必须是黑色（不能出现两个红色节点相连的情况）</li><li>对每一个节点，从该节点到其所有后代叶节点的简单路径上，均包含相同数目的黑色节点；</li></ol><p><img src="https://pic.imgdb.cn/item/63f09e30f144a01007c8047f.jpg"></p><p><img src="https://pic.imgdb.cn/item/63f09e59f144a01007c84262.jpg"></p><h3 id="添加节点-1"><a href="#添加节点-1" class="headerlink" title="添加节点"></a>添加节点</h3><ul><li>默认颜色：添加节点默认是 <font color = red>红色</font> 的（效率高）</li></ul><p><img src="https://pic.imgdb.cn/item/63f0a0acf144a01007cc1255.jpg"></p><h3 id="红黑树小结"><a href="#红黑树小结" class="headerlink" title="红黑树小结"></a>红黑树小结</h3><p><Mark>红黑树增删改查的性能都很好</Mark></p>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LinkList 集合源码分析-day22</title>
      <link href="/2023/02/08/LinkList%20%E9%9B%86%E5%90%88/"/>
      <url>/2023/02/08/LinkList%20%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="LinkList-集合"><a href="#LinkList-集合" class="headerlink" title="LinkList 集合"></a>LinkList 集合</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>底层数据结构是双链表，查询慢，首尾操作的速度是极快的，所以多了很多首尾操作的特有API。</p><p><img src="https://pic.imgdb.cn/item/63e35e5b4757feff33236506.jpg"></p><h2 id="迭代器源码分析"><a href="#迭代器源码分析" class="headerlink" title="迭代器源码分析"></a>迭代器源码分析</h2><p><img src="https://pic.imgdb.cn/item/63e360114757feff33268f39.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Collection</title>
      <link href="/2023/01/29/Collection/"/>
      <url>/2023/01/29/Collection/</url>
      
        <content type="html"><![CDATA[<h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><h2 id="Collection-1"><a href="#Collection-1" class="headerlink" title="Collection"></a>Collection</h2><blockquote><p>Collection是单列集合的祖宗接口，它的功能是全部单列集合都可以继承使用的。</p></blockquote><h2 id="collection-是单列集合"><a href="#collection-是单列集合" class="headerlink" title="collection 是单列集合"></a>collection 是单列集合</h2><h2 id="集合体系结构"><a href="#集合体系结构" class="headerlink" title="集合体系结构"></a>集合体系结构</h2><p><img src="https://pic.imgdb.cn/item/63d5e99aface21e9efe0a37a.png" alt="集合体系结构"></p><h1 id="List-系列集合"><a href="#List-系列集合" class="headerlink" title="List 系列集合"></a>List 系列集合</h1><blockquote><p>添加的元素是有序、可重复、有索引</p></blockquote><ul><li>有序：存和取的顺序是一样的，并非排序的有序</li><li>可重复：表示集合中元素是<strong>可以</strong>重复的</li><li>有索引：可以通过索引获取集合中每个元素</li></ul><hr><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public boolean add(E e) 添加</span></span><br><span class="line"><span class="comment">        public void clear()  清空</span></span><br><span class="line"><span class="comment">        public boolean remove(E e)  删除</span></span><br><span class="line"><span class="comment">        public boolean contains(Object obj)判断是否包含</span></span><br><span class="line"><span class="comment">        public boolean isEmpty() 判断是否为空</span></span><br><span class="line"><span class="comment">        public int size() 集合长度</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        注意点：</span></span><br><span class="line"><span class="comment">        collection是一个接口，我们不能直接创建他的对象。</span></span><br><span class="line"><span class="comment">        所以，现在我们学习他的方法时，只能创建他实现类的对象。</span></span><br><span class="line"><span class="comment">        实现类：ArrayList</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //目的：为了学习collection接口里面的方法</span></span><br><span class="line"><span class="comment">        //自己在做一些练习的时候，还是按照之前的方式去创建对象。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//1.添加元素</span></span><br><span class="line"><span class="comment">//细节1：如果我们要往List系列集合中添加数据，那么方法永远返回true,因为List系列的是允许元素重复的。</span></span><br><span class="line"><span class="comment">//细节2：如果我们要往Set系列集合中添加数据，如果当前要添加元素不存在，方法返回true,表示添加成功。</span></span><br><span class="line"><span class="comment">//        如果当前要添加的元素已经存在，方法返回fa1se,表示添加失败。</span></span><br><span class="line"><span class="comment">//          因为Set系列的集合不允许重复。</span></span><br><span class="line">        coll.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.清空</span></span><br><span class="line">        <span class="comment">//col1.clear();</span></span><br><span class="line"><span class="comment">//3.删除</span></span><br><span class="line"><span class="comment">//注意：因为Collection里面定义的是共性的方法，所以此时不能通过索引进行删除。只能通过元素的对象进行删除。</span></span><br><span class="line">        System.out.println(coll.remove(<span class="string">&quot;aaa&quot;</span>));</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        <span class="comment">//4.判断元素是否包含</span></span><br><span class="line">        <span class="comment">//细节：底层是依赖equals方法进行判断是否存在的。</span></span><br><span class="line">        <span class="comment">//所以，如果集合中存储的是自定义对象，也想通过contains方法来判断是否包含，那么在javabean类中，一定要重写equals方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为contains方法在底层依赖equals方法判断对象是否一致的。</span></span><br><span class="line"><span class="comment">// 如果存的是自定义对象，没有重写equals方法，那么默认使用object:类中的equals方法进行判断，而Object类中equals方法，依赖地址值进行判断。</span></span><br><span class="line"><span class="comment">// 需求：如果同姓名和同年龄，就认为是同一个学生。</span></span><br><span class="line"><span class="comment">// 所以，需要在自定义的Javabean类中，重写equals方法就可以了。</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> coll.contains(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.判断集合是否为空</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> coll.isEmpty();</span><br><span class="line">        System.out.println(result2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.获取集合的长度</span></span><br><span class="line">        coll.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span>  coll.size();</span><br><span class="line">        System.out.println(size);<span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Collection-的遍历方式"><a href="#Collection-的遍历方式" class="headerlink" title="Collection 的遍历方式"></a>Collection 的遍历方式</h2><h3 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h3><blockquote><p>迭代器不依赖索引 ,迭代器在Java中的类是Iterator,迭代器是集合专用的遍历方式。</p></blockquote><ul><li><p>Collection集合获取迭代器</p><p>  <code>Iterator&lt;E&gt; iterator()返回迭代器对象，默认指向当前集合的0索引</code></p><ul><li>Iterator中的常用方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> 判断当前位置是否有元素，有元素返回<span class="literal">true</span>,没有元素返回<span class="literal">false</span></span><br><span class="line">E <span class="title function_">next</span><span class="params">()</span> 获取当前位置的元素，并将迭代器对象移向下一个位置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">细节注意点：</span><br><span class="line"><span class="number">1</span>,报错NoSuchElementException</span><br><span class="line"><span class="number">2</span>,迭代器遍历完毕，指针不会复位</span><br><span class="line"><span class="number">3</span>,循环中只能用一次next方法</span><br><span class="line"><span class="number">4</span>,迭代器遍历时，不能用集合的方法进行增加或者删除</span><br></pre></td></tr></table></figure></li><li>代码演示</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取迭代器对象</span></span><br><span class="line">        <span class="comment">//迭代器就好比是一个箭头，默认指向集合的索引处</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = coll.iterator();</span><br><span class="line">        <span class="comment">//3.利用循环不断的去获取集合中的每一个元素</span></span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="comment">//4.next方法的两件事情：获取元素并移动指针</span></span><br><span class="line">            System.out.println(next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当上面循环结束之后，迭代器的指针已经指向了最后没有元素的位置</span></span><br><span class="line"><span class="comment">//System.out.println(it.next());//NoSuchElementException</span></span><br><span class="line"><span class="comment">//迭代器遍历完毕，指针不会复位</span></span><br><span class="line">        System.out.println(iterator.hasNext());</span><br><span class="line"><span class="comment">//如果我们要继续第二次遍历集合，只能再次获取一个新的迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt;it2 =  coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it2.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        coll.add(&quot;aaa&quot;);</span></span><br><span class="line">        <span class="comment">//        coll.add(&quot;bbb&quot;);</span></span><br><span class="line">        <span class="comment">//        coll.add(&quot;ccc&quot;);</span></span><br><span class="line">        <span class="comment">//        coll.add(&quot;ddd&quot;);</span></span><br><span class="line">        <span class="comment">//        coll.add(&quot;eee&quot;);</span></span><br><span class="line">        <span class="comment">//3.利用循环不断的去获取集合中的每一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line"><span class="comment">//4.next方法的两件事情：获取元素，并移动指针</span></span><br><span class="line">            System.out.println(it2.next());<span class="comment">//aaa ccc  eee</span></span><br><span class="line">            System.out.println(it2.next());<span class="comment">//bbb ddd NoSuchElementException</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> it2.next();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">            <span class="comment">//coll.remove(&quot;bbb&quot;);  不可以删除，报并发错误</span></span><br><span class="line">            it2.remove(); <span class="comment">// 可以删除</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h3><ul><li>普通for只能用在List系列，而在Set系列是用不了的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">增强for格式：</span></span><br><span class="line"><span class="comment">for(数据类型变量名：集合/数组)&#123;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line"><span class="comment">//2.利用增强for进行遍历</span></span><br><span class="line"><span class="comment">//注意点：</span></span><br><span class="line"><span class="comment">//s其实就是一个第三方变量，在循环的过程中依次表示集合中的每一个数据</span></span><br><span class="line">        <span class="comment">// 增强for的细节</span></span><br><span class="line">        <span class="comment">//修改增强for中的变量，不会改变集合中原本的数据。</span></span><br><span class="line">        <span class="keyword">for</span>(String s : coll)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="lambda表达式遍历"><a href="#lambda表达式遍历" class="headerlink" title="lambda表达式遍历"></a>lambda表达式遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//集合并添加元素</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        coll.add(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        <span class="comment">//2.利用匿名内部类的形式</span></span><br><span class="line"><span class="comment">//底层原理：</span></span><br><span class="line"><span class="comment">//其实也会自己遍历集合，依次得到每一个元素</span></span><br><span class="line"><span class="comment">//把得到的每一个元素，传递给下面的accept方法</span></span><br><span class="line"><span class="comment">//s依次表示集合中的每一个数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">coll.forEach(new Consumer&lt;String&gt;()&#123;</span></span><br><span class="line"><span class="comment">@override</span></span><br><span class="line"><span class="comment">public void accept(String s)&#123;</span></span><br><span class="line"><span class="comment">System.out.println(s);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//lambda表达式</span></span><br><span class="line">        coll.forEach(s -&gt; System.out.println(s));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="List-中常见方法"><a href="#List-中常见方法" class="headerlink" title="List 中常见方法"></a>List 中常见方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        List系列集合独有的方法：</span></span><br><span class="line"><span class="comment">          void add(int index,E element)     在此集合中的指定位置插入指定的元素</span></span><br><span class="line"><span class="comment">          E remove(int index)                删除指定索引处的元素，返回被删除的元素</span></span><br><span class="line"><span class="comment">          E set(int index,E element)          修改指定索引处的元素，返回被修改的元素</span></span><br><span class="line"><span class="comment">          E get(int index)                      返回指定索引处的元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个集合</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">        <span class="comment">//在此集合中的指定位置插入指定的元素</span></span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list.remove(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Lst系列集合中的两个别除的方法</span></span><br><span class="line">        <span class="comment">//1.直接删除元素</span></span><br><span class="line">        <span class="comment">//2.通过索引进行删除</span></span><br><span class="line">        <span class="comment">//1.创建集合并添加元素</span></span><br><span class="line">        List&lt;Integer&gt; list1 =  <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list1.add(<span class="number">1</span>);</span><br><span class="line">        list1.add(<span class="number">2</span>);</span><br><span class="line">        list1.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.删除元素</span></span><br><span class="line">        <span class="comment">//请问：此时删除的是1这个元素，还是1索引上的元素？</span></span><br><span class="line">        <span class="comment">//为什么？</span></span><br><span class="line">        <span class="comment">//因为在调用方法的时候，如果方法出现了重载现象</span></span><br><span class="line">        <span class="comment">//优先调用，实参跟形参类型一致的那个方法。</span></span><br><span class="line">        <span class="comment">//list1.remove(1);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动装箱，手动把基本数据类型的1，变成Integer类型</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">        list1.remove(i);</span><br><span class="line">        System.out.println(list1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="List集合的遍历方式"><a href="#List集合的遍历方式" class="headerlink" title="List集合的遍历方式"></a>List集合的遍历方式</h2><ul><li>迭代器遍历  —–在遍历的过程中需要删除元素，请使用迭代器。</li><li>列表迭代器遍历 —— 在遍历的过程中需要添加元素，请使用列表迭代器。</li><li>增强for遍历    ——– 仅仅想遍历，那么使用增强for或Lambda表达式。</li><li>Lambda表达式遍历 ——– 仅仅想遍历，那么使用增强for或Lambda表达式。</li><li>普通for循环（因为List集合存在索引) ——- 如果遍历的时候想操作索引，可以用普通for。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day_22;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.ListIterator;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        List系列集合的五种遍历方式：</span></span><br><span class="line"><span class="comment">        1.迭代器</span></span><br><span class="line"><span class="comment">        2.列表迭代器</span></span><br><span class="line"><span class="comment">        3.增强for</span></span><br><span class="line"><span class="comment">        4.Lambda表达式</span></span><br><span class="line"><span class="comment">        5.普通for循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">            <span class="comment">//System.out.println(s);</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 增强for</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            <span class="comment">//System.out.println(s);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//lambda表达式</span></span><br><span class="line">        <span class="comment">//list.forEach(s -&gt; System.out.println(s));</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 普通for形式</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            <span class="comment">//System.out.println(s);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 列表迭代器</span></span><br><span class="line">        ListIterator&lt;String&gt; it = list.listIterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">next</span> <span class="operator">=</span> it.next();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;bbb&quot;</span>.equals(next))&#123;</span><br><span class="line">                it.add(<span class="string">&quot;qqq&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Set-系列集合"><a href="#Set-系列集合" class="headerlink" title="Set 系列集合"></a>Set 系列集合</h1><blockquote><p>添加的元素是无序，不重复，无索引</p></blockquote><ul><li>无序：表示存进去的元素，按相同的顺序取出来可能是不一样的</li><li>不重复：表示集合中元素是<strong>不可以</strong>重复的</li><li>无索引：不可以通过索引获取集合中每个元素</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList-day22</title>
      <link href="/2023/01/29/ArrayList/"/>
      <url>/2023/01/29/ArrayList/</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><ol><li>利用空参创建的集合，在底层创建一个默认长度为0的数组</li><li>添加第一个元素时，底层会创建一个新的长度为10的数组</li><li>存满时，会扩容1.5倍<img src="https://pic.imgdb.cn/item/63d68121face21e9ef33796f.jpg"></li></ol><p><img src="https://pic.imgdb.cn/item/63d683efface21e9ef3b61a9.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-day22</title>
      <link href="/2023/01/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2023/01/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="数据结构概述"><a href="#数据结构概述" class="headerlink" title="数据结构概述"></a>数据结构概述</h2><p>数据结构是计算机底层存储、组织数据的方式。<br>是指数据相互之间是以什么方式排列在一起的。<br>数据结构是为了更加方便的管理和使用数据，需要结合具体的业务场景来进行选择。<br>一般情况下，精心选择的数据结构可以带来更高的运行或者存储效率。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>链表中的结点是独立的对象，在内存中是不连续的，每个结点包含数据值和下一个结点的地址。  </p><p>链表查询慢，无论查询哪个数据都要从头开始找。  </p><p>链表增删相对快</p><h2 id="各种数据结构的特点和作用是什么样的"><a href="#各种数据结构的特点和作用是什么样的" class="headerlink" title="各种数据结构的特点和作用是什么样的"></a>各种数据结构的特点和作用是什么样的</h2><ul><li>栈：后进先出，先进后出。</li><li>队列：先进先出，后进后出。</li><li>数组：内存连续区域，查询快，增删慢。</li><li>链表：无素是游离的，查询慢，首尾操作极快。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2023/01/27/%E7%AE%97%E6%B3%95/"/>
      <url>/2023/01/27/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="常见的七种查找算法："><a href="#常见的七种查找算法：" class="headerlink" title="常见的七种查找算法："></a>常见的七种查找算法：</h1><p>​数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据结构息息相关。今天的讲义中会涉及部分数据结构的专业名词，如果各位铁粉有疑惑，可以先看一下哥们后面录制的数据结构，再回头看算法。</p><h2 id="1-基本查找"><a href="#1-基本查找" class="headerlink" title="1. 基本查找"></a>1. 基本查找</h2><p>​也叫做顺序查找</p><p>​        说明：顺序查找适合于存储结构为数组或者链表。</p><p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线的一端开始，顺序扫描，依次将遍历到的结点与要查找的值相比较，若相等则表示查找成功；若遍历结束仍没有找到相同的，表示查找失败。</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BasicSearchDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//基本查找/顺序查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//从0索引开始挨个往后查找</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用基本查找，查询某个元素是否存在</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;131, 127, 147, 81, 103, 23, 7, 79&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">131</span>, <span class="number">127</span>, <span class="number">147</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">23</span>, <span class="number">7</span>, <span class="number">79</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">82</span>;</span><br><span class="line">        System.out.println(basicSearch(arr, number));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//参数：</span></span><br><span class="line">    <span class="comment">//一：数组</span></span><br><span class="line">    <span class="comment">//二：要查找的元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回值：</span></span><br><span class="line">    <span class="comment">//元素是否存在</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">basicSearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//利用基本查找来查找number在数组中是否存在</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-二分查找"><a href="#2-二分查找" class="headerlink" title="2. 二分查找"></a>2. 二分查找</h2><p>​也叫做折半查找</p><p>说明：元素必须是有序的，从小到大，或者从大到小都是可以的。</p><p>如果是无序的，也可以先进行排序。但是排序之后，会改变原有数据的顺序，查找出来元素位置跟原来的元素可能是不一样的，所以排序之后再查找只能判断当前数据是否在容器当中，返回的索引无实际的意义。</p><p>　　<strong>基本思想</strong>：也称为是折半查找，属于有序查找算法。用给定值先与中间结点比较。比较完之后有三种情况：</p><ul><li><p>相等</p><p>说明找到了</p></li><li><p>要查找的数据比中间节点小</p><p>说明要查找的数字在中间节点左边</p></li><li><p>要查找的数据比中间节点大</p><p>说明要查找的数字在中间节点右边</p></li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_BinarySearchDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//二分查找/折半查找</span></span><br><span class="line">        <span class="comment">//核心：</span></span><br><span class="line">        <span class="comment">//每次排除一半的查找范围</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需求：定义一个方法利用二分查找，查询某个元素在数组中的索引</span></span><br><span class="line">        <span class="comment">//数据如下：&#123;7, 23, 79, 81, 103, 127, 131, 147&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">7</span>, <span class="number">23</span>, <span class="number">79</span>, <span class="number">81</span>, <span class="number">103</span>, <span class="number">127</span>, <span class="number">131</span>, <span class="number">147</span>&#125;;</span><br><span class="line">        System.out.println(binarySearch(arr, <span class="number">150</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span>&#123;</span><br><span class="line">        <span class="comment">//1.定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用循环不断的去找要查找的数据</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(min &gt; max)&#123;</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//3.找到min和max的中间位置</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (min + max) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//4.拿着mid指向的元素跟要查找的元素进行比较</span></span><br><span class="line">            <span class="keyword">if</span>(arr[mid] &gt; number)&#123;</span><br><span class="line">                <span class="comment">//4.1 number在mid的左边</span></span><br><span class="line">                <span class="comment">//min不变，max = mid - 1；</span></span><br><span class="line">                max = mid - <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(arr[mid] &lt; number)&#123;</span><br><span class="line">                <span class="comment">//4.2 number在mid的右边</span></span><br><span class="line">                <span class="comment">//max不变，min = mid + 1;</span></span><br><span class="line">                min = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//4.3 number跟mid指向的元素一样</span></span><br><span class="line">                <span class="comment">//找到了</span></span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-插值查找"><a href="#3-插值查找" class="headerlink" title="3. 插值查找"></a>3. 插值查找</h2><p>在介绍插值查找之前，先考虑一个问题：</p><p>​为什么二分查找算法一定要是折半，而不是折四分之一或者折更多呢？</p><p>其实就是因为方便，简单，但是如果我能在二分查找的基础上，让中间的mid点，尽可能靠近想要查找的元素，那不就能提高查找的效率了吗？</p><p>二分查找中查找点计算如下：</p><p>　　mid&#x3D;(low+high)&#x2F;2, 即mid&#x3D;low+1&#x2F;2*(high-low);</p><p>我们可以将查找的点改进为如下：</p><p>　　mid&#x3D;low+(key-a[low])&#x2F;(a[high]-a[low])*(high-low)，</p><p>这样，让mid值的变化更靠近关键字key，这样也就间接地减少了比较次数。</p><p>　　基本思想：基于二分查找算法，将查找点的选择改进为自适应选择，可以提高查找效率。当然，差值查找也属于有序查找。</p><p><strong>细节：</strong>对于表长较大，而关键字分布又比较均匀的查找表来说，插值查找算法的平均性能比折半查找要好的多。反之，数组中如果分布非常不均匀，那么插值查找未必是很合适的选择。</p><p>代码跟二分查找类似，只要修改一下mid的计算方式即可。</p><h2 id="4-斐波那契查找"><a href="#4-斐波那契查找" class="headerlink" title="4. 斐波那契查找"></a>4. 斐波那契查找</h2><p>在介绍斐波那契查找算法之前，我们先介绍一下很它紧密相连并且大家都熟知的一个概念——黄金分割。</p><p>　　黄金比例又称黄金分割，是指事物各部分间一定的数学比例关系，即将整体一分为二，较大部分与较小部分之比等于整体与较大部分之比，其比值约为1:0.618或1.618:1。</p><p>　　0.618被公认为最具有审美意义的比例数字，这个数值的作用不仅仅体现在诸如绘画、雕塑、音乐、建筑等艺术领域，而且在管理、工程设计等方面也有着不可忽视的作用。因此被称为黄金分割。</p><p>　　在数学中有一个非常有名的数学规律：斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89…….</p><p>（从第三个数开始，后边每一个数都是前两个数的和）。</p><p>然后我们会发现，随着斐波那契数列的递增，前后两个数的比值会越来越接近0.618，利用这个特性，我们就可以将黄金比例运用到查找技术中。</p><p><img src="https://img-blog.csdn.net/20150323100632467?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc2hlbmJvMjAzMA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"> </p><p>基本思想：也是二分查找的一种提升算法，通过运用黄金比例的概念在数列中选择查找点进行查找，提高查找效率。同样地，斐波那契查找也属于一种有序查找算法。</p><p>斐波那契查找也是在二分查找的基础上进行了优化，优化中间点mid的计算方式即可</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeiBoSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">maxSize</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">89</span>, <span class="number">1000</span>, <span class="number">1234</span>&#125;;</span><br><span class="line">        System.out.println(search(arr, <span class="number">1234</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] getFeiBo() &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[maxSize];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; maxSize; i++) &#123;</span><br><span class="line">            arr[i] = arr[i - <span class="number">1</span>] + arr[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//表示斐波那契数分割数的下标值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//调用斐波那契数列</span></span><br><span class="line">        <span class="type">int</span>[] f = getFeiBo();</span><br><span class="line">        <span class="comment">//获取斐波那契分割数值的下标</span></span><br><span class="line">        <span class="keyword">while</span> (high &gt; (f[index] - <span class="number">1</span>)) &#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//因为f[k]值可能大于a的长度，因此需要使用Arrays工具类，构造一个新法数组，并指向temp[],不足的部分会使用0补齐</span></span><br><span class="line">        <span class="type">int</span>[] temp = Arrays.copyOf(arr, f[index]);</span><br><span class="line">        <span class="comment">//实际需要使用arr数组的最后一个数来填充不足的部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> high + <span class="number">1</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">            temp[i] = arr[high];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用while循环处理，找到key值</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">            mid = low + f[index - <span class="number">1</span>] - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; temp[mid]) &#123;<span class="comment">//向数组的前面部分进行查找</span></span><br><span class="line">                high = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                  对k--进行理解</span></span><br><span class="line"><span class="comment">                  1.全部元素=前面的元素+后面的元素</span></span><br><span class="line"><span class="comment">                  2.f[k]=k[k-1]+f[k-2]</span></span><br><span class="line"><span class="comment">                  因为前面有k-1个元素没所以可以继续分为f[k-1]=f[k-2]+f[k-3]</span></span><br><span class="line"><span class="comment">                  即在f[k-1]的前面继续查找k--</span></span><br><span class="line"><span class="comment">                  即下次循环,mid=f[k-1-1]-1</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                index--;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; temp[mid]) &#123;<span class="comment">//向数组的后面的部分进行查找</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">                index -= <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">//找到了</span></span><br><span class="line">                <span class="comment">//需要确定返回的是哪个下标</span></span><br><span class="line">                <span class="keyword">if</span> (mid &lt;= high) &#123;</span><br><span class="line">                    <span class="keyword">return</span> mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-分块查找"><a href="#5-分块查找" class="headerlink" title="5. 分块查找"></a>5. 分块查找</h2><p>当数据表中的数据元素很多时，可以采用分块查找。</p><p>汲取了顺序查找和折半查找各自的优点，既有动态结构，又适于快速查找</p><p>分块查找适用于数据较多，但是数据不会发生变化的情况，如果需要一边添加一边查找，建议使用哈希查找</p><p>分块查找的过程：</p><ol><li>需要把数据分成N多小块，块与块之间不能有数据重复的交集。</li><li>给每一块创建对象单独存储到数组当中</li><li>查找数据的时候，先在数组查，当前数据属于哪一块</li><li>再到这一块中顺序查找</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.search;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_BlockSearchDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            分块查找</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">                块内无序，块间有序</span></span><br><span class="line"><span class="comment">            实现步骤：</span></span><br><span class="line"><span class="comment">                1.创建数组blockArr存放每一个块对象的信息</span></span><br><span class="line"><span class="comment">                2.先查找blockArr确定要查找的数据属于哪一块</span></span><br><span class="line"><span class="comment">                3.再单独遍历这一块数据即可</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">16</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">12</span>,<span class="number">21</span>, <span class="number">18</span>,</span><br><span class="line">                     <span class="number">32</span>, <span class="number">23</span>, <span class="number">37</span>, <span class="number">26</span>, <span class="number">45</span>, <span class="number">34</span>,</span><br><span class="line">                     <span class="number">50</span>, <span class="number">48</span>, <span class="number">61</span>, <span class="number">52</span>, <span class="number">73</span>, <span class="number">66</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建三个块的对象</span></span><br><span class="line">        <span class="type">Block</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">21</span>,<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">45</span>,<span class="number">6</span>,<span class="number">11</span>);</span><br><span class="line">        <span class="type">Block</span> <span class="variable">b3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Block</span>(<span class="number">73</span>,<span class="number">12</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义数组用来管理三个块的对象（索引表）</span></span><br><span class="line">        Block[] blockArr = &#123;b1,b2,b3&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量用来记录要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用方法，传递索引表，数组，要查找的元素</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(blockArr,arr,number);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印一下</span></span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//利用分块查找的原理，查询number的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(Block[] blockArr, <span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//1.确定number是在那一块当中</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexBlock</span> <span class="operator">=</span> findIndexBlock(blockArr, number);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(indexBlock == -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//表示number不在数组当中</span></span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取这一块的起始索引和结束索引   --- 30</span></span><br><span class="line">        <span class="comment">// Block b1 = new Block(21,0,5);   ----  0</span></span><br><span class="line">        <span class="comment">// Block b2 = new Block(45,6,11);  ----  1</span></span><br><span class="line">        <span class="comment">// Block b3 = new Block(73,12,17); ----  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> blockArr[indexBlock].getStartIndex();</span><br><span class="line">        <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> blockArr[indexBlock].getEndIndex();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt;= endIndex; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == number)&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法，用来确定number在哪一块当中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findIndexBlock</span><span class="params">(Block[] blockArr,<span class="type">int</span> number)</span>&#123; <span class="comment">//100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//从0索引开始遍历blockArr，如果number小于max，那么就表示number是在这一块当中的</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; blockArr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(number &lt;= blockArr[i].getMax())&#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> max;<span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;<span class="comment">//起始索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> endIndex;<span class="comment">//结束索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Block</span><span class="params">(<span class="type">int</span> max, <span class="type">int</span> startIndex, <span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMax</span><span class="params">(<span class="type">int</span> max)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.max = max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getEndIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endIndex</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndIndex</span><span class="params">(<span class="type">int</span> endIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.endIndex = endIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Block&#123;max = &quot;</span> + max + <span class="string">&quot;, startIndex = &quot;</span> + startIndex + <span class="string">&quot;, endIndex = &quot;</span> + endIndex + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-哈希查找"><a href="#6-哈希查找" class="headerlink" title="6. 哈希查找"></a>6. 哈希查找</h2><p>哈希查找是分块查找的进阶版，适用于数据一边添加一边查找的情况。</p><p>一般是数组 + 链表的结合体或者是数组+链表 + 红黑树的结合体</p><p>在课程中，为了让大家方便理解，所以规定：</p><ul><li>数组的0索引处存储1~100</li><li>数组的1索引处存储101~200</li><li>数组的2索引处存储201~300</li><li>以此类推</li></ul><p>但是实际上，我们一般不会采取这种方式，因为这种方式容易导致一块区域添加的元素过多，导致效率偏低。</p><p>更多的是先计算出当前数据的哈希值，用哈希值跟数组的长度进行计算，计算出应存入的位置，再挂在数组的后面形成链表，如果挂的元素太多而且数组长度过长，我们也会把链表转化为红黑树，进一步提高效率。</p><p>具体的过程，大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了哈希表的数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p> <img src="F:/JavaSE%E6%9C%80%E6%96%B0%E7%89%88/day21-API%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%8Clambda%EF%BC%8C%E7%BB%83%E4%B9%A0%EF%BC%89/%E7%AC%94%E8%AE%B0/img/Snipaste_2022-09-05_21-36-50.png" alt="Snipaste_2022-09-05_21-36-50"></p><h2 id="7-树表查找"><a href="#7-树表查找" class="headerlink" title="7. 树表查找"></a>7. 树表查找</h2><p>本知识点涉及到数据结构：树。</p><p>建议先看一下后面阿玮讲解的数据结构，再回头理解。</p><p>基本思想：二叉查找树是先对待查找的数据进行生成树，确保树的左分支的值小于右分支的值，然后在就行和每个节点的父节点比较大小，查找最适合的范围。 这个算法的查找效率很高，但是如果使用这种查找方法要首先创建树。 </p><p>　　二叉查找树（BinarySearch Tree，也叫二叉搜索树，或称二叉排序树Binary Sort Tree），具有下列性质的二叉树：</p><p>　　1）若任意节点左子树上所有的数据，均小于本身；</p><p>　　2）若任意节点右子树上所有的数据，均大于本身；</p><p>　　二叉查找树性质：对二叉查找树进行中序遍历，即可得到有序的数列。</p><p>​        不同形态的二叉查找树如下图所示：</p><p> <img src="/img%5C20180226113852869.png" alt="20180226113852869"> </p><p>　　基于二叉查找树进行优化，进而可以得到其他的树表查找算法，如平衡树、红黑树等高效算法。</p><p>具体细节大家可以参见B站阿玮讲解课程：从入门到起飞。在集合章节详细讲解了树数据结构。全程采取动画形式讲解，让大家一目了然。</p><p>在此不多做阐述。</p><p>​不管是二叉查找树，还是平衡二叉树，还是红黑树，查找的性能都比较高</p><h1 id="十大排序算法："><a href="#十大排序算法：" class="headerlink" title="十大排序算法："></a>十大排序算法：</h1><h2 id="1-冒泡排序"><a href="#1-冒泡排序" class="headerlink" title="1. 冒泡排序"></a>1. 冒泡排序</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。</p><p>它重复的遍历过要排序的数列，一次比较相邻的两个元素，如果他们的顺序错误就把他们交换过来。</p><p>这个算法的名字由来是因为越大的元素会经由交换慢慢”浮”到最后面。</p><p>当然，大家可以按照从大到小的方式进行排列。</p><h3 id="1-1-算法步骤"><a href="#1-1-算法步骤" class="headerlink" title="1.1 算法步骤"></a>1.1 算法步骤</h3><ol><li>相邻的元素两两比较，大的放右边，小的放左边</li><li>第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推</li><li>如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以</li></ol><h3 id="1-2-动图演示"><a href="#1-2-动图演示" class="headerlink" title="1.2 动图演示"></a>1.2 动图演示</h3><p><img src="F:\JavaSE最新版\day21-API（算法，lambda，练习）\笔记\img\冒泡.gif" alt="冒泡"></p><h3 id="1-3-代码示例"><a href="#1-3-代码示例" class="headerlink" title="1.3 代码示例"></a>1.3 代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A01_BubbleDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            冒泡排序：</span></span><br><span class="line"><span class="comment">            核心思想：</span></span><br><span class="line"><span class="comment">            1，相邻的元素两两比较，大的放右边，小的放左边。</span></span><br><span class="line"><span class="comment">            2，第一轮比较完毕之后，最大值就已经确定，第二轮可以少循环一次，后面以此类推。</span></span><br><span class="line"><span class="comment">            3，如果数组中有n个数据，总共我们只要执行n-1轮的代码就可以。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用冒泡排序将数组中的数据变成 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//外循环：表示我要执行多少轮。 如果有n个数据，那么执行n - 1 轮</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮中我如何比较数据并找到当前的最大值</span></span><br><span class="line">            <span class="comment">//-1：为了防止索引越界</span></span><br><span class="line">            <span class="comment">//-i：提高效率，每一轮执行的次数应该比上一轮少一次。</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="comment">//i 依次表示数组中的每一个索引：0 1 2 3 4</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-选择排序"><a href="#2-选择排序" class="headerlink" title="2. 选择排序"></a>2. 选择排序</h2><h3 id="2-1-算法步骤"><a href="#2-1-算法步骤" class="headerlink" title="2.1 算法步骤"></a>2.1 算法步骤</h3><ol><li>从0索引开始，跟后面的元素一一比较</li><li>小的放前面，大的放后面</li><li>第一次循环结束后，最小的数据已经确定</li><li>第二次循环从1索引开始以此类推</li><li>第三轮循环从2索引开始以此类推</li><li>第四轮循环从3索引开始以此类推。</li></ol><h3 id="2-2-动图演示"><a href="#2-2-动图演示" class="headerlink" title="2.2 动图演示"></a>2.2 动图演示</h3><p><img src="/img%5C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="选择排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A02_SelectionDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            选择排序：</span></span><br><span class="line"><span class="comment">                1，从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">                2，小的放前面，大的放后面。</span></span><br><span class="line"><span class="comment">                3，第一次循环结束后，最小的数据已经确定。</span></span><br><span class="line"><span class="comment">                4，第二次循环从1索引开始以此类推。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用选择排序让数组变成 1 2 3 4 5</span></span><br><span class="line">       <span class="comment">/* //第一轮：</span></span><br><span class="line"><span class="comment">        //从0索引开始，跟后面的元素一一比较。</span></span><br><span class="line"><span class="comment">        for (int i = 0 + 1; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            //拿着0索引跟后面的数据进行比较</span></span><br><span class="line"><span class="comment">            if(arr[0] &gt; arr[i])&#123;</span></span><br><span class="line"><span class="comment">                int temp = arr[0];</span></span><br><span class="line"><span class="comment">                arr[0] = arr[i];</span></span><br><span class="line"><span class="comment">                arr[i] = temp;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//最终代码：</span></span><br><span class="line">        <span class="comment">//外循环：几轮</span></span><br><span class="line">        <span class="comment">//i:表示这一轮中，我拿着哪个索引上的数据跟后面的数据进行比较并交换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length -<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="comment">//内循环：每一轮我要干什么事情？</span></span><br><span class="line">            <span class="comment">//拿着i跟i后面的数据进行比较交换</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] &gt; arr[j])&#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                    arr[i] = arr[j];</span><br><span class="line">                    arr[j] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        printArr(arr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-插入排序"><a href="#3-插入排序" class="headerlink" title="3. 插入排序"></a>3. 插入排序</h2><p>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过创建有序序列和无序序列，然后再遍历无序序列得到里面每一个数字，把每一个数字插入到有序序列中正确的位置。</p><p>插入排序在插入的时候，有优化算法，在遍历有序序列找正确位置时，可以采取二分查找</p><h3 id="3-1-算法步骤"><a href="#3-1-算法步骤" class="headerlink" title="3.1 算法步骤"></a>3.1 算法步骤</h3><p>将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</p><p>遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</p><p>N的范围：0~最大索引</p><h3 id="3-2-动图演示"><a href="#3-2-动图演示" class="headerlink" title="3.2 动图演示"></a>3.2 动图演示</h3><p><img src="/img%5C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="插入排序"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_InsertDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            插入排序：</span></span><br><span class="line"><span class="comment">                将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。</span></span><br><span class="line"><span class="comment">                遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。</span></span><br><span class="line"><span class="comment">                N的范围：0~最大索引</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">3</span>, <span class="number">44</span>, <span class="number">38</span>, <span class="number">5</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">36</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">2</span>, <span class="number">46</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">50</span>, <span class="number">48</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.找到无序的哪一组数组是从哪个索引开始的。  2</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] &gt; arr[i + <span class="number">1</span>])&#123;</span><br><span class="line">                startIndex = i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历从startIndex开始到最后一个元素，依次得到无序的哪一组数据中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//问题：如何把遍历到的数据，插入到前面有序的这一组当中</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//记录当前要插入数据的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; arr[j] &lt; arr[j - <span class="number">1</span>])&#123;</span><br><span class="line">                <span class="comment">//交换位置</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[j];</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">                arr[j - <span class="number">1</span>] = temp;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        printArr(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="comment">//3.遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-快速排序"><a href="#4-快速排序" class="headerlink" title="4. 快速排序"></a>4. 快速排序</h2><p>快速排序是由东尼·霍尔所发展的一种排序算法。</p><p>快速排序又是一种分而治之思想在排序算法上的典型应用。</p><p>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高！</p><p>它是处理大数据最快的排序算法之一了。</p><h3 id="4-1-算法步骤"><a href="#4-1-算法步骤" class="headerlink" title="4.1 算法步骤"></a>4.1 算法步骤</h3><ol><li>从数列中挑出一个元素，一般都是左边第一个数字，称为 “基准数”;</li><li>创建两个指针，一个从前往后走，一个从后往前走。</li><li>先执行后面的指针，找出第一个比基准数小的数字</li><li>再执行前面的指针，找出第一个比基准数大的数字</li><li>交换两个指针指向的数字</li><li>直到两个指针相遇</li><li>将基准数跟指针指向位置的数字交换位置，称之为：基准数归位。</li><li>第一轮结束之后，基准数左边的数字都是比基准数小的，基准数右边的数字都是比基准数大的。</li><li>把基准数左边看做一个序列，把基准数右边看做一个序列，按照刚刚的规则递归排序</li></ol><h3 id="4-2-动图演示"><a href="#4-2-动图演示" class="headerlink" title="4.2 动图演示"></a>4.2 动图演示</h3><p><img src="/img%5C%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="快速排序"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.mysort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A05_QuickSortDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Integer.MAX_VALUE);</span><br><span class="line">        System.out.println(Integer.MIN_VALUE);</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">        快速排序：</span></span><br><span class="line"><span class="comment">            第一轮：以0索引的数字为基准数，确定基准数在数组中正确的位置。</span></span><br><span class="line"><span class="comment">            比基准数小的全部在左边，比基准数大的全部在右边。</span></span><br><span class="line"><span class="comment">            后面以此类推。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>,<span class="number">10</span>, <span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int[] arr = new int[1000000];</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* Random r = new Random();</span></span><br><span class="line"><span class="comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            arr[i] = r.nextInt();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        quickSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        System.out.println(end - start);<span class="comment">//149</span></span><br><span class="line"></span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">        <span class="comment">//课堂练习：</span></span><br><span class="line">        <span class="comment">//我们可以利用相同的办法去测试一下，选择排序，冒泡排序以及插入排序运行的效率</span></span><br><span class="line">        <span class="comment">//得到一个结论：快速排序真的非常快。</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* for (int i = 0; i &lt; arr.length; i++) &#123;</span></span><br><span class="line"><span class="comment">            System.out.print(arr[i] + &quot; &quot;);</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     *   参数一：我们要排序的数组</span></span><br><span class="line"><span class="comment">     *   参数二：要排序数组的起始索引</span></span><br><span class="line"><span class="comment">     *   参数三：要排序数组的结束索引</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="comment">//定义两个变量记录要查找的范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> i;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> j;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(start &gt; end)&#123;</span><br><span class="line">            <span class="comment">//递归的出口</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//记录基准数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">baseNumber</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        <span class="comment">//利用循环找到要交换的数字</span></span><br><span class="line">        <span class="keyword">while</span>(start != end)&#123;</span><br><span class="line">            <span class="comment">//利用end，从后往前开始找，找比基准数小的数字</span></span><br><span class="line">            <span class="comment">//int[] arr = &#123;1, 6, 2, 7, 9, 3, 4, 5, 10, 8&#125;;</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[end] &lt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(end);</span><br><span class="line">            <span class="comment">//利用start，从前往后找，找比基准数大的数字</span></span><br><span class="line">            <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(end &lt;= start || arr[start] &gt; baseNumber)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//把end和start指向的元素进行交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当start和end指向了同一个元素的时候，那么上面的循环就会结束</span></span><br><span class="line">        <span class="comment">//表示已经找到了基准数在数组中应存入的位置</span></span><br><span class="line">        <span class="comment">//基准数归位</span></span><br><span class="line">        <span class="comment">//就是拿着这个范围中的第一个数字，跟start指向的元素进行交换</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">        arr[i] = arr[start];</span><br><span class="line">        arr[start] = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//确定6左边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,i,start - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//确定6右边的范围，重复刚刚所做的事情</span></span><br><span class="line">        quickSort(arr,start + <span class="number">1</span>,j);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他排序方式待更新~</p>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays-day21</title>
      <link href="/2023/01/26/Arrays%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/26/Arrays%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h1><p>操作数组的工具类</p><h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//toString:将数组变成字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(数组)</span>把数组拼接成一个字符串</span><br><span class="line">    <span class="comment">//binarySearch:二分查找法查找元素</span></span><br><span class="line"><span class="comment">//细节1：二分查找的前提：数组中的元素必须是有序，数组中的元素必须是升序的</span></span><br><span class="line"><span class="comment">//细节2：如果要查找的元素是存在的，那么返回的是真实的索引</span></span><br><span class="line"><span class="comment">//但是，如果要查找的元素是不存在的，返回的是-插入点-1</span></span><br><span class="line"><span class="comment">//疑问：为什么要减1呢？</span></span><br><span class="line"><span class="comment">//解释：如果此时，我现在要查找数字©，那么如果返回的值是-插入点，就会出现问题了。</span></span><br><span class="line"><span class="comment">//如果要查找数字6，此时©是不存在的，但是按照上面的规则-插入点，应该就是-日</span></span><br><span class="line"><span class="comment">//为了避免这样的情况，Java在这个基础上又减一。</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(数组，查找的元素)</span>二分查找法查找元素</span><br><span class="line">    <span class="comment">//copy0f:拷贝数组</span></span><br><span class="line"><span class="comment">//参数一：老数组</span></span><br><span class="line"><span class="comment">//参数二：新数组的长度</span></span><br><span class="line"><span class="comment">//方法的底层会根据第二个参数来创建新的数组</span></span><br><span class="line"><span class="comment">//如果新数组的长度是小于老数组的长度，会部分拷贝</span></span><br><span class="line"><span class="comment">//如果新数组的长度是等于老数组的长度，会完全拷贝</span></span><br><span class="line"><span class="comment">//如果新数组的长度是大于老数组的长度，会补上默认初始值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[]copyOf(原数组，新数组长度)拷贝数组</span><br><span class="line">    <span class="comment">//copyOfRange:拷贝数组（指定范围）</span></span><br><span class="line"><span class="comment">//细节：包头不包尾，包左不包右</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[]copyofRange(原数组，起始索引，结束索引)拷贝数组（指定范围）</span><br><span class="line">    <span class="comment">//fi11:填充数组</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fi11</span><span class="params">(数组，元素)</span>填充数组</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(数组)</span>按照默认方式进行数组排序</span><br><span class="line"><span class="comment">//第二个参数是一个接口，所以我们在调用方法的时候，需要传递这个接口的实现类对象，作为排序的规则。</span></span><br><span class="line"><span class="comment">//但是这个实现类，我只要使用一次，所以就没有必要单独的去写一个类，直接采取匿名内部类的方式就可以了</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//底层原理：</span></span><br><span class="line"><span class="comment">//利用插入排序+二分查找的方式进行排序的。</span></span><br><span class="line"><span class="comment">//默认把索引的数据当做是有序的序列，1索引到最后认为是无序的序列。</span></span><br><span class="line"><span class="comment">//遍历无序的序列得到里面的每一个元素，假设当前遍历得到的元素是A元素</span></span><br><span class="line"><span class="comment">//把A往有序序列中进行插入，在插入的时候，是利用二分查找确定A元素的插入点。</span></span><br><span class="line"><span class="comment">//拿着A元素，跟插入点的元素进行比较，比较的规则就是compare方法的方法体</span></span><br><span class="line"><span class="comment">//如果方法的返回值是负数，拿着A继续跟前面的数据进行比较</span></span><br><span class="line"><span class="comment">//如果方法的返回值是正数，拿着A继续跟后面的数据进行比较</span></span><br><span class="line"><span class="comment">//如果方法的返回值是，也拿着A跟后面的数据进行比较</span></span><br><span class="line"><span class="comment">//直到能确定A的最终位置为止。</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//compare方法的形式参数：</span></span><br><span class="line"><span class="comment">//参数一o1:表示在无序序列中，遍历得到的每一个元素</span></span><br><span class="line"><span class="comment">//参数二o2:有序序列中的元素</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//返回值：</span></span><br><span class="line"><span class="comment">//负数：表示当前要插入的元素是小的，放在前面</span></span><br><span class="line"><span class="comment">//正数：表示当前要插入的元素是大的，放在后面</span></span><br><span class="line"><span class="comment">//0表示当前要插入的元素跟现在的元素比是一样的们也会放在后面</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//简单理解：</span></span><br><span class="line"><span class="comment">//o1-o2:升序排列</span></span><br><span class="line"><span class="comment">//o2-o1:降序排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(数组，排序规则)</span>按照指定的规则排序</span><br><span class="line">Arrays.sort(arr,<span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1,Integer o2)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda-day21</title>
      <link href="/2023/01/26/lambda%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/26/lambda%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><ul><li>函数式编程(Functional programming)是一种思想特点。</li><li>函数式编程思想，忽略面向对象的复杂语法，强调做什么，而不是谁去做。</li><li>而我们要学习的Lambda表达式就是函数式思想的体现。</li></ul><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul><li>Lambda表达式可以用来简化匿名内部类的书写</li><li>Lambda表达式只能简化<strong>函数式接口</strong>的匿名内部类的写法</li><li>():代表形参</li><li>-&gt;:固定格式</li><li>{}:代表方法体</li></ul><h2 id="函数式接口："><a href="#函数式接口：" class="headerlink" title="函数式接口："></a>函数式接口：</h2><ul><li>有且仅有一个抽象方法的接口叫做函数式接口，接口上方可以加@Functionallnterface注解</li></ul><h2 id="Lambda表达式的标准格式"><a href="#Lambda表达式的标准格式" class="headerlink" title="Lambda表达式的标准格式"></a>Lambda表达式的标准格式</h2><ul><li>Lambda表达式是JDK8开始后的一种新语法形式。</li></ul><h2 id="Lambda表达式的基本作用？"><a href="#Lambda表达式的基本作用？" class="headerlink" title="Lambda表达式的基本作用？"></a>Lambda表达式的基本作用？</h2><ul><li>简化函数式接口的匿名内部类的写法。</li></ul><h2 id="Lambda表达式有什么使用前提？"><a href="#Lambda表达式有什么使用前提？" class="headerlink" title="Lambda表达式有什么使用前提？"></a>Lambda表达式有什么使用前提？</h2><ul><li>必须是接口的匿名内部类，接口中只能有一个抽象方法</li></ul><h2 id="Lambda的好处？"><a href="#Lambda的好处？" class="headerlink" title="Lambda的好处？"></a>Lambda的好处？</h2><ul><li>Lambda是一个匿名函数，我们可以把Lambda.表达式理解为是一段可以传递的代码，它可以写出更简洁、更灵活的代码，作为一种更紧凑的代码风格，使Java语言表达能力得到了提升。</li></ul><h2 id="lambda的省略规则："><a href="#lambda的省略规则：" class="headerlink" title="lambda的省略规则："></a>lambda的省略规则：</h2><ol><li>参数类型可以省略不写。</li><li>如果只有一个参数，参数类型可以省略，同时()也可以省略。</li><li>如果Lambda表达式的方法体只有一行，大括号，分号，return可以省略不写，需要同时省略。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">method(<span class="keyword">new</span> <span class="title class_">Swim</span>()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;正在游泳~~~&quot;</span>)；</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//  利用lambda表达式进行简写</span></span><br><span class="line">method(</span><br><span class="line">()-&gt;&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;正在游泳~~&quot;</span>)；</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(Swim s)</span>&#123;</span><br><span class="line">s.swimming();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 不使用lambda写法</span></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o1 - o2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// lambda完整写法</span></span><br><span class="line">        Arrays.sort(arr, (Integer o1, Integer o2)-&gt;&#123;</span><br><span class="line">                <span class="keyword">return</span> o1 - o2;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// lambda省略写法</span></span><br><span class="line">        Arrays.sort(arr, (o1, o2) -&gt; o1 - o2);</span><br><span class="line">        System.out.println(Arrays.toString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">         定义数组并存储一些字符串，利用Arrays中的sort方法进行排序</span></span><br><span class="line"><span class="comment">         要求：</span></span><br><span class="line"><span class="comment">         按照字符串的长度进行排序，短的在前面，长的在后面。</span></span><br><span class="line"><span class="comment">         (暂时不比较字符串里面的内容)</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">     String[] arr = &#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;aaaa&quot;</span>, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;aa&quot;</span>&#125;;</span><br><span class="line">     </span><br><span class="line">         <span class="comment">// 如果以后我们要把数组中的数据按照指定的方式进行排列，就需要用到sot方法，而且要指定排序的规则</span></span><br><span class="line">     Arrays.sort(arr, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;String&gt;() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String o1, String o2)</span> &#123;</span><br><span class="line">                 <span class="comment">// 字符串的长度进行排序</span></span><br><span class="line">             <span class="keyword">return</span> o1.length() - o2.length();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda完整格式</span></span><br><span class="line">     Arrays.sort(arr,(String o1,String o2)-&gt; &#123;</span><br><span class="line">         <span class="keyword">return</span> o1.length() - o2.length();</span><br><span class="line">     &#125;</span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">     <span class="comment">//Lambda简写格式</span></span><br><span class="line">     <span class="comment">//小括号：数据类型可以省略，如果参数只有一个，小括号还可以省略</span></span><br><span class="line">     <span class="comment">//大括号：如果方法体只有一行，return,分号，大括号都可以省略</span></span><br><span class="line">     Arrays.sort(arr,(o1,o2)-&gt;o1.length()-o2.length());</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">         <span class="comment">//打印数组</span></span><br><span class="line">     System.out.println(Arrays.toString(arr));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找-day21</title>
      <link href="/2023/01/26/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_04/"/>
      <url>/2023/01/26/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_04/</url>
      
        <content type="html"><![CDATA[<h1 id="七种查找方式"><a href="#七种查找方式" class="headerlink" title="七种查找方式"></a>七种查找方式</h1><ul><li>基本查找，二分查找，插值查找，斐波那契额查找</li><li>分块查找，哈希查找</li><li>树表查找</li></ul><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="二分查找的优势？"><a href="#二分查找的优势？" class="headerlink" title="二分查找的优势？"></a>二分查找的优势？</h2><p>​提升查找效率</p><h2 id="二分查找的前提条件？"><a href="#二分查找的前提条件？" class="headerlink" title="二分查找的前提条件？"></a>二分查找的前提条件？</h2><p>​数据必须是有序的</p><h2 id="二分查找的过程"><a href="#二分查找的过程" class="headerlink" title="二分查找的过程"></a>二分查找的过程</h2><ul><li>min和max表示当前查找的范围</li><li>mid是在min和max中间的</li><li>如果查找的元素在mid的左边，缩小范围时，min不变，max等于mid减1</li><li>如果查找的元素在mid的右边，缩小范围时，max不变，min等于mid加1</li><li>如果mid等于要查找的值，则说明找到了</li></ul><h2 id="二分查找，插值查找，斐波那契额查询的各自特点"><a href="#二分查找，插值查找，斐波那契额查询的各自特点" class="headerlink" title="二分查找，插值查找，斐波那契额查询的各自特点"></a>二分查找，插值查找，斐波那契额查询的各自特点</h2><ul><li>相同点<ul><li>都是通过不断缩小范围来查找对应的数据的</li></ul></li><li>不同点<ul><li>计算mid的方式不一样</li></ul></li></ul><h3 id="二分查找："><a href="#二分查找：" class="headerlink" title="二分查找："></a>二分查找：</h3><blockquote><p>mid每次都指向范围的中间位置</p></blockquote><h3 id="插值查找："><a href="#插值查找：" class="headerlink" title="插值查找："></a>插值查找：</h3><blockquote><p>mid尽可能的靠近要查找的数据，但是要求数据尽可能的分布均匀</p></blockquote><h3 id="斐波那契额查找：-利用黄金比例算mid指向的位置"><a href="#斐波那契额查找：-利用黄金比例算mid指向的位置" class="headerlink" title="斐波那契额查找： 利用黄金比例算mid指向的位置"></a>斐波那契额查找： 利用黄金比例算mid指向的位置</h3><h1 id="分块查找"><a href="#分块查找" class="headerlink" title="分块查找"></a>分块查找</h1><h2 id="分块的原则"><a href="#分块的原则" class="headerlink" title="分块的原则"></a>分块的原则</h2><ul><li>前一块中的最大数据，小于后一块中的所有数据（块内无序，块间有序）</li><li>块数数量一般等于数字的个数开根号。比如16个数字一般分为4块左右</li></ul><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><blockquote><p>先确定要查找的元素在哪一块，然后在块内挨个查找</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序-day21</title>
      <link href="/2023/01/26/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/"/>
      <url>/2023/01/26/%E6%8E%92%E5%BA%8F%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h1><h2 id="递归算法的作用"><a href="#递归算法的作用" class="headerlink" title="递归算法的作用"></a>递归算法的作用</h2><ul><li>把一个复杂的问题层层转化为一个与原问题相似的规模较小的问题来求解。<br>递归策略只需少量的程序就可描述出解题过程所需要的多次重复计算</li></ul><h2 id="书写递归的两个核心"><a href="#书写递归的两个核心" class="headerlink" title="书写递归的两个核心"></a>书写递归的两个核心</h2><ul><li>找出口：什么时候不在调用方法</li><li>找规则：如何把大问题变成规模较小的问题</li></ul><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ul><li>冒泡排序、选择排序、插入排序、快速排序</li><li>希尔排序、堆排序、桶排序、归并排序、计数排序、基数排序</li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><ul><li>相邻的数据两两比较，小的放前面，大的放后面。</li></ul><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><ul><li>从0索引开始，拿着每一个索引上的元素跟后面的元素依次比较，小的放前面，大的放后面，以此类推</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><ul><li>将0索引的元素到N索引的元素看做是有序的，把N+1索引的元素到最后一个当成是无序的。<br>遍历无序的数据，将遍历到的元素插入有序序列中适当的位置，如遇到相同数据，插在后面。<br>N的范围：0~最大索引</li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote><p>第一轮：把0索引的数字作为基准数，确定基准数在数组中正确的位置。比基准数小的全部在左边，比基准数大的全部在右边。</p></blockquote><ul><li>将排序范围中的第一个数字作为基准数，再定义两个变量start,end</li><li>start,从前往后找比基准数大的，end从后往前找比基准数小的。</li><li>找到之后交换start和end指向的元素，并循环这一过程，直到start和end处于同一个位置，该位置是基准数在数组中应存入的位置，再让基准数归位。</li><li>归位后的效果：基准数左边的，比基准数小，基准数右边的，比基准数大</li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Date</title>
      <link href="/2023/01/24/Date/"/>
      <url>/2023/01/24/Date/</url>
      
        <content type="html"><![CDATA[<h1 id="day04【常用API】"><a href="#day04【常用API】" class="headerlink" title="day04【常用API】"></a>day04【常用API】</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>JDK7时间相关类</li><li>JDK8时间相关类</li><li>包装类</li><li>综合练习</li><li>Collection集合</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够使用日期类输出当前日期</li><li><input disabled="" type="checkbox"> 能够使用将日期格式化为字符串的方法</li><li><input disabled="" type="checkbox"> 能够使用将字符串转换成日期的方法</li><li><input disabled="" type="checkbox"> 能够说出8种基本类型对应的包装类名称</li><li><input disabled="" type="checkbox"> 能够说出自动装箱、自动拆箱的概念</li><li><input disabled="" type="checkbox"> 能够将字符串转换为对应的基本类型</li><li><input disabled="" type="checkbox"> 能够将基本类型转换为对应的字符串</li><li><input disabled="" type="checkbox"> 能够完成课题上讲解的所有练习</li></ul><h1 id="第一章-Date类"><a href="#第一章-Date类" class="headerlink" title="第一章 Date类"></a>第一章 Date类</h1><h2 id="1-1-Date概述"><a href="#1-1-Date概述" class="headerlink" title="1.1 Date概述"></a>1.1 Date概述</h2><p>java.util.Date&#96;类 表示特定的瞬间，精确到毫秒。</p><p>继续查阅Date类的描述，发现Date拥有多个构造函数，只是部分已经过时，我们重点看以下两个构造函数</p><ul><li><code>public Date()</code>：从运行程序的此时此刻到时间原点经历的毫秒值,转换成Date对象，分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</li><li><code>public Date(long date)</code>：将指定参数的毫秒值date,转换成Date对象，分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</li></ul><blockquote><p>tips: 由于中国处于东八区（GMT+08:00）是比世界协调时间&#x2F;格林尼治时间（GMT）快8小时的时区，当格林尼治标准时间为0:00时，东八区的标准时间为08:00。</p></blockquote><p>简单来说：使用无参构造，可以自动设置当前系统时间的毫秒时刻；指定long类型的构造参数，可以自定义毫秒时刻。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01Date</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的时间</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">// Tue Jan 16 14:37:35 CST 2020</span></span><br><span class="line">        <span class="comment">// 创建日期对象，把当前的毫秒值转成日期对象</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>)); <span class="comment">// Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>tips:在使用println方法时，会自动调用Date类中的toString方法。Date类对Object类中的toString方法进行了覆盖重写，所以结果为指定格式的字符串。</p></blockquote><h2 id="1-2-Date常用方法"><a href="#1-2-Date常用方法" class="headerlink" title="1.2 Date常用方法"></a>1.2 Date常用方法</h2><p>Date类中的多数方法已经过时，常用的方法有：</p><ul><li><code>public long getTime()</code> 把日期对象转换成对应的时间毫秒值。</li><li><code>public void setTime(long time)</code> 把方法参数给定的毫秒值设置给日期对象</li></ul><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//public long getTime():获取的是日期对象从1970年1月1日 00:00:00到现在的毫秒值</span></span><br><span class="line">        <span class="comment">//System.out.println(d.getTime());</span></span><br><span class="line">        <span class="comment">//System.out.println(d.getTime() * 1.0 / 1000 / 60 / 60 / 24 / 365 + &quot;年&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void setTime(long time):设置时间，给的是毫秒值</span></span><br><span class="line">        <span class="comment">//long time = 1000*60*60;</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        d.setTime(time);</span><br><span class="line"></span><br><span class="line">        System.out.println(d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>小结：Date表示特定的时间瞬间，我们可以使用Date对象对时间进行操作。</p></blockquote><h1 id="第二章-SimpleDateFormat类"><a href="#第二章-SimpleDateFormat类" class="headerlink" title="第二章 SimpleDateFormat类"></a>第二章 SimpleDateFormat类</h1><p><code>java.text.SimpleDateFormat</code> 是日期&#x2F;时间格式化类，我们通过这个类可以帮我们完成日期和文本之间的转换,也就是可以在Date对象与String对象之间进行来回转换。</p><ul><li><strong>格式化</strong>：按照指定的格式，把Date对象转换为String对象。</li><li><strong>解析</strong>：按照指定的格式，把String对象转换为Date对象。</li></ul><h2 id="2-1-构造方法"><a href="#2-1-构造方法" class="headerlink" title="2.1 构造方法"></a>2.1 构造方法</h2><p>由于DateFormat为抽象类，不能直接使用，所以需要常用的子类<code>java.text.SimpleDateFormat</code>。这个类需要一个模式（格式）来指定格式化或解析的标准。构造方法为：</p><ul><li><code>public SimpleDateFormat(String pattern)</code>：用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat。参数pattern是一个字符串，代表日期时间的自定义格式。</li></ul><h2 id="2-2-格式规则"><a href="#2-2-格式规则" class="headerlink" title="2.2 格式规则"></a>2.2 格式规则</h2><p>常用的格式规则为：</p><table><thead><tr><th>标识字母（区分大小写）</th><th>含义</th></tr></thead><tbody><tr><td>y</td><td>年</td></tr><tr><td>M</td><td>月</td></tr><tr><td>d</td><td>日</td></tr><tr><td>H</td><td>时</td></tr><tr><td>m</td><td>分</td></tr><tr><td>s</td><td>秒</td></tr></tbody></table><blockquote><p>备注：更详细的格式规则，可以参考SimpleDateFormat类的API文档。</p></blockquote><h2 id="2-3-常用方法"><a href="#2-3-常用方法" class="headerlink" title="2.3 常用方法"></a>2.3 常用方法</h2><p>DateFormat类的常用方法有：</p><ul><li><p><code>public String format(Date date)</code>：将Date对象格式化为字符串。</p></li><li><p><code>public Date parse(String source)</code>：将字符串解析为Date对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a01jdk7datedemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A03_SimpleDateFormatDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public simpleDateFormat() 默认格式</span></span><br><span class="line"><span class="comment">            public simpleDateFormat(String pattern) 指定格式</span></span><br><span class="line"><span class="comment">            public final string format(Date date) 格式化(日期对象 -&gt;字符串)</span></span><br><span class="line"><span class="comment">            public Date parse(string source) 解析(字符串 -&gt;日期对象)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串表示时间</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2023-11-11 11:11:11&quot;</span>;</span><br><span class="line">        <span class="comment">//2.利用空参构造创建simpleDateFormat对象</span></span><br><span class="line">        <span class="comment">// 细节:</span></span><br><span class="line">        <span class="comment">//创建对象的格式要跟字符串的格式完全一致</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(str);</span><br><span class="line">        <span class="comment">//3.打印结果</span></span><br><span class="line">        System.out.println(date.getTime());<span class="comment">//1699672271000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1.利用空参构造创建simpleDateFormat对象，默认格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>();</span><br><span class="line">        <span class="type">Date</span> <span class="variable">d1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0L</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> sdf1.format(d1);</span><br><span class="line">        System.out.println(str1);<span class="comment">//1970/1/1 上午8:00</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.利用带参构造创建simpleDateFormat对象，指定格式</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> sdf2.format(d1);</span><br><span class="line">        System.out.println(str2);<span class="comment">//1970年01月01日 08:00:00</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//课堂练习:yyyy年MM月dd日 时:分:秒 星期</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>小结：DateFormat可以将Date对象和字符串相互转换。</p></blockquote><h2 id="2-4-练习1-初恋女友的出生日期"><a href="#2-4-练习1-初恋女友的出生日期" class="headerlink" title="2.4 练习1(初恋女友的出生日期)"></a>2.4 练习1(初恋女友的出生日期)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     假设，你初恋的出生年月日为:2000-11-11</span></span><br><span class="line"><span class="comment">     请用字符串表示这个数据，并将其转换为:2000年11月11日</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     创建一个Date对象表示2000年11月11日</span></span><br><span class="line"><span class="comment">     创建一个SimpleDateFormat对象，并定义格式为年月日把时间变成:2000年11月11日</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.可以通过2000-11-11进行解析，解析成一个Date对象</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;2000-11-11&quot;</span>;</span><br><span class="line"><span class="comment">//2.解析</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf1.parse(str);</span><br><span class="line"><span class="comment">//3.格式化</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> sdf2.format(date);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><h2 id="2-5-练习2-秒杀活动"><a href="#2-5-练习2-秒杀活动" class="headerlink" title="2.5 练习2(秒杀活动)"></a>2.5 练习2(秒杀活动)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 需求:</span></span><br><span class="line"><span class="comment">            秒杀活动开始时间:2023年11月11日 0:0:0(毫秒值)</span></span><br><span class="line"><span class="comment">            秒杀活动结束时间:2023年11月11日 0:10:0(毫秒值)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            小贾下单并付款的时间为:2023年11月11日 0:01:0</span></span><br><span class="line"><span class="comment">            小皮下单并付款的时间为:2023年11月11日 0:11:0</span></span><br><span class="line"><span class="comment">            用代码说明这两位同学有没有参加上秒杀活动?</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义字符串表示三个时间</span></span><br><span class="line"><span class="type">String</span> <span class="variable">startstr</span> <span class="operator">=</span> <span class="string">&quot;2023年11月11日 0:0:0&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">endstr</span> <span class="operator">=</span> <span class="string">&quot;2023年11月11日 0:10:0&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">orderstr</span> <span class="operator">=</span> <span class="string">&quot;2023年11月11日 0:01:00&quot;</span>;</span><br><span class="line"><span class="comment">//2.解析上面的三个时间，得到Date对象</span></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日HH:mm:ss&quot;</span>);</span><br><span class="line"><span class="type">Date</span> <span class="variable">startDate</span> <span class="operator">=</span> sdf.parse(startstr);</span><br><span class="line"><span class="type">Date</span> <span class="variable">endDate</span> <span class="operator">=</span> sdf.parse(endstr);</span><br><span class="line"><span class="type">Date</span> <span class="variable">orderDate</span> <span class="operator">=</span> sdf.parse(orderstr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.得到三个时间的毫秒值</span></span><br><span class="line"><span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> startDate.getTime();</span><br><span class="line"><span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> endDate.getTime();</span><br><span class="line"><span class="type">long</span> <span class="variable">orderTime</span> <span class="operator">=</span> orderDate.getTime();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.判断</span></span><br><span class="line"><span class="keyword">if</span> (orderTime &gt;= startTime &amp;&amp; orderTime &lt;= endTime) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;参加秒杀活动成功&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;参加秒杀活动失败&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-Calendar类"><a href="#第三章-Calendar类" class="headerlink" title="第三章 Calendar类"></a>第三章 Calendar类</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><ul><li>java.util.Calendar类表示一个“日历类”，可以进行日期运算。它是一个抽象类，不能创建对象，我们可以使用它的子类：java.util.GregorianCalendar类。</li><li>有两种方式可以获取GregorianCalendar对象：<ul><li>直接创建GregorianCalendar对象；</li><li>通过Calendar的静态方法getInstance()方法获取GregorianCalendar对象【本次课使用】</li></ul></li></ul><h2 id="3-2-常用方法"><a href="#3-2-常用方法" class="headerlink" title="3.2 常用方法"></a>3.2 常用方法</h2><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static Calendar getInstance()</td><td>获取一个它的子类GregorianCalendar对象。</td></tr><tr><td>public int get(int field)</td><td>获取某个字段的值。field参数表示获取哪个字段的值，<br />可以使用Calender中定义的常量来表示：<br />Calendar.YEAR : 年<br />Calendar.MONTH ：月<br />Calendar.DAY_OF_MONTH：月中的日期<br />Calendar.HOUR：小时<br />Calendar.MINUTE：分钟<br />Calendar.SECOND：秒<br />Calendar.DAY_OF_WEEK：星期</td></tr><tr><td>public void set(int field,int value)</td><td>设置某个字段的值</td></tr><tr><td>public void add(int field,int amount)</td><td>为某个字段增加&#x2F;减少指定的值</td></tr></tbody></table><h2 id="3-3-get方法示例"><a href="#3-3-get方法示例" class="headerlink" title="3.3 get方法示例"></a>3.3 get方法示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.获取一个GregorianCalendar对象</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//获取子类对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.打印子类对象</span></span><br><span class="line">        System.out.println(instance);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取属性</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> instance.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> instance.get(Calendar.MONTH) + <span class="number">1</span>;<span class="comment">//Calendar的月份值是0-11</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> instance.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> instance.get(Calendar.HOUR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> instance.get(Calendar.MINUTE);</span><br><span class="line">        <span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> instance.get(Calendar.SECOND);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> instance.get(Calendar.DAY_OF_WEEK);<span class="comment">//返回值范围：1--7，分别表示：&quot;星期日&quot;,&quot;星期一&quot;,&quot;星期二&quot;,...,&quot;星期六&quot;</span></span><br><span class="line"></span><br><span class="line">        System.out.println(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span> + </span><br><span class="line">                           hour + <span class="string">&quot;:&quot;</span> + minute + <span class="string">&quot;:&quot;</span> + second);</span><br><span class="line">        System.out.println(getWeek(week));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查表法，查询星期几</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeek</span><span class="params">(<span class="type">int</span> w)</span> &#123;<span class="comment">//w = 1 --- 7</span></span><br><span class="line">        <span class="comment">//做一个表(数组)</span></span><br><span class="line">        String[] weekArray = &#123;<span class="string">&quot;星期日&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//            索引      [0]      [1]       [2]      [3]       [4]      [5]      [6]</span></span><br><span class="line">        <span class="comment">//查表</span></span><br><span class="line">        <span class="keyword">return</span> weekArray[w - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-set方法示例："><a href="#3-4-set方法示例：" class="headerlink" title="3.4 set方法示例："></a>3.4 set方法示例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//设置属性——set(int field,int value):</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c1</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//获取当前日期</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算班长出生那天是星期几(假如班长出生日期为：1998年3月18日)</span></span><br><span class="line">c1.set(Calendar.YEAR, <span class="number">1998</span>);</span><br><span class="line">c1.set(Calendar.MONTH, <span class="number">3</span> - <span class="number">1</span>);<span class="comment">//转换为Calendar内部的月份值</span></span><br><span class="line">c1.set(Calendar.DAY_OF_MONTH, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> c1.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">System.out.println(<span class="string">&quot;班长出生那天是：&quot;</span> + getWeek(w));</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查表法，查询星期几</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeek</span><span class="params">(<span class="type">int</span> w)</span> &#123;<span class="comment">//w = 1 --- 7</span></span><br><span class="line">        <span class="comment">//做一个表(数组)</span></span><br><span class="line">        String[] weekArray = &#123;<span class="string">&quot;星期日&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//            索引      [0]      [1]       [2]      [3]       [4]      [5]      [6]</span></span><br><span class="line">        <span class="comment">//查表</span></span><br><span class="line">        <span class="keyword">return</span> weekArray[w - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-add方法示例："><a href="#3-5-add方法示例：" class="headerlink" title="3.5 add方法示例："></a>3.5 add方法示例：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//计算200天以后是哪年哪月哪日，星期几？</span></span><br><span class="line"><span class="type">Calendar</span> <span class="variable">c2</span> <span class="operator">=</span> Calendar.getInstance();<span class="comment">//获取当前日期</span></span><br><span class="line">        c2.add(Calendar.DAY_OF_MONTH, <span class="number">200</span>);<span class="comment">//日期加200</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> c2.get(Calendar.YEAR);</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> c2.get(Calendar.MONTH) + <span class="number">1</span>;<span class="comment">//转换为实际的月份</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> c2.get(Calendar.DAY_OF_MONTH);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">wk</span> <span class="operator">=</span> c2.get(Calendar.DAY_OF_WEEK);</span><br><span class="line">        System.out.println(<span class="string">&quot;200天后是：&quot;</span> + y + <span class="string">&quot;年&quot;</span> + m + <span class="string">&quot;月&quot;</span> + d + <span class="string">&quot;日&quot;</span> + getWeek(wk));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查表法，查询星期几</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getWeek</span><span class="params">(<span class="type">int</span> w)</span> &#123;<span class="comment">//w = 1 --- 7</span></span><br><span class="line">        <span class="comment">//做一个表(数组)</span></span><br><span class="line">        String[] weekArray = &#123;<span class="string">&quot;星期日&quot;</span>, <span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//            索引      [0]      [1]       [2]      [3]       [4]      [5]      [6]</span></span><br><span class="line">        <span class="comment">//查表</span></span><br><span class="line">        <span class="keyword">return</span> weekArray[w - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章-JDK8时间相关类"><a href="#第四章-JDK8时间相关类" class="headerlink" title="第四章 JDK8时间相关类"></a>第四章 JDK8时间相关类</h1><table><thead><tr><th>JDK8时间类类名</th><th>作用</th></tr></thead><tbody><tr><td>ZoneId</td><td>时区</td></tr><tr><td>Instant</td><td>时间戳</td></tr><tr><td>ZoneDateTime</td><td>带时区的时间</td></tr><tr><td>DateTimeFormatter</td><td>用于时间的格式化和解析</td></tr><tr><td>LocalDate</td><td>年、月、日</td></tr><tr><td>LocalTime</td><td>时、分、秒</td></tr><tr><td>LocalDateTime</td><td>年、月、日、时、分、秒</td></tr><tr><td>Duration</td><td>时间间隔（秒，纳，秒）</td></tr><tr><td>Period</td><td>时间间隔（年，月，日）</td></tr><tr><td>ChronoUnit</td><td>时间间隔（所有单位）</td></tr></tbody></table><h2 id="4-1-ZoneId-时区"><a href="#4-1-ZoneId-时区" class="headerlink" title="4.1  ZoneId 时区"></a>4.1  ZoneId 时区</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        static Set&lt;string&gt; getAvailableZoneIds() 获取Java中支持的所有时区</span></span><br><span class="line"><span class="comment">        static ZoneId systemDefault() 获取系统默认时区</span></span><br><span class="line"><span class="comment">        static Zoneld of(string zoneld) 获取一个指定时区</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取所有的时区名称</span></span><br><span class="line">Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">System.out.println(zoneIds.size());<span class="comment">//600</span></span><br><span class="line">System.out.println(zoneIds);<span class="comment">// Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取当前系统的默认时区</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.systemDefault();</span><br><span class="line">System.out.println(zoneId);<span class="comment">//Asia/Shanghai</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取指定的时区</span></span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId1</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;Asia/Pontianak&quot;</span>);</span><br><span class="line">System.out.println(zoneId1);<span class="comment">//Asia/Pontianak</span></span><br></pre></td></tr></table></figure><h2 id="4-2-Instant-时间戳"><a href="#4-2-Instant-时间戳" class="headerlink" title="4.2  Instant 时间戳"></a>4.2  Instant 时间戳</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            static Instant now() 获取当前时间的Instant对象(标准时间)</span></span><br><span class="line"><span class="comment">            static Instant ofXxxx(long epochMilli) 根据(秒/毫秒/纳秒)获取Instant对象</span></span><br><span class="line"><span class="comment">            ZonedDateTime atZone(ZoneIdzone) 指定时区</span></span><br><span class="line"><span class="comment">            boolean isxxx(Instant otherInstant) 判断系列的方法</span></span><br><span class="line"><span class="comment">            Instant minusXxx(long millisToSubtract) 减少时间系列的方法</span></span><br><span class="line"><span class="comment">            Instant plusXxx(long millisToSubtract) 增加时间系列的方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//1.获取当前时间的Instant对象(标准时间)</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">now</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.根据(秒/毫秒/纳秒)获取Instant对象</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant1</span> <span class="operator">=</span> Instant.ofEpochMilli(<span class="number">0L</span>);</span><br><span class="line">System.out.println(instant1);<span class="comment">//1970-01-01T00:00:00z</span></span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant2</span> <span class="operator">=</span> Instant.ofEpochSecond(<span class="number">1L</span>);</span><br><span class="line">System.out.println(instant2);<span class="comment">//1970-01-01T00:00:01Z</span></span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant3</span> <span class="operator">=</span> Instant.ofEpochSecond(<span class="number">1L</span>, <span class="number">1000000000L</span>);</span><br><span class="line">System.out.println(instant3);<span class="comment">//1970-01-01T00:00:027</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 指定时区</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time</span> <span class="operator">=</span> Instant.now().atZone(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">System.out.println(time);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.isXxx 判断</span></span><br><span class="line">Instant instant4=Instant.ofEpochMilli(<span class="number">0L</span>);</span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant5</span> <span class="operator">=</span>Instant.ofEpochMilli(<span class="number">1000L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.用于时间的判断</span></span><br><span class="line"><span class="comment">//isBefore:判断调用者代表的时间是否在参数表示时间的前面</span></span><br><span class="line"><span class="type">boolean</span> result1=instant4.isBefore(instant5);</span><br><span class="line">System.out.println(result1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//isAfter:判断调用者代表的时间是否在参数表示时间的后面</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result2</span> <span class="operator">=</span> instant4.isAfter(instant5);</span><br><span class="line">System.out.println(result2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6.Instant minusXxx(long millisToSubtract) 减少时间系列的方法</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant6</span> <span class="operator">=</span>Instant.ofEpochMilli(<span class="number">3000L</span>);</span><br><span class="line">System.out.println(instant6);<span class="comment">//1970-01-01T00:00:03Z</span></span><br><span class="line"></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant7</span> <span class="operator">=</span>instant6.minusSeconds(<span class="number">1</span>);</span><br><span class="line">System.out.println(instant7);<span class="comment">//1970-01-01T00:00:02Z</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-3-ZoneDateTime-带时区的时间"><a href="#4-3-ZoneDateTime-带时区的时间" class="headerlink" title="4.3 ZoneDateTime  带时区的时间"></a>4.3 ZoneDateTime  带时区的时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            static ZonedDateTime now() 获取当前时间的ZonedDateTime对象</span></span><br><span class="line"><span class="comment">            static ZonedDateTime ofXxxx(。。。) 获取指定时间的ZonedDateTime对象</span></span><br><span class="line"><span class="comment">            ZonedDateTime withXxx(时间) 修改时间系列的方法</span></span><br><span class="line"><span class="comment">            ZonedDateTime minusXxx(时间) 减少时间系列的方法</span></span><br><span class="line"><span class="comment">            ZonedDateTime plusXxx(时间) 增加时间系列的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//1.获取当前时间对象(带时区)</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">now</span> <span class="operator">=</span> ZonedDateTime.now();</span><br><span class="line">System.out.println(now);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取指定的时间对象(带时区)1/年月日时分秒纳秒方式指定</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time1</span> <span class="operator">=</span> ZonedDateTime.of(<span class="number">2023</span>, <span class="number">10</span>, <span class="number">1</span>,</span><br><span class="line">                                       <span class="number">11</span>, <span class="number">12</span>, <span class="number">12</span>, <span class="number">0</span>, ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line">System.out.println(time1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Instant + 时区的方式指定获取时间对象</span></span><br><span class="line"><span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.ofEpochMilli(<span class="number">0L</span>);</span><br><span class="line"><span class="type">ZoneId</span> <span class="variable">zoneId</span> <span class="operator">=</span> ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>);</span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time2</span> <span class="operator">=</span> ZonedDateTime.ofInstant(instant, zoneId);</span><br><span class="line">System.out.println(time2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.withXxx 修改时间系列的方法</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time3</span> <span class="operator">=</span> time2.withYear(<span class="number">2000</span>);</span><br><span class="line">System.out.println(time3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 减少时间</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time4</span> <span class="operator">=</span> time3.minusYears(<span class="number">1</span>);</span><br><span class="line">System.out.println(time4);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.增加时间</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time5</span> <span class="operator">=</span> time4.plusYears(<span class="number">1</span>);</span><br><span class="line">System.out.println(time5);</span><br></pre></td></tr></table></figure><h2 id="4-4DateTimeFormatter-用于时间的格式化和解析"><a href="#4-4DateTimeFormatter-用于时间的格式化和解析" class="headerlink" title="4.4DateTimeFormatter   用于时间的格式化和解析"></a>4.4DateTimeFormatter   用于时间的格式化和解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            static DateTimeFormatter ofPattern(格式) 获取格式对象</span></span><br><span class="line"><span class="comment">            String format(时间对象) 按照指定方式格式化</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="comment">//获取时间对象</span></span><br><span class="line"><span class="type">ZonedDateTime</span> <span class="variable">time</span> <span class="operator">=</span> Instant.now().atZone(ZoneId.of(<span class="string">&quot;Asia/Shanghai&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析/格式化器</span></span><br><span class="line">DateTimeFormatter dtf1=DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm;ss EE a&quot;</span>);</span><br><span class="line"><span class="comment">// 格式化</span></span><br><span class="line">System.out.println(dtf1.format(time));</span><br></pre></td></tr></table></figure><h2 id="4-5LocalDate-年、月、日"><a href="#4-5LocalDate-年、月、日" class="headerlink" title="4.5LocalDate  年、月、日"></a>4.5LocalDate  年、月、日</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取当前时间的日历对象(包含 年月日)</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">nowDate</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"><span class="comment">//System.out.println(&quot;今天的日期:&quot; + nowDate);</span></span><br><span class="line"><span class="comment">//2.获取指定的时间的日历对象</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ldDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2023</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;指定日期:&quot;</span> + ldDate);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.get系列方法获取日历中的每一个属性值//获取年</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> ldDate.getYear();</span><br><span class="line">System.out.println(<span class="string">&quot;year: &quot;</span> + year);</span><br><span class="line"><span class="comment">//获取月//方式一:</span></span><br><span class="line"><span class="type">Month</span> <span class="variable">m</span> <span class="operator">=</span> ldDate.getMonth();</span><br><span class="line">System.out.println(m);</span><br><span class="line">System.out.println(m.getValue());</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二:</span></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> ldDate.getMonthValue();</span><br><span class="line">System.out.println(<span class="string">&quot;month: &quot;</span> + month);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取日</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> ldDate.getDayOfMonth();</span><br><span class="line">System.out.println(<span class="string">&quot;day:&quot;</span> + day);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一年的第几天</span></span><br><span class="line"><span class="type">int</span> <span class="variable">dayofYear</span> <span class="operator">=</span> ldDate.getDayOfYear();</span><br><span class="line">System.out.println(<span class="string">&quot;dayOfYear:&quot;</span> + dayofYear);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取星期</span></span><br><span class="line"><span class="type">DayOfWeek</span> <span class="variable">dayOfWeek</span> <span class="operator">=</span> ldDate.getDayOfWeek();</span><br><span class="line">System.out.println(dayOfWeek);</span><br><span class="line">System.out.println(dayOfWeek.getValue());</span><br><span class="line"></span><br><span class="line"><span class="comment">//is开头的方法表示判断</span></span><br><span class="line">System.out.println(ldDate.isBefore(ldDate));</span><br><span class="line">System.out.println(ldDate.isAfter(ldDate));</span><br><span class="line"></span><br><span class="line"><span class="comment">//with开头的方法表示修改，只能修改年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">withLocalDate</span> <span class="operator">=</span> ldDate.withYear(<span class="number">2000</span>);</span><br><span class="line">System.out.println(withLocalDate);</span><br><span class="line"></span><br><span class="line"><span class="comment">//minus开头的方法表示减少，只能减少年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">minusLocalDate</span> <span class="operator">=</span> ldDate.minusYears(<span class="number">1</span>);</span><br><span class="line">System.out.println(minusLocalDate);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//plus开头的方法表示增加，只能增加年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">plusLocalDate</span> <span class="operator">=</span> ldDate.plusDays(<span class="number">1</span>);</span><br><span class="line">System.out.println(plusLocalDate);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------</span></span><br><span class="line"><span class="comment">// 判断今天是否是你的生日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">birDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">nowDate1</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line"></span><br><span class="line"><span class="type">MonthDay</span> <span class="variable">birMd</span> <span class="operator">=</span> MonthDay.of(birDate.getMonthValue(), birDate.getDayOfMonth());</span><br><span class="line"><span class="type">MonthDay</span> <span class="variable">nowMd</span> <span class="operator">=</span> MonthDay.from(nowDate1);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;今天是你的生日吗? &quot;</span> + birMd.equals(nowMd));<span class="comment">//今天是你的生日吗?</span></span><br></pre></td></tr></table></figure><h2 id="4-6-LocalTime-时、分、秒"><a href="#4-6-LocalTime-时、分、秒" class="headerlink" title="4.6 LocalTime  时、分、秒"></a>4.6 LocalTime  时、分、秒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取本地时间的日历对象。(包含 时分秒)</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">nowTime</span> <span class="operator">=</span> LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">&quot;今天的时间:&quot;</span> + nowTime);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> nowTime.getHour();<span class="comment">//时</span></span><br><span class="line">System.out.println(<span class="string">&quot;hour: &quot;</span> + hour);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> nowTime.getMinute();<span class="comment">//分</span></span><br><span class="line">System.out.println(<span class="string">&quot;minute: &quot;</span> + minute);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> nowTime.getSecond();<span class="comment">//秒</span></span><br><span class="line">System.out.println(<span class="string">&quot;second:&quot;</span> + second);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">nano</span> <span class="operator">=</span> nowTime.getNano();<span class="comment">//纳秒</span></span><br><span class="line">System.out.println(<span class="string">&quot;nano:&quot;</span> + nano);</span><br><span class="line">System.out.println(<span class="string">&quot;------------------------------------&quot;</span>);</span><br><span class="line">System.out.println(LocalTime.of(<span class="number">8</span>, <span class="number">20</span>));<span class="comment">//时分</span></span><br><span class="line">System.out.println(LocalTime.of(<span class="number">8</span>, <span class="number">20</span>, <span class="number">30</span>));<span class="comment">//时分秒</span></span><br><span class="line">System.out.println(LocalTime.of(<span class="number">8</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">150</span>));<span class="comment">//时分秒纳秒</span></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">mTime</span> <span class="operator">=</span> LocalTime.of(<span class="number">8</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">150</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//is系列的方法</span></span><br><span class="line">System.out.println(nowTime.isBefore(mTime));</span><br><span class="line">System.out.println(nowTime.isAfter(mTime));</span><br><span class="line"></span><br><span class="line"><span class="comment">//with系列的方法，只能修改时、分、秒</span></span><br><span class="line">System.out.println(nowTime.withHour(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//plus系列的方法，只能修改时、分、秒</span></span><br><span class="line">System.out.println(nowTime.plusHours(<span class="number">10</span>));</span><br></pre></td></tr></table></figure><h2 id="4-7-LocalDateTime-年、月、日、时、分、秒"><a href="#4-7-LocalDateTime-年、月、日、时、分、秒" class="headerlink" title="4.7 LocalDateTime  年、月、日、时、分、秒"></a>4.7 LocalDateTime  年、月、日、时、分、秒</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前时间的的日历对象(包含年月日时分秒)</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">nowDateTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;今天是:&quot;</span> + nowDateTime);<span class="comment">//今天是：</span></span><br><span class="line">System.out.println(nowDateTime.getYear());<span class="comment">//年</span></span><br><span class="line">System.out.println(nowDateTime.getMonthValue());<span class="comment">//月</span></span><br><span class="line">System.out.println(nowDateTime.getDayOfMonth());<span class="comment">//日</span></span><br><span class="line">System.out.println(nowDateTime.getHour());<span class="comment">//时</span></span><br><span class="line">System.out.println(nowDateTime.getMinute());<span class="comment">//分</span></span><br><span class="line">System.out.println(nowDateTime.getSecond());<span class="comment">//秒</span></span><br><span class="line">System.out.println(nowDateTime.getNano());<span class="comment">//纳秒</span></span><br><span class="line"><span class="comment">// 日:当年的第几天</span></span><br><span class="line">System.out.println(<span class="string">&quot;dayofYear:&quot;</span> + nowDateTime.getDayOfYear());</span><br><span class="line"><span class="comment">//星期</span></span><br><span class="line">System.out.println(nowDateTime.getDayOfWeek());</span><br><span class="line">System.out.println(nowDateTime.getDayOfWeek().getValue());</span><br><span class="line"><span class="comment">//月份</span></span><br><span class="line">System.out.println(nowDateTime.getMonth());</span><br><span class="line">System.out.println(nowDateTime.getMonth().getValue());</span><br><span class="line"></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">ld</span> <span class="operator">=</span> nowDateTime.toLocalDate();</span><br><span class="line">System.out.println(ld);</span><br><span class="line"></span><br><span class="line"><span class="type">LocalTime</span> <span class="variable">lt</span> <span class="operator">=</span> nowDateTime.toLocalTime();</span><br><span class="line">System.out.println(lt.getHour());</span><br><span class="line">System.out.println(lt.getMinute());</span><br><span class="line">System.out.println(lt.getSecond());</span><br></pre></td></tr></table></figure><h2 id="4-8-Duration-时间间隔（秒，纳，秒）"><a href="#4-8-Duration-时间间隔（秒，纳，秒）" class="headerlink" title="4.8 Duration  时间间隔（秒，纳，秒）"></a>4.8 Duration  时间间隔（秒，纳，秒）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地日期时间对象。</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">today</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(today);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出生的日期时间对象</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(birthDate);</span><br><span class="line"></span><br><span class="line"><span class="type">Duration</span> <span class="variable">duration</span> <span class="operator">=</span> Duration.between(birthDate, today);<span class="comment">//第二个参数减第一个参数</span></span><br><span class="line">System.out.println(<span class="string">&quot;相差的时间间隔对象:&quot;</span> + duration);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;============================================&quot;</span>);</span><br><span class="line">System.out.println(duration.toDays());<span class="comment">//两个时间差的天数</span></span><br><span class="line">System.out.println(duration.toHours());<span class="comment">//两个时间差的小时数</span></span><br><span class="line">System.out.println(duration.toMinutes());<span class="comment">//两个时间差的分钟数</span></span><br><span class="line">System.out.println(duration.toMillis());<span class="comment">//两个时间差的毫秒数</span></span><br><span class="line">System.out.println(duration.toNanos());<span class="comment">//两个时间差的纳秒数</span></span><br></pre></td></tr></table></figure><h2 id="4-9-Period-时间间隔（年，月，日）"><a href="#4-9-Period-时间间隔（年，月，日）" class="headerlink" title="4.9 Period  时间间隔（年，月，日）"></a>4.9 Period  时间间隔（年，月，日）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前本地 年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">today</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">System.out.println(today);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生日的 年月日</span></span><br><span class="line"><span class="type">LocalDate</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(birthDate);</span><br><span class="line"></span><br><span class="line"><span class="type">Period</span> <span class="variable">period</span> <span class="operator">=</span> Period.between(birthDate, today);<span class="comment">//第二个参数减第一个参数</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;相差的时间间隔对象:&quot;</span> + period);</span><br><span class="line">System.out.println(period.getYears());</span><br><span class="line">System.out.println(period.getMonths());</span><br><span class="line">System.out.println(period.getDays());</span><br><span class="line"></span><br><span class="line">System.out.println(period.toTotalMonths());</span><br></pre></td></tr></table></figure><h2 id="4-10-ChronoUnit-时间间隔（所有单位）"><a href="#4-10-ChronoUnit-时间间隔（所有单位）" class="headerlink" title="4.10 ChronoUnit  时间间隔（所有单位）"></a>4.10 ChronoUnit  时间间隔（所有单位）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">today</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">System.out.println(today);</span><br><span class="line"><span class="comment">// 生日时间</span></span><br><span class="line"><span class="type">LocalDateTime</span> <span class="variable">birthDate</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>,<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">System.out.println(birthDate);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;相差的年数:&quot;</span> + ChronoUnit.YEARS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的月数:&quot;</span> + ChronoUnit.MONTHS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的周数:&quot;</span> + ChronoUnit.WEEKS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的天数:&quot;</span> + ChronoUnit.DAYS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的时数:&quot;</span> + ChronoUnit.HOURS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的分数:&quot;</span> + ChronoUnit.MINUTES.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的秒数:&quot;</span> + ChronoUnit.SECONDS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的毫秒数:&quot;</span> + ChronoUnit.MILLIS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的微秒数:&quot;</span> + ChronoUnit.MICROS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的纳秒数:&quot;</span> + ChronoUnit.NANOS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的半天数:&quot;</span> + ChronoUnit.HALF_DAYS.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的十年数:&quot;</span> + ChronoUnit.DECADES.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的世纪(百年)数:&quot;</span> + ChronoUnit.CENTURIES.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的千年数:&quot;</span> + ChronoUnit.MILLENNIA.between(birthDate, today));</span><br><span class="line">System.out.println(<span class="string">&quot;相差的纪元数:&quot;</span> + ChronoUnit.ERAS.between(birthDate, today));</span><br></pre></td></tr></table></figure><h1 id="第五章-包装类"><a href="#第五章-包装类" class="headerlink" title="第五章  包装类"></a>第五章  包装类</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><p>Java提供了两个类型系统，基本类型与引用类型，使用基本类型在于效率，然而很多情况，会创建对象使用，因为对象可以做更多的功能，如果想要我们的基本类型像对象一样操作，就可以使用基本类型对应的包装类，如下：</p><table><thead><tr><th>基本类型</th><th>对应的包装类（位于java.lang包中）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td><strong>Character</strong></td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h2 id="5-2-Integer类"><a href="#5-2-Integer类" class="headerlink" title="5.2 Integer类"></a>5.2 Integer类</h2><ul><li><p>Integer类概述</p><p>包装一个对象中的原始类型 int 的值</p></li><li><p>Integer类构造方法及静态方法</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Integer(int   value)</td><td>根据 int 值创建 Integer 对象(过时)</td></tr><tr><td>public Integer(String s)</td><td>根据 String 值创建 Integer 对象(过时)</td></tr><tr><td>public static Integer valueOf(int i)</td><td>返回表示指定的 int 值的 Integer   实例</td></tr><tr><td>public static Integer valueOf(String s)</td><td>返回保存指定String值的 Integer 对象</td></tr><tr><td>static string tobinarystring(int i)</td><td>得到二进制</td></tr><tr><td>static string tooctalstring(int i)</td><td>得到八进制</td></tr><tr><td>static string toHexstring(int i)</td><td>得到十六进制</td></tr><tr><td>static int parseInt(string s)</td><td>将字符串类型的整数转成int类型的整数</td></tr></tbody></table><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//public Integer(int value)：根据 int 值创建 Integer 对象(过时)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">100</span>);</span><br><span class="line">System.out.println(i1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public Integer(String s)：根据 String 值创建 Integer 对象(过时)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;100&quot;</span>);</span><br><span class="line"><span class="comment">//Integer i2 = new Integer(&quot;abc&quot;); //NumberFormatException</span></span><br><span class="line">System.out.println(i2);</span><br><span class="line">System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public static Integer valueOf(int i)：返回表示指定的 int 值的 Integer 实例</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">System.out.println(i3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//public static Integer valueOf(String s)：返回保存指定String值的Integer对象 </span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">System.out.println(i4);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static string tobinarystring(int i) 得到二进制</span></span><br><span class="line"><span class="comment">            public static string tooctalstring(int i) 得到八进制</span></span><br><span class="line"><span class="comment">            public static string toHexstring(int i) 得到十六进制</span></span><br><span class="line"><span class="comment">            public static int parseInt(string s) 将字符串类型的整数转成int类型的整数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.把整数转成二进制，十六进制</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">100</span>);</span><br><span class="line">System.out.println(str1);<span class="comment">//1100100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.把整数转成八进制</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> Integer.toOctalString(<span class="number">100</span>);</span><br><span class="line">System.out.println(str2);<span class="comment">//144</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.把整数转成十六进制</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str3</span> <span class="operator">=</span> Integer.toHexString(<span class="number">100</span>);</span><br><span class="line">System.out.println(str3);<span class="comment">//64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.将字符串类型的整数转成int类型的整数</span></span><br><span class="line"><span class="comment">//强类型语言:每种数据在java中都有各自的数据类型</span></span><br><span class="line"><span class="comment">//在计算的时候，如果不是同一种数据类型，是无法直接计算的。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(i);</span><br><span class="line">System.out.println(i + <span class="number">1</span>);<span class="comment">//124</span></span><br><span class="line"><span class="comment">//细节1:</span></span><br><span class="line"><span class="comment">//在类型转换的时候，括号中的参数只能是数字不能是其他，否则代码会报错</span></span><br><span class="line"><span class="comment">//细节2:</span></span><br><span class="line"><span class="comment">//8种包装类当中，除了Character都有对应的parseXxx的方法，进行类型转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;true&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> Boolean.parseBoolean(str);</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure><h2 id="5-3-装箱与拆箱"><a href="#5-3-装箱与拆箱" class="headerlink" title="5.3 装箱与拆箱"></a>5.3 装箱与拆箱</h2><p>基本类型与对应的包装类对象之间，来回转换的过程称为”装箱“与”拆箱“：</p><ul><li><strong>装箱</strong>：从基本类型转换为对应的包装类对象。</li><li><strong>拆箱</strong>：从包装类对象转换为对应的基本类型。</li></ul><p>用Integer与 int为例：（看懂代码即可）</p><p>基本数值—-&gt;包装对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">iii</span> <span class="operator">=</span> Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br></pre></td></tr></table></figure><p>包装对象—-&gt;基本数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> i.intValue();</span><br></pre></td></tr></table></figure><h2 id="5-4-自动装箱与自动拆箱"><a href="#5-4-自动装箱与自动拆箱" class="headerlink" title="5.4 自动装箱与自动拆箱"></a>5.4 自动装箱与自动拆箱</h2><p>由于我们经常要做基本类型与包装类之间的转换，从Java 5（JDK 1.5）开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>;<span class="comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span></span><br><span class="line">i = i + <span class="number">5</span>;<span class="comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span></span><br><span class="line"><span class="comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span></span><br></pre></td></tr></table></figure><h2 id="5-5-基本类型与字符串之间的转换"><a href="#5-5-基本类型与字符串之间的转换" class="headerlink" title="5.5 基本类型与字符串之间的转换"></a>5.5 基本类型与字符串之间的转换</h2><h3 id="基本类型转换为String"><a href="#基本类型转换为String" class="headerlink" title="基本类型转换为String"></a>基本类型转换为String</h3><ul><li>转换方式</li><li>方式一：直接在数字后加一个空字符串</li><li>方式二：通过String类静态方法valueOf()</li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//int --- String</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//方式1</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> number + <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static String valueOf(int i)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> String.valueOf(number);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String转换成基本类型"><a href="#String转换成基本类型" class="headerlink" title="String转换成基本类型"></a>String转换成基本类型</h3><p>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型：</p><ul><li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li><li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li><li><strong><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</strong></li><li><strong><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</strong></li><li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li><li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li></ul><p>代码使用（仅以Integer类的静态方法parseXxx为例）如：</p><ul><li>转换方式<ul><li>方式一：先将字符串数字转成Integer，再调用valueOf()方法</li><li>方式二：通过Integer静态方法parseInt()进行转换</li></ul></li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//String --- int</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;100&quot;</span>;</span><br><span class="line">        <span class="comment">//方式1：String --- Integer --- int</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> Integer.valueOf(s);</span><br><span class="line">        <span class="comment">//public int intValue()</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> i.intValue();</span><br><span class="line">        System.out.println(x);</span><br><span class="line">        <span class="comment">//方式2</span></span><br><span class="line">        <span class="comment">//public static int parseInt(String s)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line">        System.out.println(y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p></blockquote><h2 id="5-6-底层原理"><a href="#5-6-底层原理" class="headerlink" title="5.6 底层原理"></a>5.6 底层原理</h2><p>建议：获取Integer对象的时候不要自己new，而是采取直接赋值或者静态方法valueOf的方式</p><p>因为在实际开发中，-128~127之间的数据，用的比较多。如果每次使用都是new对象，那么太浪费内存了。</p><p>所以，提前把这个范围之内的每一个数据都创建好对象，如果要用到了不会创建新的，而是返回已经创建好的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.利用构造方法获取Integer的对象(JDK5以前的方式)</span></span><br><span class="line"><span class="comment">/*Integer i1 = new Integer(1);</span></span><br><span class="line"><span class="comment">        Integer i2 = new Integer(&quot;1&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(i1);</span></span><br><span class="line"><span class="comment">        System.out.println(i2);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.利用静态方法获取Integer的对象(JDK5以前的方式)</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf(<span class="number">123</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i5</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;123&quot;</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(i3);</span><br><span class="line">System.out.println(i4);</span><br><span class="line">System.out.println(i5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.这两种方式获取对象的区别(掌握)</span></span><br><span class="line"><span class="comment">//底层原理：</span></span><br><span class="line"><span class="comment">//因为在实际开发中，-128~127之间的数据，用的比较多。</span></span><br><span class="line"><span class="comment">//如果每次使用都是new对象，那么太浪费内存了</span></span><br><span class="line"><span class="comment">//所以，提前把这个范围之内的每一个数据都创建好对象</span></span><br><span class="line"><span class="comment">//如果要用到了不会创建新的，而是返回已经创建好的对象。</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i6</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i7</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">System.out.println(i6 == i7);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="type">Integer</span> <span class="variable">i8</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line"><span class="type">Integer</span> <span class="variable">i9</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line">System.out.println(i8 == i9);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为看到了new关键字，在Java中，每一次new都是创建了一个新的对象</span></span><br><span class="line"><span class="comment">//所以下面的两个对象都是new出来，地址值不一样。</span></span><br><span class="line"><span class="comment">/*Integer i10 = new Integer(127);</span></span><br><span class="line"><span class="comment">        Integer i11 = new Integer(127);</span></span><br><span class="line"><span class="comment">        System.out.println(i10 == i11);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Integer i12 = new Integer(128);</span></span><br><span class="line"><span class="comment">        Integer i13 = new Integer(128);</span></span><br><span class="line"><span class="comment">        System.out.println(i12 == i13);*/</span></span><br></pre></td></tr></table></figure><h1 id="第六章：算法小题"><a href="#第六章：算法小题" class="headerlink" title="第六章：算法小题"></a>第六章：算法小题</h1><h2 id="练习一："><a href="#练习一：" class="headerlink" title="练习一："></a>练习一：</h2><p>需求：</p><p>​键盘录入一些1~10日之间的整数，并添加到集合中。直到集合中所有数据和超过200为止。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            键盘录入一些1~10日之间的整数，并添加到集合中。直到集合中所有数据和超过200为止。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//1.创建一个集合用来添加整数</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//2.键盘录入数据添加到集合中</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">numStr</span> <span class="operator">=</span> sc.nextLine();</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(numStr);<span class="comment">//先把异常数据先进行过滤</span></span><br><span class="line">            <span class="keyword">if</span> (num &lt; <span class="number">1</span> || num &gt; <span class="number">100</span>)&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;当前数字不在1~100的范围当中，请重新输入&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//添加到集合中//细节:</span></span><br><span class="line">            <span class="comment">//num:基本数据类型</span></span><br><span class="line">            <span class="comment">//集合里面的数据是Integer</span></span><br><span class="line">            <span class="comment">//在添加数据的时候触发了自动装箱</span></span><br><span class="line">            list.add(num);</span><br><span class="line">            <span class="comment">//统计集合中所有的数据和</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> getSum(list);</span><br><span class="line">            <span class="comment">//对sum进行判断</span></span><br><span class="line">            <span class="keyword">if</span>(sum &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;集合中所有的数据和已经满足要求&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(ArrayList&lt;Integer&gt; list)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            <span class="comment">//i :索引</span></span><br><span class="line">            <span class="comment">//list.get(i);</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            sum = sum + num;<span class="comment">//+=</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习二："><a href="#练习二：" class="headerlink" title="练习二："></a>练习二：</h2><p>需求：</p><p>​自己实现parseInt方法的效果，将字符串形式的数据转成整数。要求:字符串中只能是数字不能有其他字符最少一位，最多10位日不能开头</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            自己实现parseInt方法的效果，将字符串形式的数据转成整数。要求:</span></span><br><span class="line"><span class="comment">            字符串中只能是数字不能有其他字符最少一位，最多10位日不能开头</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="comment">//2.校验字符串</span></span><br><span class="line">        <span class="comment">//习惯:会先把异常数据进行过滤，剩下来就是正常的数据。</span></span><br><span class="line">        <span class="keyword">if</span> (!str.matches(<span class="string">&quot;[1-9]\\d&#123;0,9&#125;&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//错误的数据</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据格式有误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//正确的数据</span></span><br><span class="line">            System.out.println(<span class="string">&quot;数据格式正确&quot;</span>);</span><br><span class="line">            <span class="comment">//3.定义一个变量表示最终的结果</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="comment">//4.遍历字符串得到里面的每一个字符</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i) - <span class="string">&#x27;0&#x27;</span>;<span class="comment">//把每一位数字放到number当中</span></span><br><span class="line">                number = number * <span class="number">10</span> + c;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(number);</span><br><span class="line">            System.out.println(number + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习三："><a href="#练习三：" class="headerlink" title="练习三："></a>练习三：</h2><p>需求：</p><p>​定义一个方法自己实现toBinaryString方法的效果，将一个十进制整数转成字符串表示的二进制</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a04test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            定义一个方法自己实现toBinaryString方法的效果，将一个十进制整数转成字符串表示的二进制</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">tobinarystring</span><span class="params">(<span class="type">int</span> number)</span> &#123;<span class="comment">//6</span></span><br><span class="line">        <span class="comment">//核心逻辑:</span></span><br><span class="line">        <span class="comment">//不断的去除以2，得到余数，一直到商为日就结束。</span></span><br><span class="line">        <span class="comment">//还需要把余数倒着拼接起来</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个StringBuilder用来拼接余数</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">//利用循环不断的除以2获取余数</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取余数 %</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">remaindar</span> <span class="operator">=</span> number % <span class="number">2</span>;<span class="comment">//倒着拼接</span></span><br><span class="line">            sb.insert(<span class="number">0</span>, remaindar);</span><br><span class="line">            <span class="comment">//除以2 /</span></span><br><span class="line">            number = number / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="练习四："><a href="#练习四：" class="headerlink" title="练习四："></a>练习四：</h2><p>需求：</p><p>​请使用代码实现计算你活了多少天，用JDK7和JDK8两种方式完成</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="comment">//请使用代码实现计算你活了多少天，用JDK7和JDK8两种方式完成</span></span><br><span class="line">        <span class="comment">//JDK7</span></span><br><span class="line">        <span class="comment">//规则:只要对时间进行计算或者判断，都需要先获取当前时间的毫秒值</span></span><br><span class="line">        <span class="comment">//1.计算出生年月日的毫秒值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;2000年1月1日&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy年MM月dd日&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(birthday);</span><br><span class="line">        <span class="type">long</span> <span class="variable">birthdayTime</span> <span class="operator">=</span> date.getTime();</span><br><span class="line">        <span class="comment">//2.获取当前时间的毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">todayTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//3.计算间隔多少天</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> todayTime - birthdayTime;</span><br><span class="line">        System.out.println(time / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//JDK8</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld1</span> <span class="operator">=</span> LocalDate.of(<span class="number">2000</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> LocalDate.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">days</span> <span class="operator">=</span> ChronoUnit.DAYS.between(ld1, ld2);</span><br><span class="line">        System.out.println(days);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习五："><a href="#练习五：" class="headerlink" title="练习五："></a>练习五：</h2><p>需求：</p><p>​判断任意的一个年份是闰年还是平年要求:用JDK7和JDK8两种方式判断提示:二月有29天是闰年一年有366天是闰年</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            判断任意的一个年份是闰年还是平年要求:用JDK7和JDK8两种方式判断提示:</span></span><br><span class="line"><span class="comment">            二月有29天是闰年一年有366天是闰年</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk7</span></span><br><span class="line">        <span class="comment">//我们可以把时间设置为2000年3月1日</span></span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">c</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        c.set(<span class="number">2000</span>, <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//月份的范围:0~11</span></span><br><span class="line">        <span class="comment">//再把日历往前减一天</span></span><br><span class="line">        c.add(Calendar.DAY_OF_MONTH, -<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//看当前的时间是28号还是29号?</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> c.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">        System.out.println(day);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//jdk8</span></span><br><span class="line">        <span class="comment">//月份的范围:1~12</span></span><br><span class="line">        <span class="comment">//设定时间为2000年的3月1日</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld</span> <span class="operator">=</span> LocalDate.of(<span class="number">2001</span>, <span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//把时间往前减一天</span></span><br><span class="line">        <span class="type">LocalDate</span> <span class="variable">ld2</span> <span class="operator">=</span> ld.minusDays(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//获取这一天是一个月中的几号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">day2</span> <span class="operator">=</span> ld2.getDayOfMonth();</span><br><span class="line">        System.out.println(day2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//true:闰年</span></span><br><span class="line">        <span class="comment">//false:平年</span></span><br><span class="line">        System.out.println(ld.isLeapYear());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新年快乐</title>
      <link href="/2023/01/22/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
      <url>/2023/01/22/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
      
        <content type="html"><![CDATA[<h1 id="新年快乐！！！"><a href="#新年快乐！！！" class="headerlink" title="新年快乐！！！"></a>新年快乐！！！</h1><h2 id="祝我们在新的一年里越来越好！！"><a href="#祝我们在新的一年里越来越好！！" class="headerlink" title="祝我们在新的一年里越来越好！！"></a>祝我们在新的一年里越来越好！！</h2><p><img src="https://pic.imgdb.cn/item/63cd1cfebe43e0d30ed92a03.jpg"><br><img src="https://pic.imgdb.cn/item/63cd1d02be43e0d30ed93105.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Api</title>
      <link href="/2023/01/20/API/"/>
      <url>/2023/01/20/API/</url>
      
        <content type="html"><![CDATA[<h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><p>能够熟练使用Math类中的常见方法</p><p>能够熟练使用System类中的常见方法</p><p>能够理解Object类的常见方法作用</p><p>能够熟练使用Objects类的常见方法</p><p>能够熟练使用BigInteger类的常见方法</p><p>能够熟练使用BigDecimal类的常见方法</p><h1 id="1-Math类"><a href="#1-Math类" class="headerlink" title="1 Math类"></a>1 Math类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><blockquote><p>tips：了解内容</p></blockquote><p>查看API文档，我们可以看到API文档中关于Math类的定义如下：</p><p> <img src="/.%5Cassets%5C1576047659085.png" alt="1576047659085"> </p><p>Math类所在包为java.lang包，因此在使用的时候不需要进行导包。并且Math类被final修饰了，因此该类是不能被继承的。</p><p>Math类包含执行基本数字运算的方法，我们可以使用Math类完成基本的数学运算。</p><p>要想使用Math类我们就需要先创建该类的对象，那么创建对象就需要借助于构造方法。因此我们就需要首先查看一下API文档，看看API文档中针对Math类有没有提供对应的构造方法。通过API文档来查看</p><p>一下Math类的成员，如下所示：</p><p><img src="/.%5Cassets%5C1576047846672.png" alt="1576047846672"> </p><p>在API文档中没有体现可用的构造方法，因此我们就不能直接通过new关键字去创建Math类的对象。同时我们发现Math类中的方法都是静态的，因此在使用的时候我们可以直接通过类名去调用。在Math类中</p><p>定义了很多数学运算的方法，但是我们并不可能将所有的方法学习一遍，我们主要学习的就是一些常见的方法。</p><h2 id="1-2-常见方法"><a href="#1-2-常见方法" class="headerlink" title="1.2 常见方法"></a>1.2 常见方法</h2><blockquote><p>tips：重点讲解内容</p></blockquote><p><font color="red" size="3"><strong>常见方法介绍</strong></font></p><p>我们要学习的Math的常见方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">abs</span><span class="params">(<span class="type">int</span> a)</span><span class="comment">// 返回参数的绝对值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">ceil</span><span class="params">(<span class="type">double</span> a)</span><span class="comment">// 返回大于或等于参数的最小整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">floor</span><span class="params">(<span class="type">double</span> a)</span><span class="comment">// 返回小于或等于参数的最大整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">round</span><span class="params">(<span class="type">float</span> a)</span><span class="comment">// 按照四舍五入返回最接近参数的int类型的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">// 获取两个int值中的较大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span><span class="comment">// 获取两个int值中的较小值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">pow</span> <span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span><span class="comment">// 计算a的b次幂的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">random</span><span class="params">()</span><span class="comment">// 返回一个[0.0,1.0)的随机值</span></span><br></pre></td></tr></table></figure><p><font color="red" size="3"><strong>案例演示</strong></font></p><p>接下来我们就来演示一些这些方法的执行效果，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int abs(int a)         返回参数的绝对值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-2的绝对值为：&quot;</span> + Math.abs(-<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;2的绝对值为：&quot;</span> + Math.abs(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double ceil(double a)  返回大于或等于参数的最小整数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大于或等于23.45的最小整数位：&quot;</span> + Math.ceil(<span class="number">23.45</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;大于或等于-23.45的最小整数位：&quot;</span> + Math.ceil(-<span class="number">23.45</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double floor(double a) 返回小于或等于参数的最大整数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;小于或等于23.45的最大整数位：&quot;</span> + Math.floor(<span class="number">23.45</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;小于或等于-23.45的最大整数位：&quot;</span> + Math.floor(-<span class="number">23.45</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int round(float a)     按照四舍五入返回最接近参数的int</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23.45四舍五入的结果为：&quot;</span> + Math.round(<span class="number">23.45</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;23.55四舍五入的结果为：&quot;</span> + Math.round(<span class="number">23.55</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int max(int a,int b)   返回两个int值中的较大值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23和45的最大值为: &quot;</span> + Math.max(<span class="number">23</span>, <span class="number">45</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static int min(int a,int b)   返回两个int值中的较小值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;12和34的最小值为: &quot;</span> + Math.min(<span class="number">12</span> , <span class="number">34</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double pow (double a,double b)返回a的b次幂的值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2的3次幂计算结果为: &quot;</span> + Math.pow(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public static double random()返回值为double的正值，[0.0,1.0)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;获取到的0-1之间的随机数为: &quot;</span> + Math.random());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">2</span>的绝对值为：<span class="number">2</span></span><br><span class="line"><span class="number">2</span>的绝对值为：<span class="number">2</span></span><br><span class="line">大于或等于<span class="number">23.45</span>的最小整数位：<span class="number">24.0</span></span><br><span class="line">大于或等于-<span class="number">23.45</span>的最小整数位：-<span class="number">23.0</span></span><br><span class="line">小于或等于<span class="number">23.45</span>的最大整数位：<span class="number">23.0</span></span><br><span class="line">小于或等于-<span class="number">23.45</span>的最大整数位：-<span class="number">24.0</span></span><br><span class="line"><span class="number">23.45</span>四舍五入的结果为：<span class="number">23</span></span><br><span class="line"><span class="number">23.55</span>四舍五入的结果为：<span class="number">24</span></span><br><span class="line"><span class="number">23</span>和<span class="number">45</span>的最大值为: <span class="number">45</span></span><br><span class="line"><span class="number">12</span>和<span class="number">34</span>的最小值为: <span class="number">12</span></span><br><span class="line"><span class="number">2</span>的<span class="number">3</span>次幂计算结果为: <span class="number">8.0</span></span><br><span class="line">获取到的<span class="number">0</span>-<span class="number">1</span>之间的随机数为: <span class="number">0.7322484131745958</span></span><br></pre></td></tr></table></figure><h2 id="1-3-算法小题-质数"><a href="#1-3-算法小题-质数" class="headerlink" title="1.3 算法小题(质数)"></a>1.3 算法小题(质数)</h2><p>需求：</p><p>​判断一个数是否为一个质数</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MathDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断一个数是否为一个质数</span></span><br><span class="line">        System.out.println(isPrime(<span class="number">997</span>));</span><br><span class="line">        <span class="comment">//997 2~996 995次</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= Math.sqrt(number); i++) &#123;</span><br><span class="line">            count++;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-算法小题-自幂数"><a href="#1-4-算法小题-自幂数" class="headerlink" title="1.4 算法小题(自幂数)"></a>1.4 算法小题(自幂数)</h2><p>自幂数，一个n位自然数等于自身各个数位上数字的n次幂之和</p><p>​举例1：三位数  1^3 + 5^3 + 3^3 &#x3D; 153  </p><p>​举例2：四位数  1^4 + 6^4 + 3^4 + 4^3 &#x3D; 1634</p><p>如果自幂数是：</p><ul><li>一位自幂数，也叫做：独身数</li><li>三位自幂数：水仙花数  四位自幂数：四叶玫瑰数</li><li>五位自幂数：五角星数  六位自幂数：六合数</li><li>七位自幂数：北斗七星数  八位自幂数：八仙数</li><li>九位自幂数：九九重阳数  十位自幂数：十全十美数</li></ul><p>要求1：统计一共有多少个水仙花数。</p><p>要求2：（课后作业）证明没有两位的自幂数。</p><p>要求3：（课后作业）分别统计有多少个四叶玫瑰数和五角星数。（答案：都是3个）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//水仙花数:100 ~ 999</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//得到每一个三位数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//个位 十位 百位</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> i % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">shi</span> <span class="operator">=</span> i / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">bai</span> <span class="operator">=</span> i / <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//判断:</span></span><br><span class="line">    <span class="comment">//每一位的三次方之和 跟本身 进行比较。</span></span><br><span class="line">    <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> Math.pow(ge, <span class="number">3</span>) + Math.pow(shi, <span class="number">3</span>) + Math.pow(bai, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (sum == i) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//System.out.println(i);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-课后练习"><a href="#1-5-课后练习" class="headerlink" title="1.5 课后练习"></a>1.5 课后练习</h2><p>要求2：（课后作业）证明没有两位的自幂数。</p><p>要求3：（课后作业）分别统计有多少个四叶玫瑰数和五角星数。（答案：都是3个）</p><h1 id="2-System类"><a href="#2-System类" class="headerlink" title="2 System类"></a>2 System类</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><blockquote><p>tips：了解内容</p></blockquote><p>查看API文档，我们可以看到API文档中关于System类的定义如下：</p><p> <img src="/assets/1576049347968.png" alt="1576049347968"> </p><p>System类所在包为java.lang包，因此在使用的时候不需要进行导包。并且System类被final修饰了，因此该类是不能被继承的。</p><p>System包含了系统操作的一些常用的方法。比如获取当前时间所对应的毫秒值，再比如终止当前JVM等等。</p><p>要想使用System类我们就需要先创建该类的对象，那么创建对象就需要借助于构造方法。因此我们就需要首先查看一下API文档，看看API文档中针对System类有没有提供对应的构造方法。通过API文档来</p><p>查看一下System类的成员，如下所示：</p><p><img src="/assets/1576049535584.png" alt="1576049535584"> </p><p>在API文档中没有体现可用的构造方法，因此我们就不能直接通过new关键字去创建System类的对象。同时我们发现System类中的方法都是静态的，因此在使用的时候我们可以直接通过类名去调用（Nested </p><p>Class Summary内部类或者内部接口的描述）。</p><h2 id="2-2-常见方法"><a href="#2-2-常见方法" class="headerlink" title="2.2 常见方法"></a>2.2 常见方法</h2><blockquote><p>tips：重点讲解内容</p></blockquote><p><font color="red" size="3"><strong>常见方法介绍</strong></font></p><p>我们要学习的System类中的常见方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span><span class="comment">// 获取当前时间所对应的毫秒值（当前时间为0时区所对应的时间即就是英国格林尼治天文台旧址所在位置）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span><span class="comment">// 终止当前正在运行的Java虚拟机，0表示正常退出，非零表示异常退出</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span>; <span class="comment">// 进行数值元素copy</span></span><br></pre></td></tr></table></figure><p><font color="red" size="3"><strong>案例演示</strong></font></p><p>接下来我们就来通过一些案例演示一下这些方法的特点。</p><p><font color="blue" size="2"><strong>案例1</strong></font>：演示currentTimeMillis方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前时间所对应的毫秒值</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">millis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间所对应的毫秒值为：&quot;</span> + millis);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台的输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前时间所对应的毫秒值为：<span class="number">1576050298343</span></span><br></pre></td></tr></table></figure><p>获取到当前时间的毫秒值的意义：我们常常来需要统计某一段代码的执行时间。此时我们就可以在执行这段代码之前获取一次时间，在执行完毕以后再次获取一次系统时间，然后计算两个时间的差值，</p><p>这个差值就是这段代码执行完毕以后所需要的时间。如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//判断1~100000之间有多少个质数</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> isPrime2(i);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//获取程序运行的总时间</span></span><br><span class="line">        System.out.println(end - start); <span class="comment">//方式一：1514 毫秒  方式二：71毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//以前判断是否为质数的方式</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime1</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改进之后判断是否为质数的方式（效率高）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPrime2</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= Math.sqrt(number); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (number % i == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="blue" size="2"><strong>案例2</strong></font>：演示exit方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;程序开始执行了.....&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 终止JVM</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(<span class="string">&quot;程序终止了..........&quot;</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程序开始执行了.....</span><br></pre></td></tr></table></figure><p>此时可以看到在控制台只输出了”程序开始了…”，由于JVM终止了，因此输出”程序终止了…”这段代码没有被执行。</p><p><font color="blue" size="2"><strong>案例3</strong></font>：演示arraycopy方法</p><p>方法参数说明：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src:  源数组</span></span><br><span class="line"><span class="comment">// srcPos：  源数值的开始位置</span></span><br><span class="line"><span class="comment">// dest：    目标数组</span></span><br><span class="line"><span class="comment">// destPos： 目标数组开始位置</span></span><br><span class="line"><span class="comment">// length:   要复制的元素个数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object src,  <span class="type">int</span>  srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span>; </span><br></pre></td></tr></table></figure><p>代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义源数组</span></span><br><span class="line">        <span class="type">int</span>[] srcArray = &#123;<span class="number">23</span> , <span class="number">45</span> , <span class="number">67</span> , <span class="number">89</span> , <span class="number">14</span> , <span class="number">56</span> &#125; ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义目标数组</span></span><br><span class="line">        <span class="type">int</span>[] desArray = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>] ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行数组元素的copy: 把srcArray数组中从0索引开始的3个元素，从desArray数组中的1索引开始复制过去</span></span><br><span class="line">        System.arraycopy(srcArray , <span class="number">0</span> , desArray , <span class="number">1</span> , <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历目标数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; desArray.length ; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x != desArray.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(desArray[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(desArray[x]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>通过控制台输出结果我们可以看到，数组元素的确进行复制了。</p><p>使用这个方法我们也可以完成数组元素的删除操作，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个数组</span></span><br><span class="line">        <span class="type">int</span>[] srcArray = &#123;<span class="number">23</span> , <span class="number">45</span> , <span class="number">67</span> , <span class="number">89</span> , <span class="number">14</span> , <span class="number">56</span> &#125; ;</span><br><span class="line">        <span class="comment">// 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可</span></span><br><span class="line">        System.arraycopy(srcArray , <span class="number">3</span> , srcArray , <span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 遍历srcArray数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; srcArray.length ; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x != desArray.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(srcArray[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(srcArray[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台的输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span>, <span class="number">45</span>, <span class="number">89</span>, <span class="number">14</span>, <span class="number">56</span>, <span class="number">56</span> </span><br></pre></td></tr></table></figure><p>通过控制台输出结果我们可以看到此时多出了一个56元素，此时我们只需要将最后一个位置设置为0即可。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义一个数组</span></span><br><span class="line">        <span class="type">int</span>[] srcArray = &#123;<span class="number">23</span> , <span class="number">45</span> , <span class="number">67</span> , <span class="number">89</span> , <span class="number">14</span> , <span class="number">56</span> &#125; ;</span><br><span class="line">        <span class="comment">// 删除数组中第3个元素(67)：要删除67这个元素，我们只需要将67后面的其他元素依次向前进行移动即可</span></span><br><span class="line">        System.arraycopy(srcArray , <span class="number">3</span> , srcArray , <span class="number">2</span> , <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 将最后一个位置的元素设置为0</span></span><br><span class="line">        srcArray[srcArray.length - <span class="number">1</span>] = <span class="number">0</span> ;</span><br><span class="line">        <span class="comment">// 遍历srcArray数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span> ; x &lt; srcArray.length ; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(x != srcArray.length - <span class="number">1</span> ) &#123;</span><br><span class="line">                System.out.print(srcArray[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(srcArray[x]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">23</span>, <span class="number">45</span>, <span class="number">89</span>, <span class="number">14</span>, <span class="number">56</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure><p>此时我们可以看到元素”67”已经被删除掉了。67后面的其他元素依次向前进行移动了一位。</p><p><strong>arraycopy方法底层细节：</strong></p><p>1.如果数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错</p><p>2.在拷贝的时候需要考虑数组的长度，如果超出范围也会报错</p><p>3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public static void arraycopy(数据源数组，起始索引，目的地数组，起始索引，拷贝个数) 数组拷贝</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//1.如果数据源数组和目的地数组都是基本数据类型，那么两者的类型必须保持一致，否则会报错</span></span><br><span class="line">        <span class="comment">//2.在拷贝的时候需要考虑数组的长度，如果超出范围也会报错</span></span><br><span class="line">        <span class="comment">//3.如果数据源数组和目的地数组都是引用数据类型，那么子类类型可以赋值给父类类型</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;lisi&quot;</span>, <span class="number">24</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;wangwu&quot;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">        Student[] arr1 = &#123;s1, s2, s3&#125;;</span><br><span class="line">        Person[] arr2 = <span class="keyword">new</span> <span class="title class_">Person</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="comment">//把arr1中对象的地址值赋值给arr2中</span></span><br><span class="line">        System.arraycopy(arr1, <span class="number">0</span>, arr2, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历数组arr2</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class="line">            <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> (Student) arr2[i];</span><br><span class="line">            System.out.println(stu.getName() + <span class="string">&quot;,&quot;</span> + stu.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Runtime"><a href="#3-Runtime" class="headerlink" title="3 Runtime"></a>3 Runtime</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><p>​Runtime表示Java中运行时对象，可以获取到程序运行时设计到的一些信息</p><h2 id="3-2-常见方法"><a href="#3-2-常见方法" class="headerlink" title="3.2 常见方法"></a>3.2 常见方法</h2><p><font color="red" size="3"><strong>常见方法介绍</strong></font></p><p>我们要学习的Object类中的常见方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span><span class="comment">//当前系统的运行环境对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exit</span><span class="params">(<span class="type">int</span> status)</span><span class="comment">//停止虚拟机</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">availableProcessors</span><span class="params">()</span><span class="comment">//获得CPU的线程数</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxMemory</span><span class="params">()</span>    <span class="comment">//JVM能从系统中获取总内存大小（单位byte）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">totalMemory</span><span class="params">()</span><span class="comment">//JVM已经从系统中获取总内存大小（单位byte）</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">long</span> <span class="title function_">freeMemory</span><span class="params">()</span><span class="comment">//JVM剩余内存大小（单位byte）</span></span><br><span class="line"><span class="keyword">public</span> Process <span class="title function_">exec</span><span class="params">(String command)</span> <span class="comment">//运行cmd命令</span></span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunTimeDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public static Runtime getRuntime() 当前系统的运行环境对象</span></span><br><span class="line"><span class="comment">            public void exit(int status) 停止虚拟机</span></span><br><span class="line"><span class="comment">            public int availableProcessors() 获得CPU的线程数</span></span><br><span class="line"><span class="comment">            public long maxMemory() JVM能从系统中获取总内存大小(单位byte)</span></span><br><span class="line"><span class="comment">            public long totalMemory() JVM已经从系统中获取总内存大小(单位byte)</span></span><br><span class="line"><span class="comment">            public long freeMemory() JVM剩余内存大小(单位byte)</span></span><br><span class="line"><span class="comment">            public Process exec(string command) 运行cmd命令</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取Runtime的对象</span></span><br><span class="line">        <span class="comment">//Runtime r1 =Runtime.getRuntime();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.exit 停止虚拟机</span></span><br><span class="line">        <span class="comment">//Runtime.getRuntime().exit(0);</span></span><br><span class="line">        <span class="comment">//System.out.println(&quot;看看我执行了吗?&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获得CPU的线程数</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().availableProcessors());<span class="comment">//8</span></span><br><span class="line">        <span class="comment">//4.总内存大小,单位byte字节</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().maxMemory() / <span class="number">1024</span> / <span class="number">1024</span>);<span class="comment">//4064</span></span><br><span class="line">        <span class="comment">//5.已经获取的总内存大小,单位byte字节</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().totalMemory() / <span class="number">1024</span> / <span class="number">1024</span>);<span class="comment">//254</span></span><br><span class="line">        <span class="comment">//6.剩余内存大小</span></span><br><span class="line">        System.out.println(Runtime.getRuntime().freeMemory() / <span class="number">1024</span> / <span class="number">1024</span>);<span class="comment">//251</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.运行cmd命令</span></span><br><span class="line">        <span class="comment">//shutdown :关机</span></span><br><span class="line">        <span class="comment">//加上参数才能执行</span></span><br><span class="line">        <span class="comment">//-s :默认在1分钟之后关机</span></span><br><span class="line">        <span class="comment">//-s -t 指定时间 : 指定关机时间</span></span><br><span class="line">        <span class="comment">//-a :取消关机操作</span></span><br><span class="line">        <span class="comment">//-r: 关机并重启</span></span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 3600&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3-恶搞好基友"><a href="#3-3-恶搞好基友" class="headerlink" title="3.3 恶搞好基友"></a>3.3 恶搞好基友</h2><p>需求：</p><p>​界面上方按钮默认隐藏</p><p>​界面中间有一个提示文本和三个按钮</p><p>​当你的好基友点击中间三个按钮的时候就在N秒之后关机，不同的按钮N的值不一样</p><p>​任意一个按钮被点击之后，上方了按钮出现。当点击上方按钮之后取消关机任务</p><p> <img src="/assets%5C%E6%81%B6%E6%90%9E%E5%A5%BD%E5%9F%BA%E5%8F%8B.png" alt="恶搞好基友"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyJframe</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyJframe</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">JButton</span> <span class="variable">yesBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;帅爆了&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">midBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;一般般吧&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">noBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;不帅，有点磕碜&quot;</span>);</span><br><span class="line">    <span class="type">JButton</span> <span class="variable">dadBut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;饶了我吧！&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//决定了上方的按钮是否展示</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyJframe</span><span class="params">()</span> &#123;</span><br><span class="line">        initJFrame();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        initView();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initView</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().removeAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//展示按钮</span></span><br><span class="line">            dadBut.setBounds(<span class="number">50</span>, <span class="number">20</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">            dadBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(dadBut);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">text</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(<span class="string">&quot;你觉得自己帅吗？&quot;</span>);</span><br><span class="line">        text.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;微软雅黑&quot;</span>, <span class="number">0</span>, <span class="number">30</span>));</span><br><span class="line">        text.setBounds(<span class="number">120</span>, <span class="number">150</span>, <span class="number">300</span>, <span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        yesBut.setBounds(<span class="number">200</span>, <span class="number">250</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">        midBut.setBounds(<span class="number">200</span>, <span class="number">325</span>, <span class="number">100</span>, <span class="number">30</span>);</span><br><span class="line">        noBut.setBounds(<span class="number">160</span>, <span class="number">400</span>, <span class="number">180</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        yesBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        midBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line">        noBut.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(text);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(yesBut);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(midBut);</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(noBut);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().repaint();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initJFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置宽高</span></span><br><span class="line">        <span class="built_in">this</span>.setSize(<span class="number">500</span>, <span class="number">600</span>);</span><br><span class="line">        <span class="comment">//设置标题</span></span><br><span class="line">        <span class="built_in">this</span>.setTitle(<span class="string">&quot;恶搞好基友&quot;</span>);</span><br><span class="line">        <span class="comment">//设置关闭模式</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//置顶</span></span><br><span class="line">        <span class="built_in">this</span>.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//居中</span></span><br><span class="line">        <span class="built_in">this</span>.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//取消内部默认布局</span></span><br><span class="line">        <span class="built_in">this</span>.setLayout(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> e.getSource();</span><br><span class="line">        <span class="keyword">if</span> (obj == yesBut) &#123;</span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，你太自信了，给你一点小惩罚&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 3600&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            initView();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj == midBut) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的好基友点击了一般般吧&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，你还是太自信了，也要给你一点小惩罚&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 7200&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            initView();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj == noBut) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的好基友点击了不帅&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，你还是有一点自知之明的，也要给你一点小惩罚&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -s -t 1800&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            initView();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj == dadBut) &#123;</span><br><span class="line">            <span class="comment">//给好基友一个弹框</span></span><br><span class="line">            showJDialog(<span class="string">&quot;xxx，这次就饶了你~&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runtime.getRuntime().exec(<span class="string">&quot;shutdown -a&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException ioException) &#123;</span><br><span class="line">                ioException.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showJDialog</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="comment">//创建一个弹框对象</span></span><br><span class="line">        <span class="type">JDialog</span> <span class="variable">jDialog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JDialog</span>();</span><br><span class="line">        <span class="comment">//给弹框设置大小</span></span><br><span class="line">        jDialog.setSize(<span class="number">200</span>, <span class="number">150</span>);</span><br><span class="line">        <span class="comment">//让弹框置顶</span></span><br><span class="line">        jDialog.setAlwaysOnTop(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//让弹框居中</span></span><br><span class="line">        jDialog.setLocationRelativeTo(<span class="literal">null</span>);</span><br><span class="line">        <span class="comment">//弹框不关闭永远无法操作下面的界面</span></span><br><span class="line">        jDialog.setModal(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Jlabel对象管理文字并添加到弹框当中</span></span><br><span class="line">        <span class="type">JLabel</span> <span class="variable">warning</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JLabel</span>(content);</span><br><span class="line">        warning.setBounds(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">150</span>);</span><br><span class="line">        jDialog.getContentPane().add(warning);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//让弹框展示出来</span></span><br><span class="line">        jDialog.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="4-Object类"><a href="#4-Object类" class="headerlink" title="4 Object类"></a>4 Object类</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><blockquote><p>tips：重点讲解内容</p></blockquote><p>查看API文档，我们可以看到API文档中关于Object类的定义如下：</p><p><img src="/assets/1576053677194.png" alt="1576053677194"> </p><p>Object类所在包是java.lang包。Object 是类层次结构的根，每个类都可以将 Object 作为超类。所有类都直接或者间接的继承自该类；换句话说，该类所具备的方法，其他所有类都继承了。</p><p>查看API文档我们可以看到，在Object类中提供了一个无参构造方法，如下所示：</p><p><img src="/assets/1576053871503.png" alt="1576053871503"> </p><p>但是一般情况下我们很少去主动的创建Object类的对象，调用其对应的方法。更多的是创建Object类的某个子类对象，然后通过子类对象调用Object类中的方法。</p><h2 id="4-2-常见方法"><a href="#4-2-常见方法" class="headerlink" title="4.2 常见方法"></a>4.2 常见方法</h2><blockquote><p>tips：重点讲解内容</p></blockquote><p><font color="red" size="3"><strong>常见方法介绍</strong></font></p><p>我们要学习的Object类中的常见方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span><span class="comment">//返回该对象的字符串表示形式(可以看做是对象的内存地址值)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span><span class="comment">//比较两个对象地址值是否相等；true表示相同，false表示不相同</span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span>    <span class="comment">//对象克隆</span></span><br></pre></td></tr></table></figure><p><font color="red" size="3"><strong>案例演示</strong></font></p><p>接下来我们就来通过一些案例演示一下这些方法的特点。</p><p><font color="blue" size="2"><strong>案例1</strong></font>：演示toString方法</p><p>实现步骤：</p><ol><li>创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get&#x2F;set方法</li><li>创建一个测试类（ObjectDemo01），在测试类的main方法中去创建学生对象，然后调用该对象的toString方法获取该对象的字符串表现形式，并将结果进行输出</li></ol><p>如下所示：</p><p>Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name ;       <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String age ;        <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参构造方法和有参构造方法以及get和set方法略</span></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObjectDemo01测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用toString方法获取s1对象的字符串表现形式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> s1.toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;s1对象的字符串表现形式为：&quot;</span> + result1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1对象的字符串表现形式为：com.itheima.api.system.demo04.Student@3f3afe78</span><br></pre></td></tr></table></figure><p>为什么控制台输出的结果为：com.itheima.api.system.demo04.Student@3f3afe78； 此时我们可以查看一下Object类中toString方法的源码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;<span class="comment">// Object类中toString方法的源码定义</span></span><br><span class="line"><span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中getClass().getName()对应的结果就是：com.itheima.api.system.demo04.Student；Integer.toHexString(hashCode())对应的结果就是3f3afe78。</p><p>我们常常将”com.itheima.api.system.demo04.Student@3f3afe78”这一部分称之为对象的内存地址值。但是一般情况下获取对象的内存地址值没有太大的意义。获取对象的成员变量的字符串拼接形式才</p><p>算有意义，怎么实现呢？此时我们就需要在Student类中重写Object的toString方法。我们可以通过idea开发工具进行实现，具体步骤如下所示：</p><ol><li>在空白处使用快捷键：alt + insert。此时会弹出如下的对话框</li></ol><p><img src="/assets/1576055135105.png" alt="1576055135105"> </p><ol start="2"><li>选择toString，此时会弹出如下的对话框</li></ol><p><img src="/assets/1576055198877.png" alt="1576055198877"> </p><p>同时选择name和age属性，点击OK。此时就会完成toString方法的重写，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">        <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">        <span class="string">&quot;, age=&#x27;&quot;</span> + age + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">        <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码就是把Student类中的成员变量进行了字符串的拼接。重写完毕以后，再次运行程序，控制台输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s1对象的字符串表现形式为：Student&#123;name=<span class="string">&#x27;itheima&#x27;</span>, age=<span class="string">&#x27;14&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>此时我们就可以清楚的查看Student的成员变量值，因此重写toString方法的意义就是以良好的格式，更方便的展示对象中的属性值</p><p>我们再来查看一下如下代码的输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接输出对象s1</span></span><br><span class="line">System.out.println(s1);</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Student&#123;name=<span class="string">&#x27;itheima&#x27;</span>, age=<span class="string">&#x27;14&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到和刚才的输出结果是一致的。那么此时也就证明直接输出一个对象，那么会默认调用对象的toString方法，因此如上代码的等同于如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建学生对象</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用s1的toString方法，把结果进行输出</span></span><br><span class="line">System.out.println(s1.toString());</span><br></pre></td></tr></table></figure><p>因此后期为了方便进行测试，我们常常是通过输出语句直接输出一个对象的名称。</p><p>小结：</p><ol><li>在通过输出语句输出一个对象时，默认调用的就是toString()方法</li><li>输出地址值一般没有意义，我们可以通过重写toString方法去输出对应的成员变量信息（快捷键：atl + insert ， 空白处 右键 -&gt; Generate -&gt; 选择toString）</li><li>toString方法的作用：以良好的格式，更方便的展示对象中的属性值</li><li>一般情况下Jdk所提供的类都会重写Object类中的toString方法</li></ol><p><font color="blue" size="2"><strong>案例2</strong></font>：演示equals方法</p><p>实现步骤：</p><ol><li>在测试类（ObjectDemo02）的main方法中，创建两个学生对象，然后比较两个对象是否相同</li></ol><p>代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 比较两个对象是否相等</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台的输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>因为”&#x3D;&#x3D;”号比较的是对象的地址值，而我们通过new关键字创建了两个对象，它们的地址值是不相同的。因此比较结果就是false。</p><p>我们尝试调用Object类中的equals方法进行比较，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用equals方法比较两个对象是否相等</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> s1.equals(s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台的输出结果为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><p>为什么结果还是false呢？我们可以查看一下Object类中equals方法的源码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;<span class="comment">// Object类中的equals方法的源码</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码我们可以发现默认情况下equals方法比较的也是对象的地址值。比较内存地址值一般情况下是没有意义的，我们希望比较的是对象的属性，如果两个对象的属性相同，我们认为就是同一个对象；</p><p>那么要比较对象的属性，我们就需要在Student类中重写Object类中的equals方法。equals方法的重写，我们也可以使用idea开发工具完成，具体的操作如下所示：</p><ol><li>在空白处使用快捷键：alt + insert。此时会弹出如下的对话框</li></ol><p> <img src="/assets/1576056718392.png" alt="1576056718392"> </p><ol start="2"><li>选择equals() and hashCode()方法，此时会弹出如下的对话框</li></ol><p><img src="/assets/1576057779458.png" alt="1576057779458"> </p><p>点击next，会弹出如下对话框：</p><p><img src="/assets/1576057813175.png" alt="1576057813175"> </p><p>选择neme和age属性点击next，此时就会弹出如下对话框：</p><p><img src="/assets/1576057892814.png" alt="1576057892814"> </p><p>取消name和age属性（因为此时选择的是在生成hashCode方法时所涉及到的属性，关于hashCode方法后期再做重点介绍），点击Finish完成生成操作。生成的equals方法和hashCode方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="literal">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) o;</span><br><span class="line">    <span class="keyword">return</span> Objects.equals(name, student.name) &amp;&amp; Objects.equals(age, student.age);<span class="comment">// 比较的是对象的name属性值和age属性值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hashCode方法我们暂时使用不到，可以将hashCode方法删除。重写完毕以后运行程序进行测试，控制台输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure><p>此时equals方法比较的是对象的成员变量值，而s1和s2两个对象的成员变量值都是相同的。因此比较完毕以后的结果就是true。</p><p>小结：</p><ol><li>默认情况下equals方法比较的是对象的地址值</li><li>比较对象的地址值是没有意义的，因此一般情况下我们都会重写Object类中的equals方法</li></ol><p><font color="blue" size="2"><strong>案例2</strong></font>：对象克隆</p><p>​把A对象的属性值完全拷贝给B对象，也叫对象拷贝,对象复制</p><p><strong>对象克隆的分类：</strong></p><blockquote><p>深克隆和浅克隆</p></blockquote><p><strong>浅克隆：</strong></p><p>​不管对象内部的属性是基本数据类型还是引用数据类型，都完全拷贝过来 </p><p>​基本数据类型拷贝过来的是具体的数据，引用数据类型拷贝过来的是地址值。</p><p>​Object类默认的是浅克隆</p><p><img src="/assets%5C%E6%B5%85%E5%85%8B%E9%9A%86.png" alt="浅克隆"></p><p><strong>深克隆：</strong></p><p>​基本数据类型拷贝过来，字符串复用，引用数据类型会重新创建新的</p><p><img src="/assets%5C%E6%B7%B1%E5%85%8B%E9%9A%86.png" alt="深克隆"></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a04objectdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">// protected object clone(int a) 对象克隆 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先创建一个对象</span></span><br><span class="line">        <span class="type">int</span>[] data = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>, <span class="string">&quot;1234qwer&quot;</span>, <span class="string">&quot;girl11&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.克隆对象</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//方法在底层会帮我们创建一个对象,并把原对象中的数据拷贝过去。</span></span><br><span class="line">        <span class="comment">//书写细节:</span></span><br><span class="line">        <span class="comment">//1.重写Object中的clone方法</span></span><br><span class="line">        <span class="comment">//2.让javabean类实现Cloneable接口</span></span><br><span class="line">        <span class="comment">//3.创建原对象并调用clone就可以了</span></span><br><span class="line">        <span class="comment">//User u2 =(User)u1.clone();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//验证一件事情：Object中的克隆是浅克隆</span></span><br><span class="line">        <span class="comment">//想要进行深克隆，就需要重写clone方法并修改里面的方法体</span></span><br><span class="line">        <span class="comment">//int[] arr = u1.getData();</span></span><br><span class="line">        <span class="comment">//arr[0] = 100;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println(u1);</span></span><br><span class="line">        <span class="comment">//System.out.println(u2);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//以后一般会用第三方工具进行克隆</span></span><br><span class="line">        <span class="comment">//1.第三方写的代码导入到项目中</span></span><br><span class="line">        <span class="comment">//2.编写代码</span></span><br><span class="line">        <span class="comment">//Gson gson =new Gson();</span></span><br><span class="line">        <span class="comment">//把对象变成一个字符串</span></span><br><span class="line">        <span class="comment">//String s=gson.toJson(u1);</span></span><br><span class="line">        <span class="comment">//再把字符串变回对象就可以了</span></span><br><span class="line">        <span class="comment">//User user =gson.fromJson(s, User.class);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int[] arr=u1.getData();</span></span><br><span class="line">        <span class="comment">//arr[0] = 100;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印对象</span></span><br><span class="line">        <span class="comment">//System.out.println(user);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.itheima.a04objectdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.StringJoiner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Cloneable</span></span><br><span class="line"><span class="comment">//如果一个接口里面没有抽象方法</span></span><br><span class="line"><span class="comment">//表示当前的接口是一个标记性接口</span></span><br><span class="line"><span class="comment">//现在Cloneable表示一旦实现了，那么当前类的对象就可以被克降</span></span><br><span class="line"><span class="comment">//如果没有实现，当前类的对象就不能克隆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String password, String path, <span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPath</span><span class="params">(String path)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.path = path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getData() &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(<span class="type">int</span>[] data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;角色编号为：&quot;</span> + id + <span class="string">&quot;，用户名为：&quot;</span> + username + <span class="string">&quot;密码为：&quot;</span> + password + <span class="string">&quot;, 游戏图片为:&quot;</span> + path + <span class="string">&quot;, 进度:&quot;</span> + arrToString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">arrToString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            sj.add(data[i] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sj.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="comment">//调用父类中的clone方法</span></span><br><span class="line">        <span class="comment">//相当于让Java帮我们克隆一个对象，并把克隆之后的对象返回出去。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//先把被克隆对象中的数组获取出来</span></span><br><span class="line">        <span class="type">int</span>[] data = <span class="built_in">this</span>.data;</span><br><span class="line">        <span class="comment">//创建新的数组</span></span><br><span class="line">        <span class="type">int</span>[] newData =<span class="keyword">new</span> <span class="title class_">int</span>[data.length];</span><br><span class="line">        <span class="comment">//拷贝数组中的数据</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            newData[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用父类中的方法克隆对象</span></span><br><span class="line">            User u=(User)<span class="built_in">super</span>.clone();</span><br><span class="line">        <span class="comment">//因为父类中的克隆方法是浅克隆，替换克隆出来对象中的数组地址值</span></span><br><span class="line">        u.data =newData;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="5-Objects类"><a href="#5-Objects类" class="headerlink" title="5 Objects类"></a>5 Objects类</h1><h2 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h2><blockquote><p>tips：了解内容</p></blockquote><p>查看API文档，我们可以看到API文档中关于Objects类的定义如下：</p><p><img src="/assets/1576058492444.png" alt="1576058492444"> </p><p>Objects类所在包是在java.util包下，因此在使用的时候需要进行导包。并且Objects类是被final修饰的，因此该类不能被继承。</p><p>Objects类提供了一些对象常见操作的方法。比如判断对象是否相等，判断对象是否为null等等。</p><p>接下来我们来查看一下API文档，看一下Objects类中的成员，如下所示：</p><p><img src="/assets/1576058659628.png" alt="1576058659628"> </p><p>我们可以发现Objects类中无无参构造方法，因此我们不能使用new关键字去创建Objects的对象。同时我们可以发现Objects类中所提供的方法都是静态的。因此我们可以通过类名直接去调用这些方法。</p><h2 id="5-2-常见方法"><a href="#5-2-常见方法" class="headerlink" title="5.2 常见方法"></a>5.2 常见方法</h2><blockquote><p>tips：重点讲解内容</p></blockquote><p><font color="red" size="3"><strong>常见方法介绍</strong></font></p><p>我们要重点学习的Objects类中的常见方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(Object o)</span> <span class="comment">// 获取对象的字符串表现形式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object a, Object b)</span><span class="comment">// 比较两个对象是否相等</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNull</span><span class="params">(Object obj)</span><span class="comment">// 判断对象是否为null</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">nonNull</span><span class="params">(Object obj)</span><span class="comment">// 判断对象是否不为null</span></span><br></pre></td></tr></table></figure><p>我们要了解的Objects类中的常见方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">requireNonNull</span><span class="params">(T obj)</span><span class="comment">// 检查对象是否不为null,如果为null直接抛出异常；如果不是null返回该对象；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">requireNonNullElse</span><span class="params">(T obj, T defaultObj)</span> <span class="comment">// 检查对象是否不为null，如果不为null，返回该对象；如果为null返回defaultObj值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">requireNonNullElseGet</span><span class="params">(T obj, Supplier&lt;? extends T&gt; supplier)</span><span class="comment">// 检查对象是否不为null，如果不为null，返回该对象；如果 // 为null,返回由Supplier所提供的值</span></span><br></pre></td></tr></table></figure><p>上述方法中的T可以理解为是Object类型。</p><p><font color="red" size="3"><strong>案例演示</strong></font></p><p>接下来我们就来通过一些案例演示一下Objects类中的这些方法特点。</p><p><font color="blue" size="2"><strong>案例1</strong></font>：演示重点学习方法</p><p>实现步骤：</p><ol><li>创建一个学生类，提供两个成员变量（name ， age）；并且提供对应的无参构造方法和有参构造方法以及get&#x2F;set方法，并且重写toString方法和equals方法</li><li>创建一个测试类（ObjectsDemo01）, 在该类中编写测试代码</li></ol><p>如下所示：</p><p>Student类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name ;       <span class="comment">// 姓名</span></span><br><span class="line">    <span class="keyword">private</span> String age ;        <span class="comment">// 年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他代码略</span></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ObjectsDemo01测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectsDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method_04() ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试nonNull方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_04</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects类中的nonNull方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Objects.nonNull(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试isNull方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects类中的isNull方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Objects.isNull(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试equals方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects类中的equals方法，比较两个对象是否相等</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> Objects.equals(s1, s2);     <span class="comment">// 如果Student没有重写Object类中的equals方法，此处比较的还是对象的地址值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试toString方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects中的toString方法,获取s1对象的字符串表现形式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> Objects.toString(s1);       <span class="comment">// 如果Student没有重写Object类中的toString方法，此处还是返回的对象的地址值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="blue" size="2"><strong>案例2</strong></font>：演示需要了解的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectsDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method_03();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示requireNonNullElseGet</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects对象的requireNonNullElseGet方法,该方法的第二个参数是Supplier类型的，查看源码我们发现Supplier是一个函数式接口,</span></span><br><span class="line">        <span class="comment">// 那么我们就可以为其传递一个Lambda表达式，而在Supplier接口中所定义的方法是无参有返回值的方法，因此具体调用所传入的Lambda表达式如下所示</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Objects.requireNonNullElseGet(s1, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itcast&quot;</span>, <span class="string">&quot;14&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示requireNonNullElse</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects对象的requireNonNullElse方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Objects.requireNonNullElse(s1, <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itcast&quot;</span>, <span class="string">&quot;14&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示requireNonNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;itheima&quot;</span> , <span class="string">&quot;14&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用Objects对象的requireNonNull方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> Objects.requireNonNull(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        System.out.println(student);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：了解性的方法可以可以作为扩展视频进行下发。</p><h1 id="6-BigInteger类"><a href="#6-BigInteger类" class="headerlink" title="6 BigInteger类"></a>6 BigInteger类</h1><h2 id="6-1-引入"><a href="#6-1-引入" class="headerlink" title="6.1 引入"></a>6.1 引入</h2><p>​平时在存储整数的时候，Java中默认是int类型，int类型有取值范围：-2147483648 ~ 2147483647。如果数字过大，我们可以使用long类型，但是如果long类型也表示不下怎么办呢？</p><p>​就需要用到BigInteger，可以理解为：大的整数。</p><p>​有多大呢？理论上最大到42亿的21亿次方</p><p>​基本上在内存撑爆之前，都无法达到这个上限。</p><h2 id="6-2-概述"><a href="#6-2-概述" class="headerlink" title="6.2  概述"></a>6.2  概述</h2><p>查看API文档，我们可以看到API文档中关于BigInteger类的定义如下：</p><p> <img src="/assets%5CSnipaste_2022-09-04_21-36-01.png" alt="Snipaste_2022-09-04_21-36-01"></p><p>BigInteger所在包是在java.math包下，因此在使用的时候就需要进行导包。我们可以使用BigInteger类进行大整数的计算</p><h2 id="6-3-常见方法"><a href="#6-3-常见方法" class="headerlink" title="6.3 常见方法"></a>6.3 常见方法</h2><p><font color="red" size="3"><strong>构造方法</strong></font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(<span class="type">int</span> num, Random rnd)</span> <span class="comment">//获取随机大整数，范围：[0 ~ 2的num次方-1]</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(String val)</span> <span class="comment">//获取指定的大整数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(String val, <span class="type">int</span> radix)</span> <span class="comment">//获取指定进制的大整数</span></span><br><span class="line">    </span><br><span class="line">下面这个不是构造，而是一个静态方法获取BigInteger对象</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">valueOf</span><span class="params">(<span class="type">long</span> val)</span> <span class="comment">//静态方法获取BigInteger的对象，内部有优化</span></span><br></pre></td></tr></table></figure><p><strong>构造方法小结：</strong></p><ul><li>如果BigInteger表示的数字没有超出long的范围，可以用静态方法获取。</li><li>如果BigInteger表示的超出long的范围，可以用构造方法获取。</li><li>对象一旦创建，BigInteger内部记录的值不能发生改变。</li><li>只要进行计算都会产生一个新的BigInteger对象</li></ul><p><font color="red" size="3"><strong>常见成员方法</strong></font></p><p>BigDecimal类中使用最多的还是提供的进行四则运算的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">add</span><span class="params">(BigInteger val)</span><span class="comment">//加法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">subtract</span><span class="params">(BigInteger val)</span><span class="comment">//减法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">multiply</span><span class="params">(BigInteger val)</span><span class="comment">//乘法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger <span class="title function_">divide</span><span class="params">(BigInteger val)</span><span class="comment">//除法</span></span><br><span class="line"><span class="keyword">public</span> BigInteger[] divideAndRemainder(BigInteger val) <span class="comment">//除法，获取商和余数</span></span><br><span class="line"><span class="keyword">public</span>  <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object x)</span>     <span class="comment">//比较是否相同</span></span><br><span class="line"><span class="keyword">public</span>  BigInteger <span class="title function_">pow</span><span class="params">(<span class="type">int</span> exponent)</span> <span class="comment">//次幂、次方</span></span><br><span class="line"><span class="keyword">public</span>  BigInteger max/min(BigInteger val) <span class="comment">//返回较大值/较小值</span></span><br><span class="line"><span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">intValue</span><span class="params">(BigInteger val)</span> <span class="comment">//转为int类型整数，超出范围数据有误</span></span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a06bigintegerdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigIntegerDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public BigInteger(int num, Random rnd) 获取随机大整数，范围:[0~ 2的num次方-11</span></span><br><span class="line"><span class="comment">            public BigInteger(String val) 获取指定的大整数</span></span><br><span class="line"><span class="comment">            public BigInteger(String val, int radix) 获取指定进制的大整数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            public static BigInteger valueOf(long val) 静态方法获取BigInteger的对象，内部有优化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            细节:</span></span><br><span class="line"><span class="comment">            对象一旦创建里面的数据不能发生改变。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取一个随机的大整数</span></span><br><span class="line">        <span class="comment">/* Random r=new Random();</span></span><br><span class="line"><span class="comment">            for (int i = e; i &lt; 100; i++) &#123;</span></span><br><span class="line"><span class="comment">            BigInteger bd1 = new BigInteger(4,r);</span></span><br><span class="line"><span class="comment">            System.out.println(bd1);//[@ ~ 15]&#125;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个指定的大整数，可以超出long的取值范围</span></span><br><span class="line">        <span class="comment">//细节:字符串中必须是整数，否则会报错</span></span><br><span class="line">        <span class="comment">/* BigInteger bd2 = new BigInteger(&quot;1.1&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(bd2);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            BigInteger bd3 = new BigInteger(&quot;abc&quot;);</span></span><br><span class="line"><span class="comment">            System.out.println(bd3);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取指定进制的大整数</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//1.字符串中的数字必须是整数</span></span><br><span class="line">        <span class="comment">//2.字符串中的数字必须要跟进制吻合。</span></span><br><span class="line">        <span class="comment">//比如二进制中，那么只能写日和1，写其他的就报错。</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;123&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(bd4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.静态方法获取BigInteger的对象，内部有优化</span></span><br><span class="line">        <span class="comment">//细节:</span></span><br><span class="line">        <span class="comment">//1.能表示范围比较小，只能在long的取值范围之内，如果超出long的范围就不行了。</span></span><br><span class="line">        <span class="comment">//2.在内部对常用的数字: -16 ~ 16 进行了优化。</span></span><br><span class="line">        <span class="comment">//  提前把-16~16 先创建好BigInteger的对象，如果多次获取不会重新创建新的。</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd5</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">16</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd6</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">16</span>);</span><br><span class="line">        System.out.println(bd5 == bd6);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd7</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">17</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd8</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">17</span>);</span><br><span class="line">        System.out.println(bd7 == bd8);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.对象一旦创建内部的数据不能发生改变</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd9</span> <span class="operator">=</span>BigInteger.valueOf(<span class="number">1</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd10</span> <span class="operator">=</span>BigInteger.valueOf(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//此时，不会修改参与计算的BigInteger对象中的借，而是产生了一个新的BigInteger对象记录</span></span><br><span class="line">        BigInteger result=bd9.add(bd10);</span><br><span class="line">        System.out.println(result);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a06bigintegerdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigIntegerDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public BigInteger add(BigInteger val) 加法</span></span><br><span class="line"><span class="comment">            public BigInteger subtract(BigInteger val) 减法</span></span><br><span class="line"><span class="comment">            public BigInteger multiply(BigInteger val) 乘法</span></span><br><span class="line"><span class="comment">            public BigInteger divide(BigInteger val) 除法，获取商</span></span><br><span class="line"><span class="comment">            public BigInteger[] divideAndRemainder(BigInteger val) 除法，获取商和余数</span></span><br><span class="line"><span class="comment">            public boolean equals(Object x) 比较是否相同</span></span><br><span class="line"><span class="comment">            public BigInteger pow(int exponent) 次幂</span></span><br><span class="line"><span class="comment">            public BigInteger max/min(BigInteger val) 返回较大值/较小值</span></span><br><span class="line"><span class="comment">            public int intValue(BigInteger val) 转为int类型整数，超出范围数据有误</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.创建两个BigInteger对象</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd1</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">10</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd2</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.加法</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd3</span> <span class="operator">=</span> bd1.add(bd2);</span><br><span class="line">        System.out.println(bd3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.除法，获取商和余数</span></span><br><span class="line">        BigInteger[] arr = bd1.divideAndRemainder(bd2);</span><br><span class="line">        System.out.println(arr[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.比较是否相同</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> bd1.equals(bd2);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.次幂</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd4</span> <span class="operator">=</span> bd1.pow(<span class="number">2</span>);</span><br><span class="line">        System.out.println(bd4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6.max</span></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd5</span> <span class="operator">=</span> bd1.max(bd2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.转为int类型整数，超出范围数据有误</span></span><br><span class="line">        <span class="comment">/* BigInteger bd6 = BigInteger.valueOf(2147483647L);</span></span><br><span class="line"><span class="comment">         int i = bd6.intValue();</span></span><br><span class="line"><span class="comment">         System.out.println(i);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bd6</span> <span class="operator">=</span> BigInteger.valueOf(<span class="number">200</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">v</span> <span class="operator">=</span> bd6.doubleValue();</span><br><span class="line">        System.out.println(v);<span class="comment">//200.0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-4-底层存储方式："><a href="#6-4-底层存储方式：" class="headerlink" title="6.4 底层存储方式："></a>6.4 底层存储方式：</h2><p>对于计算机而言，其实是没有数据类型的概念的，都是0101010101，数据类型是编程语言自己规定的，所以在实际存储的时候，先把具体的数字变成二进制，每32个bit为一组，存储在数组中。 </p><p>数组中最多能存储元素个数：21亿多</p><p>数组中每一位能表示的数字：42亿多</p><p>理论上，BigInteger能表示的最大数字为：42亿的21亿次方。</p><p>但是还没到这个数字，电脑的内存就会撑爆，所以一般认为BigInteger是无限的。 </p><p>存储方式如图所示：</p><p><img src="/assets%5CbigInteger%E7%9A%84%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86.png" alt="bigInteger的底层原理"></p><h1 id="7-BigDecimal类"><a href="#7-BigDecimal类" class="headerlink" title="7 BigDecimal类"></a>7 BigDecimal类</h1><h2 id="7-1-引入"><a href="#7-1-引入" class="headerlink" title="7.1 引入"></a>7.1 引入</h2><p>首先我们来分析一下如下程序的执行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="number">0.09</span> + <span class="number">0.01</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码比较简单，就是计算0.09和0.01之和，并且将其结果在控制台进行输出。那么按照我们的想法在控制台输出的结果应该为0.1。那么实际的运行结果是什么呢？我们来运行一下程序，控制台的输出</p><p>结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.09999999999999999</span></span><br></pre></td></tr></table></figure><p>这样的结果其实就是一个丢失精度的结果。为什么会产生精度丢失呢？</p><p>在使用float或者double类型的数据在进行数学运算的时候，很有可能会产生精度丢失问题。我们都知道计算机底层在进行运算的时候，使用的都是二进制数据； 当我们在程序中写了一个十进制数据 ，在</p><p>进行运算的时候，计算机会将这个十进制数据转换成二进制数据，然后再进行运算，计算完毕以后计算机会把运算的结果再转换成十进制数据给我们展示； 如果我们使用的是整数类型的数据进行计算，那</p><p>么在把十进制数据转换成二进制数据的时候不会存在精度问题； 如果我们的数据是一个浮点类型的数据，有的时候计算机并不会将这个数据完全转换成一个二进制数据，而是将这个将其转换成一个无限的</p><p>趋近于这个十进数的二进制数据； 这样使用一个不太准确的数据进行运算的时候， 最终就会造成精度丢失；为了提高精度，Java就给我们提供了BigDecimal供我们进行数据运算。</p><h2 id="7-2-概述"><a href="#7-2-概述" class="headerlink" title="7.2 概述"></a>7.2 概述</h2><p>查看API文档，我们可以看到API文档中关于BigDecimal类的定义如下：</p><p> <img src="/.%5Cassets%5C1576132679789.png" alt="1576132679789"></p><p>BigDecimal所在包是在java.math包下，因此在使用的时候就需要进行导包。我们可以使用BigDecimal类进行更加精准的数据计算。</p><h2 id="7-3-常见方法"><a href="#7-3-常见方法" class="headerlink" title="7.3 常见方法"></a>7.3 常见方法</h2><p><font color="red" size="3"><strong>构造方法</strong></font></p><p>要用BigDecimal类，那么就需要首先学习一下如何去创建BigDecimal的对象。通过查看API文档，我们可以发现Jdk中针对BigDecimal类提供了很多的构造方法，但是最常用的构造方法是：</p><p> <img src="/.%5Cassets%5C1576134383441.png" alt="1576134383441"></p><p>了解完常见的构造方法以后，我们接下来就重点介绍一下常见的成员方法。</p><p><font color="red" size="3"><strong>常见成员方法</strong></font></p><p>BigDecimal类中使用最多的还是提供的进行四则运算的方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">add</span><span class="params">(BigDecimal value)</span><span class="comment">// 加法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">subtract</span><span class="params">(BigDecimal value)</span><span class="comment">// 减法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">multiply</span><span class="params">(BigDecimal value)</span><span class="comment">// 乘法运算</span></span><br><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal value)</span><span class="comment">// 触发运算</span></span><br></pre></td></tr></table></figure><p>接下来我们就来通过一些案例演示一下这些成员方法的使用。</p><p><font color="blue" size="2"><strong>案例1</strong></font>：演示基本的四则运算</p><p>代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.3&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;4&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的四则运算，并将其运算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.add(b2));         <span class="comment">// 进行加法运算</span></span><br><span class="line">        System.out.println(b1.subtract(b2));    <span class="comment">// 进行减法运算</span></span><br><span class="line">        System.out.println(b1.multiply(b2));    <span class="comment">// 进行乘法运算</span></span><br><span class="line">        System.out.println(b1.divide(b2));      <span class="comment">// 进行除法运算</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4.3</span></span><br><span class="line">-<span class="number">3.7</span></span><br><span class="line"><span class="number">1.2</span></span><br><span class="line"><span class="number">0.075</span></span><br></pre></td></tr></table></figure><p>此时我们可以看到使用BigDecimal类来完成浮点数的计算不会存在损失精度的问题。</p><p><font color="blue" size="2"><strong>案例2</strong></font>：演示除法的特殊情况</p><p>如果使用BigDecimal类型的数据进行除法运算的时候，得到的结果是一个无限循环小数，那么就会报错：ArithmeticException。 如下代码所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序进行测试，控制台输出结果如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.ArithmeticException: Non-terminating decimal expansion; no exact representable decimal result.</span><br><span class="line">at java.base/java.math.BigDecimal.divide(BigDecimal.java:<span class="number">1716</span>)</span><br><span class="line">at com.itheima.api.bigdecimal.demo02.BigDecimalDemo02.main(BigDecimalDemo02.java:<span class="number">14</span>)</span><br></pre></td></tr></table></figure><p>针对这个问题怎么解决，此时我们就需要使用到BigDecimal类中另外一个divide方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor, <span class="type">int</span> scale, <span class="type">int</span> roundingMode)</span></span><br></pre></td></tr></table></figure><p>上述divide方法参数说明：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">divisor:除数对应的BigDecimal对象；</span><br><span class="line">scale:精确的位数；</span><br><span class="line">roundingMode:取舍模式；</span><br><span class="line">取舍模式被封装到了RoundingMode这个枚举类中（关于枚举我们后期再做重点讲解），在这个枚举类中定义了很多种取舍方式。最常见的取舍方式有如下几个：</span><br><span class="line">UP(直接进1) ， FLOOR(直接删除) ， HALF_UP(4舍五入),我们可以通过如下格式直接访问这些取舍模式：枚举类名.变量名</span><br></pre></td></tr></table></figure><p>接下来我们就来演示一下这些取舍模式，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalDemo02</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        method_03() ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示取舍模式HALF_UP</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;0.3&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;4&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2 , <span class="number">2</span> , RoundingMode.HALF_UP));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示取舍模式FLOOR</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_02</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2 , <span class="number">2</span> , RoundingMode.FLOOR));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 演示取舍模式UP</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建两个BigDecimal对象</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1&quot;</span>) ;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">b2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3&quot;</span>) ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法进行b1和b2的除法运算，并且将计算结果在控制台进行输出</span></span><br><span class="line">        System.out.println(b1.divide(b2 , <span class="number">2</span> , RoundingMode.UP));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：后期在进行两个数的除法运算的时候，我们常常使用的是可以设置取舍模式的divide方法。</p><h2 id="7-4-底层存储方式："><a href="#7-4-底层存储方式：" class="headerlink" title="7.4 底层存储方式："></a>7.4 底层存储方式：</h2><p>把数据看成字符串，遍历得到里面的每一个字符，把这些字符在ASCII码表上的值，都存储到数组中。</p><p> <img src="/assets%5Cbigdecimal%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86.png" alt="bigdecimal存储原理"></p>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类和对象</title>
      <link href="/2023/01/20/day08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/01/20/day08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1. 类和对象"></a>1. 类和对象</h2><h3 id="1-1-类和对象的理解"><a href="#1-1-类和对象的理解" class="headerlink" title="1.1 类和对象的理解"></a>1.1 类和对象的理解</h3><p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p><ul><li>类<ul><li>类的理解<ul><li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li><li>简单理解：类就是对现实事物的一种描述</li></ul></li><li>类的组成<ul><li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li><li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li></ul></li></ul></li><li>类和对象的关系<ul><li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li><li>对象：是能够看得到摸的着的真实存在的实体</li><li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li></ul></li></ul><h3 id="1-2-类的定义"><a href="#1-2-类的定义" class="headerlink" title="1.2 类的定义"></a>1.2 类的定义</h3><p>类的组成是由属性和行为两部分组成</p><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul><p>类的定义步骤：</p><p>①定义类</p><p>②编写类的成员变量</p><p>③编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名 &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line">变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>；</span><br><span class="line">变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">…</span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">方法<span class="number">1</span>;</span><br><span class="line">方法<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    手机类：</span></span><br><span class="line"><span class="comment">        类名：</span></span><br><span class="line"><span class="comment">        手机(Phone)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员变量：</span></span><br><span class="line"><span class="comment">        品牌(brand)</span></span><br><span class="line"><span class="comment">        价格(price)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        成员方法：</span></span><br><span class="line"><span class="comment">        打电话(call)</span></span><br><span class="line"><span class="comment">        发短信(sendMessage)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;</span><br><span class="line">    <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">call</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-对象的使用"><a href="#1-3-对象的使用" class="headerlink" title="1.3 对象的使用"></a>1.3 对象的使用</h3><ul><li>创建对象的格式：<ul><li>类名 对象名 &#x3D; new 类名();</li></ul></li><li>调用成员的格式：<ul><li>对象名.成员变量</li><li>对象名.成员方法();</li></ul></li><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象</span></span><br><span class="line"><span class="comment">        格式：类名 对象名 = new 类名();</span></span><br><span class="line"><span class="comment">        范例：Phone p = new Phone();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    使用对象</span></span><br><span class="line"><span class="comment">        1：使用成员变量</span></span><br><span class="line"><span class="comment">            格式：对象名.变量名</span></span><br><span class="line"><span class="comment">            范例：p.brand</span></span><br><span class="line"><span class="comment">        2：使用成员方法</span></span><br><span class="line"><span class="comment">            格式：对象名.方法名()</span></span><br><span class="line"><span class="comment">            范例：p.call()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhoneDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员变量</span></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        p.brand = <span class="string">&quot;小米&quot;</span>;</span><br><span class="line">        p.price = <span class="number">2999</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(p.brand);</span><br><span class="line">        System.out.println(p.price);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用成员方法</span></span><br><span class="line">        p.call();</span><br><span class="line">        p.sendMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-学生对象-练习"><a href="#1-4-学生对象-练习" class="headerlink" title="1.4 学生对象-练习"></a>1.4 学生对象-练习</h3><ul><li>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用</li><li>分析：<ul><li>成员变量：姓名，年龄…</li><li>成员方法：学习，做作业…</li></ul></li><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomework</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line"></span><br><span class="line">        s.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s.age = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.age);</span><br><span class="line"></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-对象内存图"><a href="#2-对象内存图" class="headerlink" title="2. 对象内存图"></a>2. 对象内存图</h2><h3 id="2-1-单个对象内存图"><a href="#2-1-单个对象内存图" class="headerlink" title="2.1 单个对象内存图"></a>2.1 单个对象内存图</h3><ul><li>成员变量使用过程</li></ul><p><img src="/images%5C1.png" alt="1"></p><ul><li>成员方法调用过程</li></ul><p><img src="/images%5C2.png" alt="2"></p><h3 id="2-2-多个对象内存图"><a href="#2-2-多个对象内存图" class="headerlink" title="2.2 多个对象内存图"></a>2.2 多个对象内存图</h3><ul><li>成员变量使用过程</li></ul><p><img src="/images%5C3.png" alt="3"></p><ul><li>成员方法调用过程</li></ul><p><img src="/images%5C4.png" alt="4"></p><ul><li><p>总结：</p><p>多个对象在堆内存中，都有不同的内存划分，成员变量存储在各自的内存区域中，成员方法多个对象共用的一份</p></li></ul><h2 id="3-成员变量和局部变量"><a href="#3-成员变量和局部变量" class="headerlink" title="3. 成员变量和局部变量"></a>3. 成员变量和局部变量</h2><h3 id="3-1-成员变量和局部变量的区别"><a href="#3-1-成员变量和局部变量的区别" class="headerlink" title="3.1 成员变量和局部变量的区别"></a>3.1 成员变量和局部变量的区别</h3><ul><li>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li><li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用）</li></ul><h2 id="4-封装"><a href="#4-封装" class="headerlink" title="4. 封装"></a>4. 封装</h2><h3 id="4-1-封装思想"><a href="#4-1-封装思想" class="headerlink" title="4.1 封装思想"></a>4.1 封装思想</h3><ol><li><p>封装概述<br>是面向对象三大特征之一（封装，继承，多态）</p><p><strong>对象代表什么，就得封装对应的数据，并提供数据对应的行为</strong> </p></li><li><p>封装代码实现<br>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br>成员变量private，提供对应的getXxx()&#x2F;setXxx()方法</p></li></ol><h3 id="4-2-private关键字"><a href="#4-2-private关键字" class="headerlink" title="4.2 private关键字"></a>4.2 private关键字</h3><p>private是一个修饰符，可以用来修饰成员（成员变量，成员方法）</p><ul><li><p>被private修饰的成员，只能在本类进行访问，针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li>提供“get变量名()”方法，用于获取成员变量的值，方法用public修饰</li><li>提供“set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li></ul></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供get/set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你给的年龄有误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.name = <span class="string">&quot;林青霞&quot;</span>;</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line">        <span class="comment">//调用show方法</span></span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-private的使用"><a href="#4-3-private的使用" class="headerlink" title="4.3 private的使用"></a>4.3 private的使用</h3><ul><li><p>需求：定义标准的学生类，要求name和age使用private修饰，并提供set和get方法以及便于显示数据的show方法，测试类中创建对象并使用，最终控制台输出  林青霞，30 </p></li><li><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用set方法给成员变量赋值</span></span><br><span class="line">        s.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        s.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用get方法获取成员变量的值</span></span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;---&quot;</span> + s.getAge());</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-4-this关键字"><a href="#4-4-this关键字" class="headerlink" title="4.4 this关键字"></a>4.4 this关键字</h3><ul><li>this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）<ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5. 构造方法"></a>5. 构造方法</h2><h3 id="5-1-构造方法概述"><a href="#5-1-构造方法概述" class="headerlink" title="5.1 构造方法概述"></a>5.1 构造方法概述</h3><p>构造方法是一种特殊的方法</p><ul><li><p>作用：创建对象   Student stu &#x3D; <strong>new Student();</strong></p></li><li><p>格式：</p><p>public class 类名{</p><p>​        修饰符 类名( 参数 ) {</p><p>​        }</p><p>}</p></li><li><p>功能：主要是完成对象数据的初始化</p></li><li><p>示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-构造方法的注意事项"><a href="#5-2-构造方法的注意事项" class="headerlink" title="5.2 构造方法的注意事项"></a>5.2 构造方法的注意事项</h3><ul><li>构造方法的创建</li></ul><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法</p><ul><li>构造方法的重载</li></ul><p>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</p><ul><li>推荐的使用方式</li></ul><p>无论是否使用，都手工书写无参数构造方法</p><ul><li>重要功能！</li></ul><p>可以使用带参构造，为成员变量进行初始化</p><ul><li>示例代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    学生类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s2.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(int age)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">30</span>);</span><br><span class="line">        s3.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Student(String name,int age)</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s4.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-标准类制作"><a href="#5-3-标准类制作" class="headerlink" title="5.3 标准类制作"></a>5.3 标准类制作</h3><p>① 类名需要见名知意</p><p>② 成员变量使用private修饰</p><p>③ 提供至少两个构造方法 </p><ul><li>无参构造方法</li><li>带全部参数的构造方法</li></ul><p>④ get和set方法 </p><p>​提供每一个成员变量对应的setXxx()&#x2F;getXxx()</p><p>⑤ 如果还有其他行为，也需要写上</p><h3 id="5-4-练习1"><a href="#5-4-练习1" class="headerlink" title="5.4 练习1"></a>5.4 练习1</h3><p>需求：</p><p>​定义标准学生类，要求分别使用空参和有参构造方法创建对象，空参创建的对象通过setXxx赋值，有参创建的对象直接赋值，并通过show方法展示数据。 </p><ul><li>示例代码：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象并为其成员变量赋值的两种方式</span></span><br><span class="line"><span class="comment">        1:无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line"><span class="comment">        2:使用带参构造方法直接创建带有属性值的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//无参构造方法创建对象后使用setXxx()赋值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">30</span>);</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用带参构造方法直接创建带有属性值的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;林青霞&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-练习2"><a href="#5-4-练习2" class="headerlink" title="5.4 练习2"></a>5.4 练习2</h3><p><img src="/images%5C111.jpg" alt="111"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//1.私有化全部的成员变量</span></span><br><span class="line">    <span class="comment">//2.空参构造</span></span><br><span class="line">    <span class="comment">//3.带全部参数的构造</span></span><br><span class="line">    <span class="comment">//4.针对于每一个私有化的成员变量都要提供其对应的get和set方法</span></span><br><span class="line">    <span class="comment">//5.如果当前事物还有其他行为，那么也要写出来，比如学生的吃饭，睡觉等行为</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> String password;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">private</span> String email;<span class="comment">//邮箱</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> gender;<span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;<span class="comment">//年龄</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带全部参数的构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String password, String email, <span class="type">char</span> gender, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get和set</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">char</span> gender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;在吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//写一个标准的javabean类</span></span><br><span class="line">        <span class="comment">//咱们在课后只要能把这个标准的javabean能自己写出来，那么就表示今天的知识点就ok了</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用空参构造创建对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="comment">//如果利用空参创建对象，还想赋值只能用set方法赋值</span></span><br><span class="line">        u1.setUsername(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        u1.setPassword(<span class="string">&quot;1234qwer&quot;</span>);</span><br><span class="line">        u1.setEmail(<span class="string">&quot;itheima@itcast.cn&quot;</span>);</span><br><span class="line">        u1.setGender(<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">        u1.setAge(<span class="number">23</span>);</span><br><span class="line">        <span class="comment">//获取属性的值并打印</span></span><br><span class="line">        System.out.println(u1.getUsername() + <span class="string">&quot;, &quot;</span> + u1.getPassword()</span><br><span class="line">                + <span class="string">&quot;, &quot;</span> + u1.getEmail() + <span class="string">&quot;, &quot;</span> + u1.getGender() + <span class="string">&quot;, &quot;</span> + u1.getAge());</span><br><span class="line">        u1.eat();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//简单的办法</span></span><br><span class="line">        <span class="comment">//利用带全部参数的构造来创建对象</span></span><br><span class="line">        <span class="comment">//快捷键:ctrl + p</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;12345678&quot;</span>,<span class="string">&quot;lisi@itcast.cn&quot;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">24</span>);</span><br><span class="line">        System.out.println(u2.getUsername() + <span class="string">&quot;, &quot;</span> + u2.getPassword()</span><br><span class="line">                + <span class="string">&quot;, &quot;</span> + u2.getEmail() + <span class="string">&quot;, &quot;</span> + u2.getGender() + <span class="string">&quot;, &quot;</span> + u2.getAge());</span><br><span class="line">        u2.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类</title>
      <link href="/2023/01/20/day03%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/20/day03%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>抽象类</li><li>接口</li><li>内部类</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够写出抽象类的格式</li><li><input disabled="" type="checkbox"> 能够写出抽象方法的格式</li><li><input disabled="" type="checkbox"> 能说出抽象类的应用场景</li><li><input disabled="" type="checkbox"> 写出定义接口的格式</li><li><input disabled="" type="checkbox"> 写出实现接口的格式</li><li><input disabled="" type="checkbox"> 说出接口中成员的特点</li><li><input disabled="" type="checkbox"> 能说出接口的应用场景</li><li><input disabled="" type="checkbox"> 能说出接口中为什么会出现带有方法体的方法</li><li><input disabled="" type="checkbox"> 能完成适配器设计模式</li></ul><h1 id="第一章-抽象类"><a href="#第一章-抽象类" class="headerlink" title="第一章 抽象类"></a>第一章 抽象类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><h3 id="1-1-1-抽象类引入"><a href="#1-1-1-抽象类引入" class="headerlink" title="1.1.1 抽象类引入"></a>1.1.1 抽象类引入</h3><p>​父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。<strong>我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类</strong>。</p><ul><li><strong>抽象方法</strong> ： 没有方法体的方法。</li><li><strong>抽象类</strong>：包含抽象方法的类。</li></ul><h2 id="1-2-abstract使用格式"><a href="#1-2-abstract使用格式" class="headerlink" title="1.2 abstract使用格式"></a>1.2 abstract使用格式</h2><p><strong>abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。</strong></p><h3 id="1-2-1-抽象方法"><a href="#1-2-1-抽象方法" class="headerlink" title="1.2.1 抽象方法"></a>1.2.1 抽象方法</h3><p>使用<code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名 (参数列表)；</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br></pre></td></tr></table></figure><h3 id="1-2-2-抽象类"><a href="#1-2-2-抽象类" class="headerlink" title="1.2.2 抽象类"></a>1.2.2 抽象类</h3><p>如果一个类包含抽象方法，那么该类必须是抽象类。<strong>注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。</strong></p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名字 &#123; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-抽象类的使用"><a href="#1-2-3-抽象类的使用" class="headerlink" title="1.2.3 抽象类的使用"></a>1.2.3 抽象类的使用</h3><p><strong>要求</strong>：继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。否则，该子类也必须声明为抽象类。</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类,抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="comment">// 抽象方法必须要放在抽象类中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.重写父类的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;管理其他人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;厨师炒菜多加点盐...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建抽象类,抽象类不能创建对象</span></span><br><span class="line"><span class="comment">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span></span><br><span class="line"><span class="comment">//Employee e = new Employee();</span></span><br><span class="line"><span class="comment">//e.work();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建子类</span></span><br><span class="line"><span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">m.work();</span><br><span class="line"></span><br><span class="line"><span class="type">Cook</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;ap002&quot;</span>, <span class="string">&quot;库克&quot;</span>, <span class="number">1</span>);</span><br><span class="line">c.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h2 id="1-3-抽象类的特征"><a href="#1-3-抽象类的特征" class="headerlink" title="1.3 抽象类的特征"></a>1.3 抽象类的特征</h2><p>抽象类的特征总结起来可以说是 <strong>有得有失</strong></p><p><strong>有得：抽象类得到了拥有抽象方法的能力。</strong></p><p><strong>有失：抽象类失去了创建对象的能力。</strong></p><p>其他成员（构造方法，实例方法，静态方法等）抽象类都是具备的。</p><h2 id="1-4-抽象类的细节"><a href="#1-4-抽象类的细节" class="headerlink" title="1.4 抽象类的细节"></a>1.4 抽象类的细节</h2><p>不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则子类也必须定义成抽象类，编译无法通过而报错。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>抽象类存在的意义是为了被子类继承。</p><blockquote><p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p></blockquote></li></ol><h2 id="1-5-抽象类存在的意义"><a href="#1-5-抽象类存在的意义" class="headerlink" title="1.5 抽象类存在的意义"></a>1.5 抽象类存在的意义</h2><p>​抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义。抽象类可以强制让子类，一定要按照规定的格式进行重写。</p><h1 id="第二章-接口"><a href="#第二章-接口" class="headerlink" title="第二章 接口"></a>第二章 接口</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>我们已经学完了抽象类，抽象类中可以用抽象方法，也可以有普通方法，构造方法，成员变量等。那么什么是接口呢？<strong>接口是更加彻底的抽象，JDK7之前，包括JDK7，接口中全部是抽象方法。接口同样是不能创建对象的</strong>。</p><h2 id="2-2-定义格式"><a href="#2-2-定义格式" class="headerlink" title="2.2 定义格式"></a>2.2 定义格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的定义格式：</span></span><br><span class="line">interface 接口名称&#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的声明：interface</span></span><br><span class="line"><span class="comment">// 接口名称：首字母大写，满足“驼峰模式”</span></span><br></pre></td></tr></table></figure><h2 id="2-3-接口成分的特点"><a href="#2-3-接口成分的特点" class="headerlink" title="2.3 接口成分的特点"></a>2.3 接口成分的特点</h2><p>  在JDK7，包括JDK7之前，接口中的<strong>只有</strong>包含：抽象方法和常量</p><h3 id="2-3-1-抽象方法"><a href="#2-3-1-抽象方法" class="headerlink" title="2.3.1.抽象方法"></a>2.3.1.抽象方法</h3><p>​       注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！<br>​       按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。</p><h3 id="2-3-2-常量"><a href="#2-3-2-常量" class="headerlink" title="2.3.2 常量"></a>2.3.2 常量</h3><p> 在接口中定义的成员变量默认会加上： public static final修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。</p><h3 id="2-3-3-案例演示"><a href="#2-3-3-案例演示" class="headerlink" title="2.3.3 案例演示"></a>2.3.3 案例演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterF</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法！</span></span><br><span class="line">    <span class="comment">//    public abstract void run();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract String getName();</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract int add(int a , int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它的最终写法是：</span></span><br><span class="line">    <span class="comment">// public static final int AGE = 12 ;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span>  <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-基本的实现"><a href="#2-4-基本的实现" class="headerlink" title="2.4 基本的实现"></a>2.4 基本的实现</h2><h3 id="2-4-1-实现接口的概述"><a href="#2-4-1-实现接口的概述" class="headerlink" title="2.4.1 实现接口的概述"></a>2.4.1 实现接口的概述</h3><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><h3 id="2-4-2-实现接口的格式"><a href="#2-4-2-实现接口的格式" class="headerlink" title="2.4.2 实现接口的格式"></a>2.4.2 实现接口的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**接口的实现：</span></span><br><span class="line"><span class="comment">    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment">    实现类的格式:*/</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>,接口<span class="number">2</span>,接口<span class="number">3.</span>..&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面格式可以看出，接口是可以被多实现的。大家可以想一想为什么呢？</p><h3 id="2-4-3-类实现接口的要求和意义"><a href="#2-4-3-类实现接口的要求和意义" class="headerlink" title="2.4.3 类实现接口的要求和意义"></a>2.4.3 类实现接口的要求和意义</h3><ol><li>必须重写实现的全部接口中所有抽象方法。</li><li>如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。</li><li><strong>意义：接口体现的是一种规范，接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范。</strong></li></ol><h3 id="2-4-4-类与接口基本实现案例"><a href="#2-4-4-类与接口基本实现案例" class="headerlink" title="2.4.4  类与接口基本实现案例"></a>2.4.4  类与接口基本实现案例</h3><p>假如我们定义一个运动员的<strong>接口</strong>（规范），代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   接口：接口体现的是规范。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; <span class="comment">// 抽象方法，跑步。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span>; <span class="comment">// 抽象方法，遵守法律。</span></span><br><span class="line">    String <span class="title function_">compittion</span><span class="params">(String project)</span>;  <span class="comment">// 抽象方法，比赛。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义一个乒乓球运动员类，实现接口，实现接口的<strong>实现类</strong>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._03接口的实现;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的实现：</span></span><br><span class="line"><span class="comment"> *    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment"> *    实现类的格式:</span></span><br><span class="line"><span class="comment"> *      class 类名 implements 接口1,接口2,接口3...&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPongMan</span>  <span class="keyword">implements</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员稍微跑一下！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员守法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">compittion</span><span class="params">(String project)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参加&quot;</span>+project+<span class="string">&quot;得金牌！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实现类对象。</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">zjk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>();</span><br><span class="line">        zjk.run();</span><br><span class="line">        zjk.law();</span><br><span class="line">        System.out.println(zjk.compittion(<span class="string">&quot;全球乒乓球比赛&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-5-类与接口的多实现案例"><a href="#2-4-5-类与接口的多实现案例" class="headerlink" title="2.4.5 类与接口的多实现案例"></a>2.4.5 类与接口的多实现案例</h3><p><strong>类与接口之间的关系是多实现的，一个类可以同时实现多个接口。</strong></p><p>首先我们先定义两个接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 这一个运动员的规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后定义一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java中接口是可以被多实现的：</span></span><br><span class="line"><span class="comment"> *    一个类可以实现多个接口: Law, SportMan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpMan</span> <span class="keyword">implements</span> <span class="title class_">Law</span> ,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;尊长守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;训练跑步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。</p><h2 id="2-5-接口与接口的多继承"><a href="#2-5-接口与接口的多继承" class="headerlink" title="2.5 接口与接口的多继承"></a>2.5 接口与接口的多继承</h2><p>Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。大家一定要注意：</p><p><strong>类与接口是实现关系</strong></p><p><strong>接口与接口是继承关系</strong></p><p>接口继承接口就是把其他接口的抽象方法与本接口进行了合并。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Abc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> *  总结：</span><br><span class="line"> *     接口与类之间是多实现的。</span><br><span class="line"> *     接口与接口之间是多继承的。</span><br><span class="line"> * */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> <span class="keyword">extends</span> <span class="title class_">Law</span> , Abc &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6扩展：接口的细节"><a href="#2-6扩展：接口的细节" class="headerlink" title="2.6扩展：接口的细节"></a>2.6扩展：接口的细节</h2><p>不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于接口的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li>当两个接口中存在相同抽象方法的时候，该怎么办？</li></ol><blockquote><p>只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。</p></blockquote><ol start="2"><li>实现类能不能继承A类的时候，同时实现其他接口呢？</li></ol><blockquote><p>继承的父类，就好比是亲爸爸一样<br>实现的接口，就好比是干爹一样<br>可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。</p></blockquote><ol start="3"><li>实现类能不能继承一个抽象类的时候，同时实现其他接口呢？</li></ol><blockquote><p>实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。</p></blockquote><ol start="4"><li>实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？</li></ol><blockquote><p>处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。<br>处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。</p></blockquote><ol start="5"><li>如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办?</li></ol><blockquote><p>可以在接口跟实现类中间，新建一个中间类（适配器类）<br>让这个适配器类去实现接口，对接口里面的所有的方法做空重写。<br>让子类继承这个适配器类，想要用到哪个方法，就重写哪个方法。<br>因为中间类没有什么实际的意义，所以一般会把中间类定义为抽象的，不让外界创建对象</p></blockquote><h1 id="第三章-内部类"><a href="#第三章-内部类" class="headerlink" title="第三章 内部类"></a>第三章 内部类</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><h3 id="3-1-1-什么是内部类"><a href="#3-1-1-什么是内部类" class="headerlink" title="3.1.1 什么是内部类"></a>3.1.1 什么是内部类</h3><p>将一个类A定义在另一个类B里面，里面的那个类A就称为<strong>内部类</strong>，B则称为<strong>外部类</strong>。可以把内部类理解成寄生，外部类理解成宿主。</p><h3 id="3-1-2-什么时候使用内部类"><a href="#3-1-2-什么时候使用内部类" class="headerlink" title="3.1.2 什么时候使用内部类"></a>3.1.2 什么时候使用内部类</h3><p>一个事物内部还有一个独立的事物，内部的事物脱离外部的事物无法独立使用</p><ol><li>人里面有一颗心脏。</li><li>汽车内部有一个发动机。</li><li>为了实现更好的封装性。</li></ol><h2 id="3-2-内部类的分类"><a href="#3-2-内部类的分类" class="headerlink" title="3.2 内部类的分类"></a>3.2 内部类的分类</h2><p>按定义的位置来分</p><ol><li><strong>成员内部内</strong>，类定义在了成员位置 (类中方法外称为成员位置，无static修饰的内部类)</li><li><strong>静态内部类</strong>，类定义在了成员位置 (类中方法外称为成员位置，有static修饰的内部类)</li><li><strong>局部内部类</strong>，类定义在方法内</li><li><strong>匿名内部类</strong>，没有名字的内部类，可以在方法中，也可以在类中方法外。</li></ol><h2 id="3-3-成员内部类"><a href="#3-3-成员内部类" class="headerlink" title="3.3 成员内部类"></a>3.3 成员内部类</h2><p><strong>成员内部类特点</strong>：</p><ul><li>无static修饰的内部类，属于外部类对象的。</li><li>宿主：外部类对象。</li></ul><p><strong>内部类的使用格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类。 <span class="comment">// 访问内部类的类型都是用 外部类.内部类</span></span><br></pre></td></tr></table></figure><p><strong>获取成员内部类对象的两种方式</strong>：</p><p>方式一：外部直接创建成员内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类 变量 = <span class="keyword">new</span> 外部类（）.new 内部类（）;</span><br></pre></td></tr></table></figure><p>方式二：在外部类中定义一个方法提供内部类的对象</p><p><strong>案例演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  宿主：外部类对象。</span></span><br><span class="line">       <span class="comment">// Outer out = new Outer();</span></span><br><span class="line">        <span class="comment">// 创建内部类对象。</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="comment">// 成员内部类，属于外部类对象的。</span></span><br><span class="line">    <span class="comment">// 拓展：成员内部类不能定义静态成员。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="comment">// 这里面的东西与类是完全一样的。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类中的方法被调用了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        System.out.println(o.getInstance());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-成员内部类的细节"><a href="#3-4-成员内部类的细节" class="headerlink" title="3.4 成员内部类的细节"></a>3.4 成员内部类的细节</h2><p>编写成员内部类的注意点：</p><ol><li>成员内部类可以被一些修饰符所修饰，比如： private，默认，protected，public，static等</li><li>在成员内部类里面，JDK16之前不能定义静态变量，JDK16开始才可以定义静态变量。</li><li>创建内部类对象时，对象中有一个隐含的Outer.this记录外部类对象的地址值。（请参见3.6节的内存图）</li></ol><p>详解：</p><p>​内部类被private修饰，外界无法直接获取内部类的对象，只能通过3.3节中的方式二获取内部类的对象</p><p>​被其他权限修饰符修饰的内部类一般用3.3节中的方式一直接获取内部类的对象</p><p>​内部类被static修饰是成员内部类中的特殊情况，叫做静态内部类下面单独学习。</p><p>​内部类如果想要访问外部类的成员变量，外部类的变量必须用final修饰，JDK8以前必须手动写final，JDK8之后不需要手动写，JDK默认加上。</p><h2 id="3-5-成员内部类面试题"><a href="#3-5-成员内部类面试题" class="headerlink" title="3.5 成员内部类面试题"></a>3.5 成员内部类面试题</h2><p>请在?地方向上相应代码,以达到输出的内容</p><p>注意：内部类访问外部类对象的格式是：<strong>外部类名.this</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在成员位置定义一个类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            System.out.println(???);<span class="comment">// 10   答案：a</span></span><br><span class="line">            System.out.println(???);<span class="comment">// 20答案：this.a</span></span><br><span class="line">            System.out.println(???);<span class="comment">// 30答案：Outer.this.a</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-成员内部类内存图"><a href="#3-6-成员内部类内存图" class="headerlink" title="3.6 成员内部类内存图"></a>3.6 成员内部类内存图</h2><p><img src="/img%5C%E5%86%85%E9%83%A8%E7%B1%BB%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="内部类内存图"></p><h2 id="3-7-静态内部类"><a href="#3-7-静态内部类" class="headerlink" title="3.7 静态内部类"></a>3.7 静态内部类</h2><p><strong>静态内部类特点</strong>：</p><ul><li>静态内部类是一种特殊的成员内部类。</li></ul><ul><li>有static修饰，属于外部类本身的。</li><li>总结：静态内部类与其他类的用法完全一样。只是访问的时候需要加上外部类.内部类。</li><li><strong>拓展1</strong>:静态内部类可以直接访问外部类的静态成员。</li><li><strong>拓展2</strong>:静态内部类不可以直接访问外部类的非静态成员，如果要访问需要创建外部类的对象。</li><li><strong>拓展3</strong>:静态内部类中没有银行的Outer.this。</li></ul><p><strong>内部类的使用格式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类。</span><br></pre></td></tr></table></figure><p><strong>静态内部类对象的创建格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类  变量 = <span class="keyword">new</span>  外部类.内部类构造器;</span><br></pre></td></tr></table></figure><p><strong>调用方法的格式：</strong></p><ul><li>调用非静态方法的格式：先创建对象，用对象调用</li><li>调用静态方法的格式：外部类名.内部类名.方法名();</li></ul><p><strong>案例演示</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部类：Outer01</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">sc_name</span> <span class="operator">=</span> <span class="string">&quot;黑马程序&quot;</span>;</span><br><span class="line">    <span class="comment">// 内部类: Inner01</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123;</span><br><span class="line">        <span class="comment">// 这里面的东西与类是完全一样的。</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner01</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">            <span class="comment">// 拓展:静态内部类可以直接访问外部类的静态成员。</span></span><br><span class="line">            System.out.println(sc_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建静态内部类对象。</span></span><br><span class="line">        <span class="comment">// 外部类.内部类  变量 = new  外部类.内部类构造器;</span></span><br><span class="line">        Outer01.<span class="type">Inner01</span> <span class="variable">in</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer01</span>.Inner01(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        in.showName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-局部内部类"><a href="#3-8-局部内部类" class="headerlink" title="3.8 局部内部类"></a>3.8 局部内部类</h2><ul><li><strong>局部内部类</strong> ：定义在<strong>方法中</strong>的类。</li></ul><p>定义格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class 外部类名 &#123;</span><br><span class="line">数据类型 变量名;</span><br><span class="line"></span><br><span class="line">修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line"><span class="comment">// …</span></span><br><span class="line">class 内部类 &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-匿名内部类【重点】"><a href="#3-9-匿名内部类【重点】" class="headerlink" title="3.9 匿名内部类【重点】"></a>3.9 匿名内部类【重点】</h2><h3 id="3-9-1-概述"><a href="#3-9-1-概述" class="headerlink" title="3.9.1 概述"></a>3.9.1 概述</h3><p><strong>匿名内部类</strong> ：是内部类的简化写法。他是一个隐含了名字的内部类。开发中，最常用到的内部类就是匿名内部类了。</p><h3 id="3-9-2-格式"><a href="#3-9-2-格式" class="headerlink" title="3.9.2 格式"></a>3.9.2 格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或者接口名() &#123;</span><br><span class="line">     重写方法;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>包含了：</p><ul><li><p>继承或者实现关系</p></li><li><p>方法重写</p></li><li><p>创建对象</p></li></ul><p>所以从语法上来讲，这个整体其实是匿名内部类对象</p><h3 id="3-9-2-什么时候用到匿名内部类"><a href="#3-9-2-什么时候用到匿名内部类" class="headerlink" title="3.9.2 什么时候用到匿名内部类"></a>3.9.2 什么时候用到匿名内部类</h3><p><strong>实际上，如果我们希望定义一个只要使用一次的类，就可考虑使用匿名内部类。匿名内部类的本质作用</strong></p><p><strong>是为了简化代码</strong>。 </p><p>之前我们使用接口时，似乎得做如下几步操作：</p><ol><li>定义子类</li><li>重写接口中的方法</li><li>创建子类对象</li><li>调用重写后的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义接口的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="comment">// 2. 重写抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗刨式...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 4. 调用方法</span></span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的目的，最终只是为了调用方法，那么能不能简化一下，把以上四步合成一步呢？匿名内部类就是做这样的快捷方式。</p><h3 id="3-9-3-匿名内部类前提和格式"><a href="#3-9-3-匿名内部类前提和格式" class="headerlink" title="3.9.3 匿名内部类前提和格式"></a>3.9.3 匿名内部类前提和格式</h3><p>匿名内部类必须<strong>继承一个父类</strong>或者<strong>实现一个父接口</strong>。</p><p><strong>匿名内部类格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类名或者接口名()&#123;</span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-9-4-使用方式"><a href="#3-9-4-使用方式" class="headerlink" title="3.9.4 使用方式"></a>3.9.4 使用方式</h3><p>以接口为例，匿名内部类的使用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;自由泳...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.swimming();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口 变量 = new 实现类(); // 多态,走子类的重写方法</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        s2.swimming();</span><br><span class="line">        s2.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-5-匿名内部类的特点"><a href="#3-9-5-匿名内部类的特点" class="headerlink" title="3.9.5 匿名内部类的特点"></a>3.9.5 匿名内部类的特点</h3><ol><li>定义一个没有名字的内部类</li><li>这个类实现了父类，或者父类接口</li><li>匿名内部类会创建这个没有名字的类的对象</li></ol><h3 id="3-9-6-匿名内部类的使用场景"><a href="#3-9-6-匿名内部类的使用场景" class="headerlink" title="3.9.6 匿名内部类的使用场景"></a>3.9.6 匿名内部类的使用场景</h3><p>通常在方法的形式参数是接口或者抽象类时，也可以将匿名内部类作为参数传递。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 普通方式传入对象</span></span><br><span class="line">        <span class="comment">// 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        </span><br><span class="line">        goSwimming(s);</span><br><span class="line">        <span class="comment">// 匿名内部类使用场景:作为方法参数传递</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蝶泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 传入匿名内部类</span></span><br><span class="line">        goSwimming(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完美方案: 一步到位</span></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;大学生, 蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小学生, 自由泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法,模拟请一些人去游泳</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">goSwimming</span><span class="params">(Swim s)</span> &#123;</span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态</title>
      <link href="/2023/01/20/day14%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/20/day14%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>多态</li><li>包</li><li>final</li><li>权限修饰符</li><li>代码块</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><p><input disabled="" type="checkbox"> 能够说出使用多态的前提条件</p></li><li><p><input disabled="" type="checkbox"> 理解多态的向上转型</p></li><li><p><input disabled="" type="checkbox"> 理解多态的向下转型</p></li><li><p><input disabled="" type="checkbox"> 能够知道多态的使用场景</p></li><li><p><input disabled="" type="checkbox"> 包的作用</p></li><li><p><input disabled="" type="checkbox"> public和private权限修饰符的作用</p></li><li><p><input disabled="" type="checkbox"> 描述final修饰的类的特点</p></li><li><p><input disabled="" type="checkbox"> 描述final修饰的方法的特点</p></li><li><p><input disabled="" type="checkbox"> 描述final修饰的变量的特点</p></li></ul><h1 id="第一章-多态"><a href="#第一章-多态" class="headerlink" title="第一章 多态"></a>第一章 多态</h1><h2 id="1-1-多态的形式"><a href="#1-1-多态的形式" class="headerlink" title="1.1 多态的形式"></a>1.1 多态的形式</h2><p><strong>多态是继封装、继承之后，面向对象的第三大特性。</strong></p><p><strong>多态是出现在继承或者实现关系中的</strong>。</p><p><strong>多态体现的格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类/实现类构造器;</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><p><strong>多态的前提</strong>：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。</p><h2 id="1-2-多态的使用场景"><a href="#1-2-多态的使用场景" class="headerlink" title="1.2 多态的使用场景"></a>1.2 多态的使用场景</h2><p>如果没有多态，在下图中register方法只能传递学生对象，其他的Teacher和administrator对象是无法传递给register方法方法的，在这种情况下，只能定义三个不同的register方法分别接收学生，老师和管理员。</p><p><img src="/img%5C%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF1.png" alt="多态的应用场景"></p><p>有了多态之后，方法的形参就可以定义为共同的父类Person。</p><p><strong>要注意的是：</strong></p><ul><li>当一个方法的形参是一个类，我们可以传递这个类所有的子类对象。</li><li>当一个方法的形参是一个接口，我们可以传递这个接口所有的实现类对象（后面会学）。</li><li>而且多态还可以根据传递的不同对象来调用不同类中的方法。</li></ul><p><img src="/img%5C%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF2.png" alt="多态的应用场景"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">父类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    空参构造</span><br><span class="line">    带全部参数的构造</span><br><span class="line">    get和set方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">1</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Administrator</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">2</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">3</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建三个对象，并调用register方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;王建国&quot;</span>);</span><br><span class="line">        t.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Administrator</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Administrator</span>();</span><br><span class="line">        admin.setName(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        admin.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        register(s);</span><br><span class="line">        register(t);</span><br><span class="line">        register(admin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法既能接收老师，又能接收学生，还能接收管理员</span></span><br><span class="line">    <span class="comment">//只能把参数写成这三个类型的父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-多态的定义和前提"><a href="#1-3-多态的定义和前提" class="headerlink" title="1.3 多态的定义和前提"></a>1.3 多态的定义和前提</h2><p><strong>多态</strong>： 是指同一行为，具有多个不同表现形式。</p><p>从上面案例可以看出，Cat和Dog都是动物，都是吃这一行为，但是出现的效果（表现形式）是不一样的。</p><p> <strong>前提【重点】</strong></p><ol><li><p>有继承或者实现关系</p></li><li><p>方法的重写【意义体现：不重写，无意义】</p></li><li><p>父类引用指向子类对象【格式体现】</p><blockquote><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p></blockquote></li></ol><h2 id="1-4-多态的运行特点"><a href="#1-4-多态的运行特点" class="headerlink" title="1.4 多态的运行特点"></a>1.4 多态的运行特点</h2><p>调用成员变量时：编译看左边，运行看左边</p><p>调用成员方法时：编译看左边，运行看右边</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>()；</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有name这个属性，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，把父类name属性的值打印出来</span></span><br><span class="line">System.out.println(f.name);</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有show这个方法，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，运行的是子类中的show方法</span></span><br><span class="line">f.show();</span><br></pre></td></tr></table></figure><h2 id="1-5-多态的弊端"><a href="#1-5-多态的弊端" class="headerlink" title="1.5 多态的弊端"></a>1.5 多态的弊端</h2><p>我们已经知道多态编译阶段是看左边父类类型的，如果子类有些独有的功能，此时<strong>多态的写法就无法访问子类独有功能了</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>｛</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西！&quot;</span>)</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.catchMouse();<span class="comment">//编译报错，编译看左边，Animal没有这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-引用类型转换"><a href="#1-6-引用类型转换" class="headerlink" title="1.6 引用类型转换"></a>1.6 引用类型转换</h2><h3 id="1-6-1-为什么要转型"><a href="#1-6-1-为什么要转型" class="headerlink" title="1.6.1 为什么要转型"></a>1.6.1 为什么要转型</h3><p><strong>多态的写法就无法访问子类独有功能了。</strong></p><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>回顾基本数据类型转换</p><ul><li>自动转换: 范围小的赋值给范围大的.自动完成:double d &#x3D; 5; </li><li>强制转换: 范围大的赋值给范围小的,强制转换:int i &#x3D; (int)3.14</li></ul><p>​     多态的转型分为向上转型（自动转换）与向下转型（强制转换）两种。</p><h3 id="1-6-2-向上转型（自动转换）"><a href="#1-6-2-向上转型（自动转换）" class="headerlink" title="1.6.2 向上转型（自动转换）"></a>1.6.2 向上转型（自动转换）</h3><ul><li><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换（自动转换）的过程，这个过程是默认的。<br>当父类引用指向一个子类对象时，便是向上转型。<br>使用格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p><strong>原因是：父类类型相对与子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。</strong>所以子类范围小可以直接自动转型给父类类型的变量。</p><h3 id="1-6-3-向下转型（强制转换）"><a href="#1-6-3-向下转型（强制转换）" class="headerlink" title="1.6.3 向下转型（强制转换）"></a>1.6.3 向下转型（强制转换）</h3><ul><li><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。<br>一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</li></ul><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:<span class="type">Aniaml</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">   <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span>(Cat) a;  </span><br></pre></td></tr></table></figure><h3 id="1-6-4-案例演示"><a href="#1-6-4-案例演示" class="headerlink" title="1.6.4 案例演示"></a>1.6.4 案例演示</h3><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>转型演示，代码如下：</p><p>定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchHouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-5-转型的异常"><a href="#1-6-5-转型的异常" class="headerlink" title="1.6.5 转型的异常"></a>1.6.5 转型的异常</h3><p>转型的过程中，一不小心就会遇到这样的问题，请看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">        d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以通过编译，但是运行时，却报出了 <code>ClassCastException</code> ，类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。</p><h3 id="1-6-6-instanceof关键字"><a href="#1-6-6-instanceof关键字" class="headerlink" title="1.6.6 instanceof关键字"></a>1.6.6 instanceof关键字</h3><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型 </span><br><span class="line">如果变量属于该数据类型或者其子类类型，返回<span class="literal">true</span>。</span><br><span class="line">如果变量不属于该数据类型或者其子类类型，返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">            c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">            d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-7-instanceof新特性"><a href="#1-6-7-instanceof新特性" class="headerlink" title="1.6.7 instanceof新特性"></a>1.6.7 instanceof新特性</h3><p>JDK14的时候提出了新特性，把判断和强转合并成了一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新特性</span></span><br><span class="line"><span class="comment">//先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d</span></span><br><span class="line"><span class="comment">//如果不是，则不强转，结果直接是false</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">    d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">    c.catchMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-综合练习"><a href="#1-7-综合练习" class="headerlink" title="1.7 综合练习"></a>1.7 综合练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">需求：根据需求完成代码:</span><br><span class="line"><span class="number">1.</span>定义狗类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)(something表示吃的东西)</span><br><span class="line">看家lookHome方法(无参数)</span><br><span class="line"><span class="number">2.</span>定义猫类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)方法(something表示吃的东西)</span><br><span class="line">逮老鼠catchMouse方法(无参数)</span><br><span class="line"><span class="number">3.</span>定义Person类<span class="comment">//饲养员</span></span><br><span class="line">属性：</span><br><span class="line">姓名，年龄</span><br><span class="line">行为：</span><br><span class="line">keepPet(Dog dog,String something)方法</span><br><span class="line">功能：喂养宠物狗，something表示喂养的东西</span><br><span class="line">行为：</span><br><span class="line">keepPet(Cat cat,String something)方法</span><br><span class="line">功能：喂养宠物猫，something表示喂养的东西</span><br><span class="line">生成空参有参构造，set和get方法  </span><br><span class="line"><span class="number">4.</span>定义测试类(完成以下打印效果):</span><br><span class="line">keepPet(Dog dog,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">30</span>岁的老王养了一只黑颜色的<span class="number">2</span>岁的狗</span><br><span class="line"><span class="number">2</span>岁的黑颜色的狗两只前腿死死的抱住骨头猛吃</span><br><span class="line">keepPet(Cat cat,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">25</span>岁的老李养了一只灰颜色的<span class="number">3</span>岁的猫</span><br><span class="line"><span class="number">3</span>岁的灰颜色的猫眯着眼睛侧着头吃鱼</span><br><span class="line"><span class="number">5.</span>思考：</span><br><span class="line"><span class="number">1.</span>Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？</span><br><span class="line"><span class="number">2.</span>Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？</span><br></pre></td></tr></table></figure><p>画图分析：</p><p><img src="/img%5C%E5%A4%9A%E6%80%81%E7%BB%83%E4%B9%A0%E7%9A%84%E5%88%86%E6%9E%90.png" alt="多态练习的分析"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物类（父类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猫类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的猫眯着眼睛侧着头吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狗类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="comment">//eat(String something)(something表示吃的东西)</span></span><br><span class="line">    <span class="comment">//看家lookHome方法(无参数)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的狗两只前腿死死的抱住&quot;</span> + something + <span class="string">&quot;猛吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookHome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在看家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//饲养员类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//饲养狗</span></span><br><span class="line">   <span class="comment">/* public void keepPet(Dog dog, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + dog.getColor() + &quot;颜色的&quot; + dog.getAge() + &quot;岁的狗&quot;);</span></span><br><span class="line"><span class="comment">        dog.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //饲养猫</span></span><br><span class="line"><span class="comment">    public void keepPet(Cat cat, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + cat.getColor() + &quot;颜色的&quot; + cat.getAge() + &quot;岁的猫&quot;);</span></span><br><span class="line"><span class="comment">        cat.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//想要一个方法，能接收所有的动物，包括猫，包括狗</span></span><br><span class="line">    <span class="comment">//方法的形参：可以写这些类的父类 Animal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(Animal a, String something)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + a.getColor() + <span class="string">&quot;颜色的&quot;</span> + a.getAge() + <span class="string">&quot;岁的狗&quot;</span>);</span><br><span class="line">            d.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + c.getColor() + <span class="string">&quot;颜色的&quot;</span> + c.getAge() + <span class="string">&quot;岁的猫&quot;</span>);</span><br><span class="line">            c.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这种动物&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象并调用方法</span></span><br><span class="line">       <span class="comment">/* Person p1 = new Person(&quot;老王&quot;,30);</span></span><br><span class="line"><span class="comment">        Dog d = new Dog(2,&quot;黑&quot;);</span></span><br><span class="line"><span class="comment">        p1.keepPet(d,&quot;骨头&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Person p2 = new Person(&quot;老李&quot;,25);</span></span><br><span class="line"><span class="comment">        Cat c = new Cat(3,&quot;灰&quot;);</span></span><br><span class="line"><span class="comment">        p2.keepPet(c,&quot;鱼&quot;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建饲养员的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;老王&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">2</span>,<span class="string">&quot;黑&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="number">3</span>,<span class="string">&quot;灰&quot;</span>);</span><br><span class="line">        p.keepPet(d,<span class="string">&quot;骨头&quot;</span>);</span><br><span class="line">        p.keepPet(c,<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-包"><a href="#第二章-包" class="headerlink" title="第二章 包"></a>第二章 包</h1><h2 id="2-1-包"><a href="#2-1-包" class="headerlink" title="2.1 包"></a>2.1 包</h2><p>​包在操作系统中其实就是一个文件夹。<strong>包是用来分门别类的管理技术，不同的技术类放在不同的包下</strong>，方便管理和维护。</p><p>在IDEA项目中，建包的操作如下：</p><p><img src="/img/aaa.jpg"></p><p><strong>包名的命名规范</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">路径名.路径名.xxx.xxx</span><br><span class="line"><span class="comment">// 例如：com.itheima.oa</span></span><br></pre></td></tr></table></figure><ul><li>包名一般是公司域名的倒写。例如：黑马是<a href="http://www.itheima.com,包名就可以定义成com.itheima.技术名称./">www.itheima.com,包名就可以定义成com.itheima.技术名称。</a></li><li>包名必须用”.“连接。</li><li>包名的每个路径名必须是一个合法的标识符，而且不能是Java的关键字。</li></ul><h2 id="2-2-导包"><a href="#2-2-导包" class="headerlink" title="2.2 导包"></a>2.2 导包</h2><p>什么时候需要导包？</p><p>​情况一：在使用Java中提供的非核心包中的类时</p><p>​情况二：使用自己写的其他包中的类时</p><p>什么时候不需要导包？</p><p>​情况一：在使用Java核心包（java.lang）中的类时</p><p>​情况二：在使用自己写的同一个包中的类时</p><h2 id="2-3-使用不同包下的相同类怎么办？"><a href="#2-3-使用不同包下的相同类怎么办？" class="headerlink" title="2.3 使用不同包下的相同类怎么办？"></a>2.3 使用不同包下的相同类怎么办？</h2><p>假设demo1和demo2中都有一个Student该如何使用？</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用全类名的形式即可。</span></span><br><span class="line"><span class="comment">//全类名：包名 + 类名</span></span><br><span class="line"><span class="comment">//拷贝全类名的快捷键：选中类名crtl + shift + alt + c 或者用鼠标点copy，再点击copy Reference</span></span><br><span class="line">com.itheima.homework.demo1.<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo1.Student();</span><br><span class="line">com.itheima.homework.demo2.<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo2.Student();</span><br></pre></td></tr></table></figure><h1 id="第三章-权限修饰符"><a href="#第三章-权限修饰符" class="headerlink" title="第三章 权限修饰符"></a>第三章 权限修饰符</h1><h2 id="3-1-权限修饰符"><a href="#3-1-权限修饰符" class="headerlink" title="3.1 权限修饰符"></a>3.1 权限修饰符</h2><p>​在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，我们之前已经学习过了public 和 private，接下来我们研究一下protected和默认修饰符的作用。</p><ul><li><p>public：公共的，所有地方都可以访问。</p></li><li><p>protected：本类 ，本包，其他包中的子类都可以访问。</p></li><li><p>默认（没有修饰符）：本类 ，本包可以访问。</p><p>注意：默认是空着不写，不是default</p></li><li><p>private：私有的，当前类可以访问。<br><code>public &gt; protected &gt; 默认 &gt; private</code></p></li></ul><h2 id="3-2-不同权限的访问能力"><a href="#3-2-不同权限的访问能力" class="headerlink" title="3.2 不同权限的访问能力"></a>3.2 不同权限的访问能力</h2><table><thead><tr><th></th><th>public</th><th>protected</th><th>默认</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中的类</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>不同包的子类</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>不同包中的无关类</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p>可见，public具有最大权限。private则是最小权限。</p><p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用<code>private</code> ，隐藏细节。</li><li>构造方法使用<code> public</code> ，方便创建对象。</li><li>成员方法使用<code>public</code> ，方便调用方法。</li></ul><blockquote><p>小贴士：不加权限修饰符，就是默认权限</p></blockquote><h1 id="第四章-final关键字"><a href="#第四章-final关键字" class="headerlink" title="第四章 final关键字"></a>第四章 final关键字</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>​学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。</p><p>如果有一个方法我不想别人去改写里面内容，该怎么办呢？</p><p>Java提供了<code>final</code> 关键字，表示修饰的内容不可变。</p><ul><li><strong>final</strong>：  不可改变，最终的含义。可以用于修饰类、方法和变量。<ul><li>类：被修饰的类，不能被继承。</li><li>方法：被修饰的方法，不能被重写。</li><li>变量：被修饰的变量，有且仅能被赋值一次。</li></ul></li></ul><h2 id="4-2-使用方式"><a href="#4-2-使用方式" class="headerlink" title="4.2 使用方式"></a>4.2 使用方式</h2><h3 id="4-2-1-修饰类"><a href="#4-2-1-修饰类" class="headerlink" title="4.2.1 修饰类"></a>4.2.1 修饰类</h3><p>final修饰的类，不能被继承。</p><p>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> class 类名 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class Zi extends Fu &#123;&#125; // 报错,不能继承final的类</span></span><br></pre></td></tr></table></figure><p>查询API发现像 <code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code> 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p><h3 id="4-2-2-修饰方法"><a href="#4-2-2-修饰方法" class="headerlink" title="4.2.2 修饰方法"></a>4.2.2 修饰方法</h3><p>final修饰的方法，不能被重写。<br>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi2</span> <span class="keyword">extends</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void show1() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;Zi2 show1&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-修饰变量-局部变量"><a href="#4-2-3-修饰变量-局部变量" class="headerlink" title="4.2.3 修饰变量-局部变量"></a>4.2.3 修饰变量-局部变量</h3><ol><li><strong>局部变量——基本类型</strong><br>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">// 第一次赋值 </span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明变量，直接赋值，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        b = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考，下面两种写法，哪种可以通过编译？</p><p>写法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    c = i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 <code>final</code> 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。</p><h3 id="4-2-4-修饰变量-成员变量"><a href="#4-2-4-修饰变量-成员变量" class="headerlink" title="4.2.4 修饰变量-成员变量"></a>4.2.4 修饰变量-成员变量</h3><p>成员变量涉及到初始化的问题，初始化方式有显示初始化和构造方法初始化，只能选择其中一个：</p><ul><li>显示初始化(在定义成员变量的时候立马赋值)（常用）；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构造方法初始化(在构造方法中赋值一次)（不常用，了解即可）。</p><p><strong>注意：每个构造方法中都要赋值一次！</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/2023/01/20/day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/"/>
      <url>/2023/01/20/day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象进阶部分学习方法："><a href="#面向对象进阶部分学习方法：" class="headerlink" title="面向对象进阶部分学习方法："></a>面向对象进阶部分学习方法：</h2><p>特点：</p><p>​逻辑性没有那么强，但是概念会比较多。</p><p>​记忆部分重要的概念，理解课堂上讲解的需要大家掌握的概念，多多练习代码。</p><h1 id="day13"><a href="#day13" class="headerlink" title="day13"></a>day13</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>复习回顾</li><li>static关键字</li><li>继承</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><p><input disabled="" type="checkbox"> 能够掌握static关键字修饰的变量调用方式</p></li><li><p><input disabled="" type="checkbox"> 能够掌握static关键字修饰的方法调用方式</p></li><li><p><input disabled="" type="checkbox"> 知道静态代码块的格式和应用场景</p></li><li><p><input disabled="" type="checkbox"> 能够写出类的继承格式</p></li><li><p><input disabled="" type="checkbox"> 能够说出继承的特点</p></li><li><p><input disabled="" type="checkbox"> 能够区分this和super的作用</p></li><li><p><input disabled="" type="checkbox"> 能够说出方法重写的概念</p></li><li><p><input disabled="" type="checkbox"> 能够说出方法重写的注意事项</p></li></ul><h1 id="第一章-复习回顾"><a href="#第一章-复习回顾" class="headerlink" title="第一章 复习回顾"></a>第一章 复习回顾</h1><h2 id="1-1-如何定义类"><a href="#1-1-如何定义类" class="headerlink" title="1.1 如何定义类"></a>1.1 如何定义类</h2><p>类的定义格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名 &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量（属性）</span></span><br><span class="line">    <span class="comment">// 2.成员方法 (行为) </span></span><br><span class="line">    <span class="comment">// 3.构造方法 （初始化类的对象数据的）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> sex ; <span class="comment">// &#x27;男&#x27;  &#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-如何通过类创建对象"><a href="#1-2-如何通过类创建对象" class="headerlink" title="1.2 如何通过类创建对象"></a>1.2 如何通过类创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名称 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure><h2 id="1-3-封装"><a href="#1-3-封装" class="headerlink" title="1.3 封装"></a>1.3 封装</h2><h4 id="1-3-1-封装的步骤"><a href="#1-3-1-封装的步骤" class="headerlink" title="1.3.1 封装的步骤"></a>1.3.1 封装的步骤</h4><p>1.使用 <code>private</code> 关键字来修饰成员变量。</p><p>2.使用<code>public</code>修饰getter和setter方法。</p><h4 id="1-3-2-封装的步骤实现"><a href="#1-3-2-封装的步骤实现" class="headerlink" title="1.3.2 封装的步骤实现"></a>1.3.2 封装的步骤实现</h4><ol><li>private修饰成员变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>public修饰getter和setter方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">      name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; a &lt;<span class="number">200</span>) &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-构造方法"><a href="#1-4-构造方法" class="headerlink" title="1.4 构造方法"></a>1.4 构造方法</h2><h3 id="1-4-1-构造方法的作用"><a href="#1-4-1-构造方法的作用" class="headerlink" title="1.4.1 构造方法的作用"></a>1.4.1 构造方法的作用</h3><p>在创建对象的时候，给成员变量进行初始化。</p><p>初始化即赋值的意思。</p><h3 id="1-4-2-构造方法的格式"><a href="#1-4-2-构造方法的格式" class="headerlink" title="1.4.2 构造方法的格式"></a>1.4.2 构造方法的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类名(形参列表) &#123;</span><br><span class="line">    <span class="comment">// 构造体代码，执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-构造方法的应用"><a href="#1-4-3-构造方法的应用" class="headerlink" title="1.4.3 构造方法的应用"></a>1.4.3 构造方法的应用</h3><p>首先定义一个学生类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;无参数构造方法被调用&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来通过调用构造方法得到两个学生对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateStu02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="comment">// 类名 变量名称 = new 类名();</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 使用对象访问成员变量，赋值</span></span><br><span class="line">        s1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        s1.age = <span class="number">20</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用对象访问成员变量 输出值</span></span><br><span class="line">        System.out.println(s1.name);</span><br><span class="line">        System.out.println(s1.age); </span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 使用对象访问成员变量 赋值</span></span><br><span class="line">        s2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">18</span> ;</span><br><span class="line">        System.out.println(s2.name);</span><br><span class="line">        System.out.println(s2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-this关键字的作用"><a href="#1-5-this关键字的作用" class="headerlink" title="1.5 this关键字的作用"></a>1.5 this关键字的作用</h2><h3 id="1-5-1-this关键字的作用"><a href="#1-5-1-this关键字的作用" class="headerlink" title="1.5.1 this关键字的作用"></a>1.5.1 this关键字的作用</h3><p>this代表所在类的当前对象的引用（地址值），即代表当前对象。</p><h3 id="1-5-2-this关键字的应用"><a href="#1-5-2-this关键字的应用" class="headerlink" title="1.5.2 this关键字的应用"></a>1.5.2 this关键字的应用</h3><h4 id="1-5-2-1-用于普通的gettter与setter方法"><a href="#1-5-2-1-用于普通的gettter与setter方法" class="headerlink" title="1.5.2.1 用于普通的gettter与setter方法"></a>1.5.2.1 用于普通的gettter与setter方法</h4><p>this出现在实例方法中，谁调用这个方法（哪个对象调用这个方法），this就代表谁（this就代表哪个对象）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-2-2-用于构造方法中"><a href="#1-5-2-2-用于构造方法中" class="headerlink" title="1.5.2.2 用于构造方法中"></a>1.5.2.2 用于构造方法中</h4><p>this出现在构造方法中，代表构造方法正在初始化的那个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-static关键字"><a href="#第二章-static关键字" class="headerlink" title="第二章 static关键字"></a>第二章 static关键字</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>以前我们定义过如下类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> sex; <span class="comment">// &#x27;男&#x27;  &#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String  a)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经知道面向对象中，存在类和对象的概念，我们在类中定义了一些成员变量，例如name,age,sex ,结果发现这些成员变量，每个对象都存在（因为每个对象都可以访问）。</p><p>而像name ,age , sex确实是每个学生对象都应该有的属性，应该属于每个对象。</p><p>所以Java中成员（<strong>变量和方法</strong>）等是存在所属性的，Java是通过static关键字来区分的。<strong>static关键字在Java开发非常的重要，对于理解面向对象非常关键。</strong></p><p>关于 <code>static</code> 关键字的使用，它可以用来修饰的成员变量和成员方法，被static修饰的成员是<strong>属于类</strong>的是放在静态区中，没有static修饰的成员变量和方法则是<strong>属于对象</strong>的。我们上面案例中的成员变量都是没有static修饰的，所以属于每个对象。</p><h2 id="2-2-定义格式和使用"><a href="#2-2-定义格式和使用" class="headerlink" title="2.2 定义格式和使用"></a>2.2 定义格式和使用</h2><p>static是静态的意思。 static可以修饰成员变量或者修饰方法。</p><h3 id="2-2-1-静态变量及其访问"><a href="#2-2-1-静态变量及其访问" class="headerlink" title="2.2.1 静态变量及其访问"></a>2.2.1 静态变量及其访问</h3><p>有static修饰成员变量，说明这个成员变量是属于类的，这个成员变量称为<strong>类变量</strong>或者<strong>静态成员变量</strong>。 直接用  类名访问即可。因为类只有一个，所以静态成员变量在内存区域中也只存在一份。所有的对象都可以共享这个变量。</p><p><strong>如何使用呢</strong></p><p>例如现在我们需要定义传智全部的学生类，那么这些学生类的对象的学校属性应该都是“传智”，这个时候我们可以把这个属性定义成static修饰的静态成员变量。</p><p><strong>定义格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 数据类型 变量名 = 初始值；    </span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">schoolName</span> <span class="operator">=</span> <span class="string">&quot;传智播客&quot;</span>； <span class="comment">// 属于类，只有一份。</span></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态成员变量的访问:</strong></p><p><strong>格式：类名.静态变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(Student.schoolName); <span class="comment">// 传智播客</span></span><br><span class="line">    Student.schoolName = <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line">    System.out.println(Student.schoolName); <span class="comment">// 黑马程序员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-实例变量及其访问"><a href="#2-2-2-实例变量及其访问" class="headerlink" title="2.2.2 实例变量及其访问"></a>2.2.2 实例变量及其访问</h3><p>无static修饰的成员变量属于每个对象的，  这个成员变量叫<strong>实例变量</strong>，之前我们写成员变量就是实例成员变量。</p><p><strong>需要注意的是</strong>：实例成员变量属于每个对象，必须创建类的对象才可以访问。   </p><p><strong>格式：对象.实例成员变量</strong></p><h3 id="2-2-3-静态方法及其访问"><a href="#2-2-3-静态方法及其访问" class="headerlink" title="2.2.3 静态方法及其访问"></a>2.2.3 静态方法及其访问</h3><p>有static修饰成员方法，说明这个成员方法是属于类的，这个成员方法称为<strong>类方法或者</strong>静态方法**。 直接用  类名访问即可。因为类只有一个，所以静态方法在内存区域中也只存在一份。所有的对象都可以共享这个方法。</p><p>与静态成员变量一样，静态方法也是直接通过<strong>类名.方法名称</strong>即可访问。</p><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">schoolName</span> <span class="operator">=</span> <span class="string">&quot;传智播客&quot;</span>； <span class="comment">// 属于类，只有一份。</span></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我们都在黑马程序员学习&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态成员变量的访问:</strong></p><p><strong>格式：类名.静态方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Student.study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-实例方法及其访问"><a href="#2-2-4-实例方法及其访问" class="headerlink" title="2.2.4 实例方法及其访问"></a>2.2.4 实例方法及其访问</h3><p>无static修饰的成员方法属于每个对象的，这个成员方法也叫做<strong>实例方法</strong>。</p><p><strong>需要注意的是</strong>：实例方法是属于每个对象，必须创建类的对象才可以访问。  </p><p><strong>格式：对象.实例方法</strong></p><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="comment">// 2.方法：行为</span></span><br><span class="line">    <span class="comment">// 无 static修饰，实例方法。属于每个对象，必须创建对象调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生可以跑步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 无 static修饰，实例方法</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象 </span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span> ;</span><br><span class="line">    stu.name = <span class="string">&quot;徐干&quot;</span>;</span><br><span class="line">    <span class="comment">// Student.sleep();// 报错，必须用对象访问。</span></span><br><span class="line">    stu.sleep();</span><br><span class="line">    stu.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h2><p>1.当 <code>static</code> 修饰成员变量或者成员方法时，该变量称为<strong>静态变量</strong>，该方法称为<strong>静态方法</strong>。该类的每个对象都<strong>共享</strong>同一个类的静态变量和静态方法。任何对象都可以更改该静态变量的值或者访问静态方法。但是不推荐这种方式去访问。因为静态变量或者静态方法直接通过类名访问即可，完全没有必要用对象去访问。</p><p>2.无static修饰的成员变量或者成员方法，称为<strong>实例变量，实例方法</strong>，实例变量和实例方法必须创建类的对象，然后通过对象来访问。</p><p>3.static修饰的成员属于类，会存储在静态区，是随着类的加载而加载的，且只加载一次，所以只有一份，节省内存。存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。它优先于对象存在，所以，可以被所有对象共享。</p><p>4.无static修饰的成员，是属于对象，对象有多少个，他们就会出现多少份。所以必须由对象调用。</p><h1 id="第三章-继承"><a href="#第三章-继承" class="headerlink" title="第三章 继承"></a>第三章 继承</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><h3 id="3-1-1-引入"><a href="#3-1-1-引入" class="headerlink" title="3.1.1 引入"></a>3.1.1 引入</h3><p>假如我们要定义如下类:<br>学生类,老师类和工人类，分析如下。</p><ol><li><p>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</p></li><li><p>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</p></li><li><p>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</p></li></ol><p>如果我们定义了这三个类去开发一个系统，那么这三个类中就存在大量重复的信息（属性:姓名，年龄。行为：吃饭，睡觉）。这样就导致了相同代码大量重复，代码显得很臃肿和冗余，那么如何解决呢？</p><p>假如多个类中存在相同属性和行为时，我们可以将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要<strong>继承</strong>那一个类即可。如图所示：<br><img src="/imgs/1.jpg"></p><p>其中，多个类可以称为<strong>子类</strong>，单独被继承的那一个类称为<strong>父类</strong>、<strong>超类（superclass）</strong>或者<strong>基类</strong>。</p><h3 id="3-1-2-继承的含义"><a href="#3-1-2-继承的含义" class="headerlink" title="3.1.2 继承的含义"></a>3.1.2 继承的含义</h3><p>继承描述的是事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。例如，兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><p><strong>继承</strong>：就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</p><h3 id="3-1-3-继承的好处"><a href="#3-1-3-继承的好处" class="headerlink" title="3.1.3 继承的好处"></a>3.1.3 继承的好处</h3><ol><li>提高<strong>代码的复用性</strong>（减少代码冗余，相同代码重复利用）。</li><li>使类与类之间产生了关系。</li></ol><h2 id="3-2-继承的格式"><a href="#3-2-继承的格式" class="headerlink" title="3.2 继承的格式"></a>3.2 继承的格式</h2><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意：Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。</strong></p><h2 id="3-3-继承案例"><a href="#3-3-继承案例" class="headerlink" title="3.3 继承案例"></a>3.3 继承案例</h2><h3 id="3-3-1-案例"><a href="#3-3-1-案例" class="headerlink" title="3.3.1 案例"></a>3.3.1 案例</h3><p>请使用继承定义以下类:</p><ol><li>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</li><li>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</li><li>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</li></ol><h3 id="3-3-2-案例图解分析"><a href="#3-3-2-案例图解分析" class="headerlink" title="3.3.2 案例图解分析"></a>3.3.2 案例图解分析</h3><p>老师类，学生类，还有班主任类，实际上都是属于人类的，我们可以定义一个人类，把他们相同的属性和行为都定义在人类中，然后继承人类即可，子类特有的属性和行为就定义在子类中了。</p><p>如下图所示。</p><p><img src="/imgs/360%E6%88%AA%E5%9B%BE20181202211331250.jpg"></p><h3 id="3-3-3-案例代码实现"><a href="#3-3-3-案例代码实现" class="headerlink" title="3.3.3 案例代码实现"></a>3.3.3 案例代码实现</h3><p><strong>1.父类Human类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">   <span class="comment">// 合理隐藏</span></span><br><span class="line">   <span class="keyword">private</span> String name ;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 合理暴露</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.子类Teacher类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师在认真教技术！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.子类Student类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.子类BanZhuren类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;班主任强调纪律问题！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.测试类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">dlei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        dlei.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        dlei.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        dlei.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(dlei.getName());</span><br><span class="line">        System.out.println(dlei.getAge());</span><br><span class="line">        System.out.println(dlei.getSalary());</span><br><span class="line">        dlei.teach();</span><br><span class="line">        </span><br><span class="line">        <span class="type">BanZhuRen</span> <span class="variable">linTao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BanZhuRen</span>();</span><br><span class="line">        linTao.setName(<span class="string">&quot;灵涛&quot;</span>);</span><br><span class="line">        linTao.setAge(<span class="string">&quot;28&quot;</span>);</span><br><span class="line">        linTao.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(linTao.getName());</span><br><span class="line">        System.out.println(linTao.getAge());</span><br><span class="line">        System.out.println(linTao.getSalary());</span><br><span class="line">        linTao.admin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xugan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        xugan.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        xugan.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        <span class="comment">//xugan.setSalary(1000.99); // xugan没有薪水属性，报错！</span></span><br><span class="line">        System.out.println(xugan.getName());</span><br><span class="line">        System.out.println(xugan.getAge());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-小结"><a href="#3-3-4-小结" class="headerlink" title="3.3.4 小结"></a>3.3.4 小结</h3><p>1.继承实际上是子类相同的属性和行为可以定义在父类中，子类特有的属性和行为由自己定义，这样就实现了相同属性和行为的重复利用，从而提高了代码复用。</p><p>2.子类继承父类，就可以直接得到父类的成员变量和方法。是否可以继承所有成分呢？请看下节！</p><h2 id="3-4-子类不能继承的内容"><a href="#3-4-子类不能继承的内容" class="headerlink" title="3.4 子类不能继承的内容"></a>3.4 子类不能继承的内容</h2><h3 id="3-4-1-引入"><a href="#3-4-1-引入" class="headerlink" title="3.4.1 引入"></a>3.4.1 引入</h3><p>并不是父类的所有内容都可以给子类继承的：</p><p><strong>子类不能继承父类的构造方法。</strong></p><p><strong>值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter&#x2F;setter方法访问父类的private成员变量。</strong></p><h3 id="3-4-1-演示代码"><a href="#3-4-1-演示代码" class="headerlink" title="3.4.1 演示代码"></a>3.4.1 演示代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">        System.out.println(z.num1);</span><br><span class="line"><span class="comment">//System.out.println(z.num2); // 私有的子类无法使用</span></span><br><span class="line">        <span class="comment">// 通过getter/setter方法访问父类的private成员变量</span></span><br><span class="line">        System.out.println(z.getNum2());</span><br><span class="line"></span><br><span class="line">        z.show1();</span><br><span class="line">        <span class="comment">// z.show2(); // 私有的子类无法使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum2</span><span class="params">(<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-继承后的特点—成员变量"><a href="#3-5-继承后的特点—成员变量" class="headerlink" title="3.5 继承后的特点—成员变量"></a>3.5 继承后的特点—成员变量</h2><p>当类之间产生了继承关系后，其中各类中的成员变量，又产生了哪些影响呢？</p><h3 id="3-5-1-成员变量不重名"><a href="#3-5-1-成员变量不重名" class="headerlink" title="3.5.1 成员变量不重名"></a>3.5.1 成员变量不重名</h3><p>如果子类父类中出现<strong>不重名</strong>的成员变量，这时的访问是<strong>没有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Zi中的成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span>+num); <span class="comment">// 继承而来，所以直接访问。</span></span><br><span class="line"><span class="comment">// 访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num2=&quot;</span>+num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z.show();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-成员变量重名"><a href="#3-5-2-成员变量重名" class="headerlink" title="3.5.2 成员变量重名"></a>3.5.2 成员变量重名</h3><p>如果子类父类中出现<strong>重名</strong>的成员变量，这时的访问是<strong>有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi1</span> <span class="keyword">extends</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span> + num);</span><br><span class="line"><span class="comment">// 访问子类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num=&quot;</span> + num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>子父类中出现了同名的成员变量时，子类会优先访问自己对象中的成员变量。如果此时想访问父类成员变量如何解决呢？我们可以使用super关键字。</p><h3 id="3-5-3-super访问父类成员变量"><a href="#3-5-3-super访问父类成员变量" class="headerlink" title="3.5.3  super访问父类成员变量"></a>3.5.3  super访问父类成员变量</h3><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用<code>super</code> 关键字，修饰父类成员变量，类似于之前学过的 <code>this</code> 。</p><p>需要注意的是：<strong>super代表的是父类对象的引用，this代表的是当前对象的引用。</strong></p><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.父类成员变量名</span><br></pre></td></tr></table></figure><p>子类方法需要修改，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 访问方法中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method num=&quot;</span> + num);</span><br><span class="line">        <span class="comment">// 访问子类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Zi num=&quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">        <span class="comment">// 访问父类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Fu num=&quot;</span> + <span class="built_in">super</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line">method num=<span class="number">1</span></span><br><span class="line">Zi num=<span class="number">6</span></span><br><span class="line">Fu num=<span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>小贴士：Fu 类中的成员变量是非私有的，子类中可以直接访问。若Fu 类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？对！可以在父类中提供公共的getXxx方法和setXxx方法。</p></blockquote><h2 id="3-6-继承后的特点—成员方法"><a href="#3-6-继承后的特点—成员方法" class="headerlink" title="3.6 继承后的特点—成员方法"></a>3.6 继承后的特点—成员方法</h2><p>当类之间产生了关系，其中各类中的成员方法，又产生了哪些影响呢？</p><h3 id="3-6-1-成员方法不重名"><a href="#3-6-1-成员方法不重名" class="headerlink" title="3.6.1 成员方法不重名"></a>3.6.1 成员方法不重名</h3><p>如果子类父类中出现<strong>不重名</strong>的成员方法，这时的调用是<strong>没有影响的</strong>。对象调用方法时，会先在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu类中的show方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi类中的show2方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">//子类中没有show方法，但是可以找到父类方法去执行</span></span><br><span class="line">z.show(); </span><br><span class="line">z.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2-成员方法重名"><a href="#3-6-2-成员方法重名" class="headerlink" title="3.6.2 成员方法重名"></a>3.6.2 成员方法重名</h3><p>如果子类父类中出现<strong>重名</strong>的成员方法，则创建子类对象调用该方法的时候，子类对象会优先调用自己的方法。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">//子类重写了父类的show方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDemo05</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">// 子类中有show方法，只执行重写后的show方法</span></span><br><span class="line">z.show();  <span class="comment">// Zi show</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-方法重写"><a href="#3-7-方法重写" class="headerlink" title="3.7 方法重写"></a>3.7 方法重写</h2><h3 id="3-7-1-概念"><a href="#3-7-1-概念" class="headerlink" title="3.7.1 概念"></a>3.7.1 概念</h3><p><strong>方法重写</strong> ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</p><h3 id="3-7-2-使用场景与案例"><a href="#3-7-2-使用场景与案例" class="headerlink" title="3.7.2 使用场景与案例"></a>3.7.2 使用场景与案例</h3><p>发生在子父类之间的关系。<br>子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方 法。</p><p>例如：我们定义了一个动物类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物跑的很快！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物都可以叫~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个猫类，猫可能认为父类cry()方法不能满足自己的需求</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line">      <span class="type">Cat</span> <span class="variable">ddm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>()；</span><br><span class="line">        <span class="comment">// 调用父类继承而来的方法</span></span><br><span class="line">        ddm.run();</span><br><span class="line">      <span class="comment">// 调用子类重写的方法</span></span><br><span class="line">      ddm.cry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-Override重写注解"><a href="#3-7-2-Override重写注解" class="headerlink" title="3.7.2 @Override重写注解"></a>3.7.2 @Override重写注解</h3><ul><li><p>@Override:注解，重写注解校验！</p></li><li><p>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</p></li><li><p>建议重写都加上这个注解，一方面可以提高代码的可读性，一方面可以防止重写出错！</p><p>加上后的子类代码形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="comment">// 声明不变，重新实现</span></span><br><span class="line">    <span class="comment">// 方法名称与父类全部一样，只是方法体中的功能重写写了！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-7-3-注意事项"><a href="#3-7-3-注意事项" class="headerlink" title="3.7.3 注意事项"></a>3.7.3 注意事项</h3><ol><li>方法重写是发生在子父类之间的关系。</li><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol><h2 id="3-8-继承后的特点—构造方法"><a href="#3-8-继承后的特点—构造方法" class="headerlink" title="3.8 继承后的特点—构造方法"></a>3.8 继承后的特点—构造方法</h2><h3 id="3-8-1-引入"><a href="#3-8-1-引入" class="headerlink" title="3.8.1 引入"></a>3.8.1 引入</h3><p>当类之间产生了关系，其中各类中的构造方法，又产生了哪些影响呢？<br>首先我们要回忆两个事情，构造方法的定义格式和作用。</p><ol><li>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的。</li><li>构造方法的作用是初始化对象成员变量数据的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个<code>super()</code> ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。（<strong>先有爸爸，才能有儿子</strong>）</li></ol><p><strong>继承后子类构方法器特点:子类所有构造方法的第一行都会默认先调用父类的无参构造方法</strong></p><h3 id="3-8-2-案例演示"><a href="#3-8-2-案例演示" class="headerlink" title="3.8.2 案例演示"></a>3.8.2 案例演示</h3><p>按如下需求定义类:</p><ol><li>人类<br>成员变量: 姓名,年龄<br>成员方法: 吃饭</li><li>学生类<br>成员变量: 姓名,年龄,成绩<br>成员方法: 吃饭</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">父类无参</span><br><span class="line">子类无参</span><br><span class="line">----------</span><br><span class="line">父类无参</span><br><span class="line">子类有参</span><br></pre></td></tr></table></figure><h3 id="3-8-3-小结"><a href="#3-8-3-小结" class="headerlink" title="3.8.3 小结"></a>3.8.3 小结</h3><ul><li>子类构造方法执行的时候，都会在第一行默认先调用父类无参数构造方法一次。</li><li>子类构造方法的第一行都隐含了一个**super()<strong>去调用父类无参数构造方法，</strong>super()**可以省略不写。</li></ul><h2 id="3-9-super-…-和this-…"><a href="#3-9-super-…-和this-…" class="headerlink" title="3.9 super(…)和this(…)"></a>3.9 super(…)和this(…)</h2><h3 id="3-9-1-引入"><a href="#3-9-1-引入" class="headerlink" title="3.9.1  引入"></a>3.9.1  引入</h3><p>请看上节中的如下案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99.9</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 null</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，子类有参数构造方法只是初始化了自己对象中的成员变量score，而父类中的成员变量name和age依然是没有数据的，怎么解决这个问题呢，我们可以借助与super(…)去调用父类构造方法，以便初始化继承自父类对象的name和age.</p><h3 id="3-9-2-super和this的用法格式"><a href="#3-9-2-super和this的用法格式" class="headerlink" title="3.9.2 super和this的用法格式"></a>3.9.2 super和this的用法格式</h3><p>super和this完整的用法如下，其中this，super访问成员我们已经接触过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.成员变量    --    本类的</span><br><span class="line"><span class="built_in">super</span>.成员变量    --    父类的</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.成员方法名()  --    本类的    </span><br><span class="line"><span class="built_in">super</span>.成员方法名()   --    父类的</span><br></pre></td></tr></table></figure><p>接下来我们使用调用构造方法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(...) -- 调用父类的构造方法，根据参数匹配确认</span><br><span class="line"><span class="built_in">this</span>(...) -- 调用本类的其他构造方法，根据参数匹配确认</span><br></pre></td></tr></table></figure><h3 id="3-9-3-super-…-用法演示"><a href="#3-9-3-super-…-用法演示" class="headerlink" title="3.9.3 super(….)用法演示"></a>3.9.3 super(….)用法演示</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;凤姐&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name ， <span class="type">int</span> age，<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name ,age);<span class="comment">// 调用父类有参构造方法Person(String name , int age)初始化name和age</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>，<span class="number">20</span>，<span class="number">99</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 张三</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></p><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p><p>super(..)是根据参数去确定调用父类哪个构造方法的。</p><h3 id="3-9-4-super-…-案例图解"><a href="#3-9-4-super-…-案例图解" class="headerlink" title="3.9.4 super(…)案例图解"></a>3.9.4 super(…)案例图解</h3><p><strong>父类空间优先于子类对象产生</strong></p><p>在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造七调用时，一定先调用父类的构造方法。理解图解如下：</p><p><img src="/imgs/2.jpg"></p><h3 id="3-9-5-this-…-用法演示"><a href="#3-9-5-this-…-用法演示" class="headerlink" title="3.9.5 this(…)用法演示"></a>3.9.5 this(…)用法演示</h3><p>this(…)</p><ul><li>默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。</li><li>为了借用其他构造方法的功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._08this和<span class="built_in">super</span>调用构造方法;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this(...):</span></span><br><span class="line"><span class="comment"> *    默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。</span></span><br><span class="line"><span class="comment"> *    为了借用其他构造方法的功能。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xuGan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(xuGan.getName()); <span class="comment">// 输出:徐干</span></span><br><span class="line">        System.out.println(xuGan.getAge());<span class="comment">// 输出:21</span></span><br><span class="line">        System.out.println(xuGan.getSex());<span class="comment">// 输出： 男</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 很弱，我的兄弟很牛逼啊，我可以调用其他构造方法：Student(String name, int age, char sex)</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;徐干&quot;</span>,<span class="number">21</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age   ;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex   ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-6-小结"><a href="#3-9-6-小结" class="headerlink" title="3.9.6 小结"></a>3.9.6 小结</h3><ul><li><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></p></li><li><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p></li><li><p><strong>super(..)和this(…)是根据参数去确定调用父类哪个构造方法的。</strong></p></li><li><p>super(..)可以调用父类构造方法初始化继承自父类的成员变量的数据。</p></li><li><p>this(..)可以调用本类中的其他构造方法。</p></li></ul><h2 id="3-10-继承的特点"><a href="#3-10-继承的特点" class="headerlink" title="3.10 继承的特点"></a>3.10 继承的特点</h2><ol><li><p>Java只支持单继承，不支持多继承。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个类只能有一个父类，不可以有多个父类。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125; <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// class C2 extends A, B &#123;&#125; // error</span></span><br></pre></td></tr></table></figure></li><li><p>一个类可以有多个子类。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A可以有多个子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C2</span> <span class="keyword">extends</span>  <span class="title class_">A</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以多层继承。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">C1</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote></li></ol><h2 id="4-关于今天知识的小结："><a href="#4-关于今天知识的小结：" class="headerlink" title="4. 关于今天知识的小结："></a>4. 关于今天知识的小结：</h2><p>会写一个继承结构下的标准Javabean即可</p><p>需求：</p><p>​猫：属性，姓名，年龄，颜色</p><p>​狗：属性，姓名，年龄，颜色，吼叫</p><p> 分享书写技巧：</p><p>​        1.在大脑中要区分谁是父，谁是子</p><p>​        2.把共性写到父类中，独有的东西写在子类中</p><p>​        3.开始编写标准Javabean（从上往下写）</p><p>​        4.在测试类中，创建对象并赋值调用</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">//姓名，年龄，颜色</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//因为猫类中没有独有的属性。</span></span><br><span class="line">    <span class="comment">//所以此时不需要写私有的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要带子类和父类中所有的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age,color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//Dog ：吼叫</span></span><br><span class="line">    <span class="keyword">private</span> String wang;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造：带子类加父类所有的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age, String color,String wang)</span> &#123;</span><br><span class="line">        <span class="comment">//共性的属性交给父类赋值</span></span><br><span class="line">        <span class="built_in">super</span>(name,age,color);</span><br><span class="line">        <span class="comment">//独有的属性自己赋值</span></span><br><span class="line">        <span class="built_in">this</span>.wang = wang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWang</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWang</span><span class="params">(String wang)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wang = wang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Animal ： 姓名，年龄，颜色</span></span><br><span class="line">        <span class="comment">//Cat :</span></span><br><span class="line">        <span class="comment">//Dog ：吼叫</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建狗的对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">2</span>,<span class="string">&quot;黑色&quot;</span>,<span class="string">&quot;嗷呜~~&quot;</span>);</span><br><span class="line">        System.out.println(d.getName()+<span class="string">&quot;, &quot;</span> + d.getAge() + <span class="string">&quot;, &quot;</span> + d.getColor() + <span class="string">&quot;, &quot;</span> + d.getWang());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建猫的对象</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;中华田园猫&quot;</span>,<span class="number">3</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">        System.out.println(c.getName() + <span class="string">&quot;, &quot;</span> + c.getAge() + <span class="string">&quot;, &quot;</span> + c.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式_练习</title>
      <link href="/2023/01/20/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-03/"/>
      <url>/2023/01/20/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-03/</url>
      
        <content type="html"><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>正则表达式</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled="" type="checkbox"> 能够理解正则表达式的作用</li><li><input disabled="" type="checkbox"> 能够使用正则表达式的字符类</li><li><input disabled="" type="checkbox"> 能够使用正则表达式的逻辑运算符</li><li><input disabled="" type="checkbox"> 能够使用正则表达式的预定义字符类</li><li><input disabled="" type="checkbox"> 能够使用正则表达式的限定符</li><li><input disabled="" type="checkbox"> 能够使用正则表达式的分组</li><li><input disabled="" type="checkbox"> 能够在String的split方法中使用正则表达式</li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="1-1-正则表达式的概念及演示"><a href="#1-1-正则表达式的概念及演示" class="headerlink" title="1.1 正则表达式的概念及演示"></a>1.1 正则表达式的概念及演示</h2><ul><li>在Java中，我们经常需要验证一些字符串，例如：年龄必须是2位的数字、用户名必须是8位长度而且只能包含大小写字母、数字等。正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，我们可以验证用户输入的字符串是否匹配这个规则。</li><li>先看一个不使用正则表达式验证的例子：下面的程序让用户输入一个QQ号码，我们要验证：<ul><li>QQ号码必须是5–15位长度</li><li>而且必须全部是数字</li><li>而且首位不能为0</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 假如现在要求校验一个qq号码是否正确。</span></span><br><span class="line"><span class="comment">            规则:6位及20位之内，日不能在开头，必须全部是数字。</span></span><br><span class="line"><span class="comment">            先使用目前所学知识完成校验需求然后体验一下正则表达式检验。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">qq</span> <span class="operator">=</span><span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">        System.out.println(checkQQ(qq));</span><br><span class="line"></span><br><span class="line">        System.out.println(qq.matches(<span class="string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkQQ</span><span class="params">(String qq)</span> &#123;</span><br><span class="line">        <span class="comment">//规则:6位及20位之内，日不能在开头，必须全部是数字 。</span></span><br><span class="line">        <span class="comment">//核心思想:</span></span><br><span class="line">        <span class="comment">//先把异常数据进行过滤</span></span><br><span class="line">        <span class="comment">//下面的就是满足要求的数据了。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> qq.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">6</span> || len &gt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//0不能在开头</span></span><br><span class="line">        <span class="keyword">if</span> (qq.startsWith(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//必须全部是数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; qq.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> qq.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> | c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用正则表达式验证：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">qq</span> <span class="operator">=</span><span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">        System.out.println(qq.matches(<span class="string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们接下来就重点学习怎样写正则表达式</strong></p><h2 id="1-2-正则表达式-字符类"><a href="#1-2-正则表达式-字符类" class="headerlink" title="1.2 正则表达式-字符类"></a>1.2 正则表达式-字符类</h2><ul><li>语法示例：</li></ul><ol><li>[abc]：代表a或者b，或者c字符中的一个。</li><li>[^abc]：代表除a,b,c以外的任何字符。</li><li>[a-z]：代表a-z的所有小写字符中的一个。</li><li>[A-Z]：代表A-Z的所有大写字符中的一个。</li><li>[0-9]：代表0-9之间的某一个数字字符。</li><li>[a-zA-Z0-9]：代表a-z或者A-Z或者0-9之间的任意一个字符。</li><li>[a-dm-p]：a 到 d 或 m 到 p之间的任意一个字符。</li></ol><ul><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public boolean matches(String regex):判断是否与正则表达式匹配，匹配返回true</span></span><br><span class="line">        <span class="comment">// 只能是a b c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------1-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不能出现a b c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------2-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc][^abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// a到zA到Z(包括头尾的范围)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------3-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aa&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z][a-zA-Z]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-d[m-p]] a到d，或m到p</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------4-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;p&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;e&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[def]] a-z和def的交集。为:d，e，f</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------5------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^bc]] a-z和非bc的交集。(等同于[ad-z])</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------6------------_&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^m-p]] a到z和除了m到p的交集。(等同于[a-1q-z])</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------7-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-正则表达式-逻辑运算符"><a href="#1-3-正则表达式-逻辑运算符" class="headerlink" title="1.3 正则表达式-逻辑运算符"></a>1.3 正则表达式-逻辑运算符</h2><ul><li>语法示例：<ol><li>&amp;&amp;：并且</li><li>|    ：或者</li><li>\  ：转义字符</li></ol></li><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;had&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.要求字符串是小写辅音字符开头，后跟ad</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[a-z&amp;&amp;[^aeiou]]ad&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;1.&quot;</span> + str.matches(regex));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.要求字符串是aeiou中的某个字符开头，后跟ad</span></span><br><span class="line">regex = <span class="string">&quot;[a|e|i|o|u]ad&quot;</span>;<span class="comment">//这种写法相当于：regex = &quot;[aeiou]ad&quot;;</span></span><br><span class="line">System.out.println(<span class="string">&quot;2.&quot;</span> + str.matches(regex));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// \ 转义字符 改变后面那个字符原本的含义</span></span><br><span class="line">        <span class="comment">//练习:以字符串的形式打印一个双引号</span></span><br><span class="line">        <span class="comment">//&quot;在Java中表示字符串的开头或者结尾</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时\表示转义字符，改变了后面那个双引号原本的含义</span></span><br><span class="line">        <span class="comment">//把他变成了一个普普通通的双引号而已。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// \表示转义字符</span></span><br><span class="line">        <span class="comment">//两个\的理解方式：前面的\是一个转义字符，改变了后面\原本的含义，把他变成一个普普通通的\而已。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c:Users\\moon\\IdeaProjects\\basic-code\\myapi\\src\\com\\itheima\\a08regexdemo\\RegexDemo1.java&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-4-正则表达式-预定义字符"><a href="#1-4-正则表达式-预定义字符" class="headerlink" title="1.4 正则表达式-预定义字符"></a>1.4 正则表达式-预定义字符</h2><ul><li>语法示例：<ol><li>“.” ： 匹配任何字符。</li><li>“\d”：任何数字[0-9]的简写；</li><li>“\D”：任何非数字[^0-9]的简写；</li><li>“\s”： 空白字符：[ \t\n\x0B\f\r] 的简写</li><li>“\S”： 非空白字符：[^\s] 的简写</li><li>“\w”：单词字符：[a-zA-Z_0-9]的简写</li><li>“\W”：非单词字符：[^\w]</li></ol></li><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//.表示任意一个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;..&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;.&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你a&quot;</span>.matches(<span class="string">&quot;..&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\d 表示任意的一个数字</span></span><br><span class="line">        <span class="comment">// \\d只能是任意的一位数字</span></span><br><span class="line">        <span class="comment">// 简单来记:两个\表示一个\</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;333&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//\\w只能是一位单词字符[a-zA-Z_0-9]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;21&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非单词字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\W&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 以上正则匹配只能校验单个字符。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字 字母 下划线 至少 6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2442fsfsf&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;244f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23 F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-正则表达式-数量词"><a href="#1-5-正则表达式-数量词" class="headerlink" title="1.5 正则表达式-数量词"></a>1.5 正则表达式-数量词</h2><ul><li>语法示例：<ol><li>X? : 0次或1次</li><li>X* : 0次到多次</li><li>X+ : 1次或多次</li><li>X{n} : 恰好n次</li><li>X{n,} : 至少n次</li><li>X{n,m}: n到m次(n和m都是包含的)</li></ol></li><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="comment">// 必须是数字 字母 下划线 至少 6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2442fsfsf&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;244f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23 F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-6-正则表达式练习1"><a href="#1-6-正则表达式练习1" class="headerlink" title="1.6 正则表达式练习1"></a>1.6 正则表达式练习1</h2><p>需求：</p><p>​请编写正则表达式验证用户输入的手机号码是否满足要求。</p><p>​请编写正则表达式验证用户输入的邮箱号是否满足要求。</p><p>​请编写正则表达式验证用户输入的电话号码是否满足要求。</p><p>​验证手机号码 13112345678 13712345667 13945679027 139456790271</p><p>​验证座机电话号码 020-2324242 02122442 027-42424 0712-3242434</p><p>​验证邮箱号码 <a href="mailto:&#x33;&#50;&#x33;&#50;&#51;&#x32;&#51;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;">&#x33;&#50;&#x33;&#50;&#51;&#x32;&#51;&#x40;&#x71;&#x71;&#46;&#99;&#111;&#109;</a> <a href="mailto:&#x7a;&#104;&#x61;&#x6e;&#103;&#x73;&#x61;&#110;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#116;&#46;&#x63;&#110;&#x6e;">&#x7a;&#104;&#x61;&#x6e;&#103;&#x73;&#x61;&#110;&#x40;&#105;&#x74;&#99;&#97;&#x73;&#116;&#46;&#x63;&#110;&#x6e;</a> <a href="mailto:&#100;&#x6c;&#101;&#105;&#48;&#x30;&#48;&#x39;&#64;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#109;">&#100;&#x6c;&#101;&#105;&#48;&#x30;&#48;&#x39;&#64;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#109;</a> <a href="mailto:&#100;&#x6c;&#x65;&#105;&#48;&#x30;&#x30;&#x39;&#64;&#x70;&#99;&#105;&#x2e;&#x63;&#x6f;&#x6d;&#46;&#x63;&#x6e;">&#100;&#x6c;&#x65;&#105;&#48;&#x30;&#x30;&#x39;&#64;&#x70;&#99;&#105;&#x2e;&#x63;&#x6f;&#x6d;&#46;&#x63;&#x6e;</a></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证用户输入的手机号码是否满足要求。请编写正则表达式验证用户输入的邮箱号是否满足要求。请编写正则表达式验证用户输入的电话号码是否满足要求。</span></span><br><span class="line"><span class="comment">            验证手机号码 13112345678 13712345667 13945679027 139456790271</span></span><br><span class="line"><span class="comment">            验证座机电话号码 020-2324242 02122442 027-42424 0712-3242434</span></span><br><span class="line"><span class="comment">            验证邮箱号码 3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//心得:</span></span><br><span class="line">        <span class="comment">//拿着一个正确的数据，从左到右依次去写。</span></span><br><span class="line">        <span class="comment">//13112345678</span></span><br><span class="line">        <span class="comment">//分成三部分:</span></span><br><span class="line">        <span class="comment">//第一部分:1 表示手机号码只能以1开头</span></span><br><span class="line">        <span class="comment">//第二部分:[3-9] 表示手机号码第二位只能是3-9之间的</span></span><br><span class="line">        <span class="comment">//第三部分:\\d&#123;9&#125; 表示任意数字可以出现9次，也只能出现9次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;1[3-9]\\d&#123;9&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;13112345678&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;13712345667&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;13945679027&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;139456790271&quot;</span>.matches(regex1));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//座机电话号码</span></span><br><span class="line">        <span class="comment">//020-2324242 02122442 027-42424 0712-3242434</span></span><br><span class="line">        <span class="comment">//思路:</span></span><br><span class="line">        <span class="comment">//在书写座机号正则的时候需要把正确的数据分为三部分</span></span><br><span class="line">        <span class="comment">//一:区号@\\d&#123;2,3&#125;</span></span><br><span class="line">        <span class="comment">//      0:表示区号一定是以0开头的</span></span><br><span class="line">        <span class="comment">//      \\d&#123;2,3&#125;:表示区号从第二位开始可以是任意的数字，可以出现2到3次。</span></span><br><span class="line">        <span class="comment">//二:- ?表示次数，日次或一次</span></span><br><span class="line">        <span class="comment">//三:号码 号码的第一位也不能以日开头，从第二位开始可以是任意的数字，号码的总长度:5-10位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;0\\d&#123;2,3&#125;-?[1-9]\\d&#123;4,9&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;020-2324242&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;02122442&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;027-42424&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;0712-3242434&quot;</span>.matches(regex2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//邮箱号码</span></span><br><span class="line">        <span class="comment">//3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn</span></span><br><span class="line">        <span class="comment">//思路:</span></span><br><span class="line">        <span class="comment">//在书写邮箱号码正则的时候需要把正确的数据分为三部分</span></span><br><span class="line">        <span class="comment">//第一部分:@的左边 \\w+</span></span><br><span class="line">        <span class="comment">//      任意的字母数字下划线，至少出现一次就可以了</span></span><br><span class="line">        <span class="comment">//第二部分:@ 只能出现一次</span></span><br><span class="line">        <span class="comment">//第三部分:</span></span><br><span class="line">        <span class="comment">//      3.1         .的左边[\\w&amp;&amp;[^_]]&#123;2,6&#125;</span></span><br><span class="line">        <span class="comment">//                  任意的字母加数字，总共出现2-6次(此时不能出现下划线)</span></span><br><span class="line">        <span class="comment">//      3.2         . \\.</span></span><br><span class="line">        <span class="comment">//      3.3         大写字母，小写字母都可以，只能出现2-3次[a-zA-Z]&#123;2,3&#125;</span></span><br><span class="line">        <span class="comment">//      我们可以把3.2和3.3看成一组，这一组可以出现1次或者两次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;3232323@qq.com&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;zhangsan@itcast.cnn&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;dlei0009@163.com&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;dlei0009@pci.com.cn&quot;</span>.matches(regex3));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//24小时的正则表达式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;23:11:11&quot;</span>.matches(regex4));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex5</span> <span class="operator">=</span> <span class="string">&quot;([01]\\d 2[0-3])(:[0-5]\\d)&#123;2&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;23:11:11&quot;</span>.matches(regex5));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-7-正则表达式练习2"><a href="#1-7-正则表达式练习2" class="headerlink" title="1.7 正则表达式练习2"></a>1.7 正则表达式练习2</h2><p>需求<br>    请编写正则表达式验证用户名是否满足要求。要求:大小写字母，数字，下划线一共4-16位<br>    请编写正则表达式验证身份证号码是否满足要求。<br>    简单要求:<br>            18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x<br>    复杂要求:<br>            按照身份证号码的格式严格要求。</p><p>​身份证号码:<br>​41080119930228457x<br>​510801197609022309<br>​15040119810705387X<br>​130133197204039024<br>​430102197606046442</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正则表达式练习:</span></span><br><span class="line"><span class="comment">            需求</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证用户名是否满足要求。要求:大小写字母，数字，下划线一共4-16位</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证身份证号码是否满足要求。</span></span><br><span class="line"><span class="comment">            简单要求:</span></span><br><span class="line"><span class="comment">                18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x</span></span><br><span class="line"><span class="comment">            复杂要求:</span></span><br><span class="line"><span class="comment">                按照身份证号码的格式严格要求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            身份证号码:</span></span><br><span class="line"><span class="comment">            41080119930228457x</span></span><br><span class="line"><span class="comment">            510801197609022309</span></span><br><span class="line"><span class="comment">            15040119810705387X</span></span><br><span class="line"><span class="comment">            130133197204039024 I</span></span><br><span class="line"><span class="comment">            430102197606046442</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户名要求:大小写字母，数字，下划线一共4-16位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;\\w&#123;4,16&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;zhangsan&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;lisi&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;wangwu&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;$123&quot;</span>.matches(regex1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份证号码的简单校验:</span></span><br><span class="line">        <span class="comment">//18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d|x|x)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;[\\dXx]&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex5</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d(?i)x)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;510801197609022309&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;15040119810705387X&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;130133197204039024&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;430102197606046442&quot;</span>.matches(regex3));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略大小写的书写方式</span></span><br><span class="line">        <span class="comment">//在匹配的时候忽略abc的大小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;a((?i)b)c&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.matches(regex4));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABC&quot;</span>.matches(regex4));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aBc&quot;</span>.matches(regex4));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份证号码的严格校验</span></span><br><span class="line">        <span class="comment">//编写正则的小心得:</span></span><br><span class="line">        <span class="comment">//第一步:按照正确的数据进行拆分</span></span><br><span class="line">        <span class="comment">//第二步:找每一部分的规律，并编写正则表达式</span></span><br><span class="line">        <span class="comment">//第三步:把每一部分的正则拼接在一起，就是最终的结果</span></span><br><span class="line">        <span class="comment">//书写的时候:从左到右去书写。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//410801 1993 02 28 457x</span></span><br><span class="line">        <span class="comment">//前面6位:省份，市区，派出所等信息，第一位不能是0，后面5位是任意数字       [1-9]\\d&#123;5&#125;</span></span><br><span class="line">        <span class="comment">//年的前半段: 18 19 20                                                (18|19|20)</span></span><br><span class="line">        <span class="comment">//年的后半段: 任意数字出现两次                                           \\d&#123;2&#125;</span></span><br><span class="line">        <span class="comment">//月份: 01~ 09 10 11 12                                               (@[1-9]|1[0-2])</span></span><br><span class="line">        <span class="comment">//日期: 01~09 10~19 20~29 30 31                                       (0[1-9]|[12]\\d|3[01])</span></span><br><span class="line">        <span class="comment">//后面四位: 任意数字出现3次 最后一位可以是数字也可以是大写x或者小写x        \\d&#123;3&#125;[\\dXx]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex6</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;5&#125;(18|19|20)\\d&#123;2&#125;(@[1-9]|1[0-2])(@[1-9]|[12]\\d|3[01])\\d&#123;3&#125;[\\dxXx]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;510801197609022309&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;15040119810705387X&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;130133197204039024&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;430102197606046442&quot;</span>.matches(regex6));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-8-本地数据爬取"><a href="#1-8-本地数据爬取" class="headerlink" title="1.8 本地数据爬取"></a>1.8 本地数据爬取</h2><p>Pattern：表示正则表达式<br>Matcher：文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取。<br>             在大串中去找符合匹配规则的子串。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 有如下文本，请按照要求爬取数据。</span></span><br><span class="line"><span class="comment">                Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，</span></span><br><span class="line"><span class="comment">                因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment">                要求:找出里面所有的JavaXX</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//拿着m去读取str，找符合p规则的子串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用循环获取</span></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> m.group();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//Pattern:表示正则表达式</span></span><br><span class="line">        <span class="comment">//Matcher: 文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取。</span></span><br><span class="line">        <span class="comment">//          在大串中去找符合匹配规则的子串。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//m:文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//str:大串</span></span><br><span class="line">        <span class="comment">//p:规则</span></span><br><span class="line">        <span class="comment">//m要在str中找符合p规则的小串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿着文本匹配器从头开始读取，寻找是否有满足规则的子串</span></span><br><span class="line">        <span class="comment">//如果没有，方法返回false</span></span><br><span class="line">        <span class="comment">//如果有，返回true。在底层记录子串的起始索引和结束索引+1</span></span><br><span class="line">        <span class="comment">// 0,4</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> m.find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法底层会根据find方法记录的索引进行字符串的截取</span></span><br><span class="line">        <span class="comment">// substring(起始索引，结束索引);包头不包尾</span></span><br><span class="line">        <span class="comment">// (0,4)但是不包含4索引</span></span><br><span class="line">        <span class="comment">// 会把截取的小串进行返回。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次在调用find的时候，会继续读取后面的内容</span></span><br><span class="line">        <span class="comment">//读取到第二个满足要求的子串，方法会继续返回true</span></span><br><span class="line">        <span class="comment">//并把第二个子串的起始索引和结束索引+1，进行记录</span></span><br><span class="line">        b = m.find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次调用group方法的时候，会根据find方法记录的索引再次截取子串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-网络数据爬取（了解）"><a href="#1-9-网络数据爬取（了解）" class="headerlink" title="1.9 网络数据爬取（了解）"></a>1.9 网络数据爬取（了解）</h2><p>需求：</p><p>​把连接:<a href="https://m.sengzan.com/jiaoyu/29104.html?ivk">https://m.sengzan.com/jiaoyu/29104.html?ivk</a> sa&#x3D;1025883i中所有的身份证号码都爬取出来。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/* 扩展需求2:</span></span><br><span class="line"><span class="comment">            把连接:https://m.sengzan.com/jiaoyu/29104.html?ivk sa=1025883i</span></span><br><span class="line"><span class="comment">            中所有的身份证号码都爬取出来。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个URL对象</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://m.sengzan.com/jiaoyu/29104.html?ivk sa=1025883i&quot;</span>);</span><br><span class="line">        <span class="comment">//连接上这个网址</span></span><br><span class="line">        <span class="comment">//细节:保证网络是畅通</span></span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> url.openConnection();<span class="comment">//创建一个对象去读取网络中的数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(conn.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="comment">//获取正则表达式的对象pattern</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;17&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);<span class="comment">//在读取的时候每次读一整行</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//拿着文本匹配器的对象matcher按照pattern的规则去读取当前的这一行信息</span></span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(line);</span><br><span class="line">            <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                System.out.println(matcher.group());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-10-爬取数据练习"><a href="#1-10-爬取数据练习" class="headerlink" title="1.10 爬取数据练习"></a>1.10 爬取数据练习</h2><p>需求：</p><p>​把下面文本中的座机电话，邮箱，手机号，热线都爬取出来。</p><p>来黑马程序员学习Java，手机号:18512516758，18512508907或者联系邮箱:<a href="mailto:&#x62;&#x6f;&#x6e;&#x69;&#x75;&#x40;&#105;&#116;&#99;&#x61;&#x73;&#116;&#46;&#99;&#110;">&#x62;&#x6f;&#x6e;&#x69;&#x75;&#x40;&#105;&#116;&#99;&#x61;&#x73;&#116;&#46;&#99;&#110;</a>，座机电话:01036517895，010-98951256邮箱:<a href="mailto:&#98;&#111;&#122;&#97;&#105;&#64;&#105;&#x74;&#x63;&#x61;&#115;&#116;&#46;&#99;&#110;">&#98;&#111;&#122;&#97;&#105;&#64;&#105;&#x74;&#x63;&#x61;&#115;&#116;&#46;&#99;&#110;</a>，热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090手机号的正则表达式:1[3-9]\d{9}</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求:把下面文本中的座机电话，邮箱，手机号，热线都爬取出来。</span></span><br><span class="line"><span class="comment">            来黑马程序员学习Java，</span></span><br><span class="line"><span class="comment">            手机号:18512516758，18512508907或者联系邮箱:boniu@itcast.cn，</span></span><br><span class="line"><span class="comment">            座机电话:01036517895，010-98951256邮箱:bozai@itcast.cn，</span></span><br><span class="line"><span class="comment">            热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            手机号的正则表达式:1[3-9]\d&#123;9&#125;</span></span><br><span class="line"><span class="comment">            邮箱的正则表达式:\w+@[\w&amp;&amp;[^_]]&#123;2,6&#125;(\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;座机电话的正则表达式:θ\d&#123;2,3&#125;-?[1-9]\d&#123;4,9&#125;</span></span><br><span class="line"><span class="comment">            热线电话的正则表达式:400-?[1-9]\\d&#123;2&#125;-?[1-9]\\d&#123;3&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;来黑马程序员学习Java，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;电话:18512516758，18512508907&quot;</span> + <span class="string">&quot;或者联系邮箱:boniu@itcast.cn，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;座机电话:01036517895，010-98951256&quot;</span> + <span class="string">&quot;邮箱:bozai@itcast.cn，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;400-618-9090&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(1[3-9]\\d&#123;9&#125;)|(\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;|(0\\d&#123;2,3&#125;-?[1-9]\\d&#123;4,9&#125;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(400-?[1-9]\\d&#123;2&#125;-?[1-9]\\d&#123;3&#125;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//利用m去读取s，会按照p的规则找里面的小串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line">        <span class="comment">//3.利用循环获取每一个数据 while(m.find())&#123;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-按要求爬取"><a href="#1-11-按要求爬取" class="headerlink" title="1.11 按要求爬取"></a>1.11 按要求爬取</h2><p>需求：</p><p>​有如下文本，按要求爬取数据。   </p><p>​ Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台。</p><p>需求1：</p><p>​爬取版本号为8，11.17的Java文本，但是只要Java，不显示版本号。</p><p>需求2：</p><p>​爬取版本号为8，11，17的Java文本。正确爬取结果为：Java8 Java11 Java17 Java17</p><p>需求3：</p><p>​爬取除了版本号为8，11，17的Java文本。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有如下文本，按要求爬取数据。</span></span><br><span class="line"><span class="comment">                Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，</span></span><br><span class="line"><span class="comment">                因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            需求1:爬取版本号为8，11.17的Java文本，但是只要Java，不显示版本号。</span></span><br><span class="line"><span class="comment">            需求2:爬取版本号为8，11，17的Java文本。正确爬取结果为:Java8 Java11 Java17 Java17</span></span><br><span class="line"><span class="comment">            需求3:爬取除了版本号为8，11.17的Java文本，</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">            <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义正则表达式</span></span><br><span class="line">        <span class="comment">//?理解为前面的数据Java</span></span><br><span class="line">        <span class="comment">//=表示在Java后面要跟随的数据</span></span><br><span class="line">        <span class="comment">//但是在获取的时候，只获取前半部分</span></span><br><span class="line">        <span class="comment">//需求1:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?=8|11|17)&quot;</span>;</span><br><span class="line">        <span class="comment">//需求2:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(8|11|17)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?:8|11|17)&quot;</span>;</span><br><span class="line">        <span class="comment">//需求3:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?!8|11|17)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex4);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-12-贪婪爬取和非贪婪爬取"><a href="#1-12-贪婪爬取和非贪婪爬取" class="headerlink" title="1.12 贪婪爬取和非贪婪爬取"></a>1.12 贪婪爬取和非贪婪爬取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">只写+和表示贪婪匹配，如果在+和后面加问号表示非贪婪爬取</span><br><span class="line">+? 非贪婪匹配</span><br><span class="line">*? 非贪婪匹配</span><br><span class="line">贪婪爬取:在爬取数据的时候尽可能的多获取数据</span><br><span class="line">非贪婪爬取:在爬取数据的时候尽可能的少获取数据</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">如果获取数据：ab+</span><br><span class="line">贪婪爬取获取结果:abbbbbbbbbbbb</span><br><span class="line">非贪婪爬取获取结果:ab</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            只写+和*表示贪婪匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            +? 非贪婪匹配</span></span><br><span class="line"><span class="comment">            *? 非贪婪匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            贪婪爬取:在爬取数据的时候尽可能的多获取数据</span></span><br><span class="line"><span class="comment">            非贪婪爬取:在爬取数据的时候尽可能的少获取数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            ab+:</span></span><br><span class="line"><span class="comment">            贪婪爬取:abbbbbbbbbbbb</span></span><br><span class="line"><span class="comment">            非贪婪爬取:ab</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，abbbbbbbbbbbbaaaaaaaaaaaaaaaaaa&quot;</span> +</span><br><span class="line">                <span class="string">&quot;经历了很多版木，目前企业中用的最多的是]ava8和]ava11，因为这两个是长期支持版木。&quot;</span> +</span><br><span class="line">                <span class="string">&quot;下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;ab+&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-13-String的split方法中使用正则表达式"><a href="#1-13-String的split方法中使用正则表达式" class="headerlink" title="1.13 String的split方法中使用正则表达式"></a>1.13 String的split方法中使用正则表达式</h2><ul><li><p>String类的split()方法原型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex)</span><br><span class="line"><span class="comment">//参数regex表示正则表达式。可以将当前字符串中匹配regex正则表达式的符号作为&quot;分隔符&quot;来切割字符串。</span></span><br></pre></td></tr></table></figure></li><li><p>代码示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一段字符串:小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠</span></span><br><span class="line"><span class="comment">            要求1:把字符串中三个姓名之间的字母替换为vs</span></span><br><span class="line"><span class="comment">            要求2:把字符串中的三个姓名切割出来*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠&quot;</span>;</span><br><span class="line"><span class="comment">//细节:</span></span><br><span class="line"><span class="comment">//方法在底层跟之前一样也会创建文本解析器的对象</span></span><br><span class="line"><span class="comment">//然后从头开始去读取字符串中的内容，只要有满足的，那么就切割。</span></span><br><span class="line">String[] arr = s.split(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-14-String类的replaceAll方法中使用正则表达式"><a href="#1-14-String类的replaceAll方法中使用正则表达式" class="headerlink" title="1.14 String类的replaceAll方法中使用正则表达式"></a>1.14 String类的replaceAll方法中使用正则表达式</h2><ul><li>String类的replaceAll()方法原型：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceAll</span><span class="params">(String regex,String newStr)</span></span><br><span class="line"><span class="comment">//参数regex表示一个正则表达式。可以将当前字符串中匹配regex正则表达式的字符串替换为newStr。</span></span><br></pre></td></tr></table></figure><ul><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一段字符串:小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠</span></span><br><span class="line"><span class="comment">            要求1:把字符串中三个姓名之间的字母替换为vs</span></span><br><span class="line"><span class="comment">            要求2:把字符串中的三个姓名切割出来*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠&quot;</span>;</span><br><span class="line"><span class="comment">//细节:</span></span><br><span class="line"><span class="comment">//方法在底层跟之前一样也会创建文本解析器的对象</span></span><br><span class="line"><span class="comment">//然后从头开始去读取字符串中的内容，只要有满足的，那么就用第一个参数去替换。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> s.replaceAll(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>, <span class="string">&quot;vs&quot;</span>);</span><br><span class="line">System.out.println(result1);</span><br></pre></td></tr></table></figure><h2 id="1-15-正则表达式-分组括号"><a href="#1-15-正则表达式-分组括号" class="headerlink" title="1.15 正则表达式-分组括号( )"></a>1.15 正则表达式-分组括号( )</h2><p>细节：如何识别组号？</p><p>只看左括号，不看有括号，按照左括号的顺序，从左往右，依次为第一组，第二组，第三组等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求1:判断一个字符串的开始字符和结束字符是否一致?只考虑一个字符</span></span><br><span class="line"><span class="comment">//举例: a123a b456b 17891 &amp;abc&amp; a123b(false)</span></span><br><span class="line"><span class="comment">// \\组号:表示把第X组的内容再出来用一次</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;(.).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a123a&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;b456b&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;17891&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;abc&amp;&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;a123b&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求2:判断一个字符串的开始部分和结束部分是否一致?可以有多个字符</span></span><br><span class="line"><span class="comment">//举例: abc123abc b456b 123789123 &amp;!@abc&amp;!@ abc123abd(false)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;(.+).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;abc123abc&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;b456b&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;123789123&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;!@abc&amp;!@&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;abc123abd&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求3:判断一个字符串的开始部分和结束部分是否一致?开始部分内部每个字符也需要一致</span></span><br><span class="line"><span class="comment">//举例: aaa123aaa bbb456bbb 111789111 &amp;&amp;abc&amp;&amp;</span></span><br><span class="line"><span class="comment">//(.):把首字母看做一组</span></span><br><span class="line"><span class="comment">// \\2:把首字母拿出来再次使用</span></span><br><span class="line"><span class="comment">// *:作用于\\2,表示后面重复的内容出现日次或多次</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;((.)\\2*).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;aaa123aaa&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;bbb456bbb&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;111789111&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;&amp;abc&amp;&amp;&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;aaa123aab&quot;</span>.matches(regex3));</span><br></pre></td></tr></table></figure><h2 id="1-16-分组练习"><a href="#1-16-分组练习" class="headerlink" title="1.16 分组练习"></a>1.16 分组练习</h2><p>需求:</p><p>​    将字符串：我要学学编编编编程程程程程程。</p><p>​    替换为：我要学编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我要学学编编编编程程程程程程&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求:把重复的内容 替换为 单个的</span></span><br><span class="line"><span class="comment">//学学                学</span></span><br><span class="line"><span class="comment">//编编编编            编</span></span><br><span class="line"><span class="comment">//程程程程程程        程</span></span><br><span class="line"><span class="comment">//  (.)表示把重复内容的第一个字符看做一组</span></span><br><span class="line"><span class="comment">//  \\1表示第一字符再次出现</span></span><br><span class="line"><span class="comment">//  + 至少一次</span></span><br><span class="line"><span class="comment">//  $1 表示把正则表达式中第一组的内容，再拿出来用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><h2 id="1-17-忽略大小写的写法"><a href="#1-17-忽略大小写的写法" class="headerlink" title="1.17 忽略大小写的写法"></a>1.17 忽略大小写的写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(?i) ：表示忽略后面数据的大小写</span></span><br><span class="line"><span class="comment">//忽略abc的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)abc&quot;</span>;</span><br><span class="line"><span class="comment">//a需要一模一样，忽略bc的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a(?i)bc&quot;</span>;</span><br><span class="line"><span class="comment">//ac需要一模一样，忽略b的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a((?i)b)c&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-18-非捕获分组"><a href="#1-18-非捕获分组" class="headerlink" title="1.18 非捕获分组"></a>1.18 非捕获分组</h2><p>非捕获分组：分组之后不需要再用本组数据，仅仅是把数据括起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//身份证号码的简易正则表达式</span></span><br><span class="line"><span class="comment">//非捕获分组:仅仅是把数据括起来</span></span><br><span class="line"><span class="comment">//特点:不占用组号</span></span><br><span class="line"><span class="comment">//这里\\1报错原因:(?:)就是非捕获分组，此时是不占用组号的。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//(?:) (?=) (?!)都是非捕获分组//更多的使用第一个</span></span><br><span class="line"><span class="comment">//String regex1 =&quot;[1-9]\\d&#123;16&#125;(?:\\d|x|x)\\1&quot;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span><span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d Xx)\\1&quot;</span>;</span><br><span class="line"><span class="comment">//^([01]\d|2[0-3]):[0-5]\d:[@-5]\d$</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex2));</span><br></pre></td></tr></table></figure><h2 id="1-19-正则表达式练习"><a href="#1-19-正则表达式练习" class="headerlink" title="1.19 正则表达式练习"></a>1.19 正则表达式练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">手机号码:<span class="number">1</span>[<span class="number">3</span>-<span class="number">9</span>]\\d&#123;<span class="number">9</span>&#125;</span><br><span class="line">座机号码：<span class="number">0</span>\\d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-?[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">4</span>,<span class="number">9</span>&#125;</span><br><span class="line">邮箱号码：\\w+@[\\w&amp;&amp;[^_]]&#123;<span class="number">2</span>,<span class="number">6</span>&#125;(\\.[a-zA-Z]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">24</span>小时：([<span class="number">01</span>]\\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>]):[<span class="number">0</span>-<span class="number">5</span>]\\d:[<span class="number">0</span>-<span class="number">5</span>]\\d</span><br><span class="line">   ([<span class="number">01</span>]\\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>])(:[<span class="number">0</span>-<span class="number">5</span>]\\d)&#123;<span class="number">2</span>&#125;</span><br><span class="line">用户名:\\w&#123;<span class="number">4</span>,<span class="number">16</span>&#125;</span><br><span class="line">身份证号码，简单校验：</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;(\\d|X|x)</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;[\\dXx]</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;(\\d(?i)X)</span><br><span class="line">身份证号码，严格校验：</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">5</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|<span class="number">20</span>)\\d&#123;<span class="number">2</span>&#125;(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>|[<span class="number">12</span>])\\d|<span class="number">3</span>[<span class="number">01</span>])\\d&#123;<span class="number">3</span>&#125;[\\dXx]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="/2023/01/20/%E5%B8%B8%E7%94%A8API/"/>
      <url>/2023/01/20/%E5%B8%B8%E7%94%A8API/</url>
      
        <content type="html"><![CDATA[<h2 id="1-API"><a href="#1-API" class="headerlink" title="1.API"></a>1.API</h2><h3 id="1-1API概述"><a href="#1-1API概述" class="headerlink" title="1.1API概述"></a>1.1API概述</h3><ul><li><p>什么是API</p><p>​API (Application Programming Interface) ：应用程序编程接口</p></li><li><p>java中的API</p><p>​指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p></li></ul><h3 id="1-2如何使用API帮助文档"><a href="#1-2如何使用API帮助文档" class="headerlink" title="1.2如何使用API帮助文档"></a>1.2如何使用API帮助文档</h3><ul><li>打开帮助文档</li></ul><p><img src="/img%5C01.png" alt="01"></p><ul><li>找到索引选项卡中的输入框</li></ul><p><img src="/img%5C02.png" alt="02"></p><ul><li>在输入框中输入Random</li></ul><p><img src="/img%5C03.png" alt="03"></p><ul><li>看类在哪个包下</li></ul><p><img src="/img%5C04.png" alt="04"></p><ul><li>看类的描述</li></ul><p><img src="/img%5C05.png" alt="05"></p><ul><li>看构造方法</li></ul><p><img src="/img%5C06.png" alt="06"></p><ul><li>看成员方法</li></ul><p><img src="/img%5C07.png" alt="07"></p><h2 id="2-String类"><a href="#2-String类" class="headerlink" title="2.String类"></a>2.String类</h2><h3 id="2-1String类概述"><a href="#2-1String类概述" class="headerlink" title="2.1String类概述"></a>2.1String类概述</h3><p>​String 类代表字符串，Java 程序中的所有字符串文字（例如“abc”）都被实现为此类的实例。也就是说，Java 程序中所有的双引号字符串，都是 String 类的对象。String 类在 java.lang 包下，所以使用的时候不需要导包！</p><h3 id="2-2String类的特点"><a href="#2-2String类的特点" class="headerlink" title="2.2String类的特点"></a>2.2String类的特点</h3><ul><li>字符串不可变，它们的值在创建后不能被更改</li><li>虽然 String 的值是不可变的，但是它们可以被共享</li><li>字符串效果上相当于字符数组( char[] )，但是底层原理是字节数组( byte[] )</li></ul><h3 id="2-3String类的构造方法"><a href="#2-3String类的构造方法" class="headerlink" title="2.3String类的构造方法"></a>2.3String类的构造方法</h3><ul><li><p>常用的构造方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public   String()</td><td>创建一个空白字符串对象，不含有任何内容</td></tr><tr><td>public   String(char[] chs)</td><td>根据字符数组的内容，来创建字符串对象</td></tr><tr><td>public   String(byte[] bys)</td><td>根据字节数组的内容，来创建字符串对象</td></tr><tr><td>String s &#x3D;   “abc”;</td><td>直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public String()：创建一个空白字符串对象，不含有任何内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;s1:&quot;</span> + s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(char[] chs)：根据字符数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="type">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">        System.out.println(<span class="string">&quot;s2:&quot;</span> + s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public String(byte[] bys)：根据字节数组的内容，来创建字符串对象</span></span><br><span class="line">        <span class="type">byte</span>[] bys = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bys);</span><br><span class="line">        System.out.println(<span class="string">&quot;s3:&quot;</span> + s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String s = “abc”;直接赋值的方式创建字符串对象，内容就是abc</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;s4:&quot;</span> + s4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4创建字符串对象两种方式的区别"><a href="#2-4创建字符串对象两种方式的区别" class="headerlink" title="2.4创建字符串对象两种方式的区别"></a>2.4创建字符串对象两种方式的区别</h3><ul><li><p>通过构造方法创建</p><p>​通过 new 创建的字符串对象，每一次 new 都会申请一个内存空间，虽然内容相同，但是地址值不同</p></li><li><p>直接赋值方式创建</p><p>​以“”方式给出的字符串，只要字符序列相同(顺序和大小写)，无论在程序代码中出现几次，JVM 都只会建立一个 String 对象，并在字符串池中维护</p></li></ul><h3 id="2-5字符串的比较"><a href="#2-5字符串的比较" class="headerlink" title="2.5字符串的比较"></a>2.5字符串的比较</h3><h4 id="2-5-1-x3D-x3D-号的作用"><a href="#2-5-1-x3D-x3D-号的作用" class="headerlink" title="2.5.1&#x3D;&#x3D;号的作用"></a>2.5.1&#x3D;&#x3D;号的作用</h4><ul><li>比较基本数据类型：比较的是具体的值</li><li>比较引用数据类型：比较的是对象地址值</li></ul><h4 id="2-5-2equals方法的作用"><a href="#2-5-2equals方法的作用" class="headerlink" title="2.5.2equals方法的作用"></a>2.5.2equals方法的作用</h4><ul><li><p>方法介绍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(String s)</span>     比较两个字符串内容是否相同、区分大小写</span><br></pre></td></tr></table></figure></li><li><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//构造方法的方式得到对象</span></span><br><span class="line">        <span class="type">char</span>[] chs = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接赋值的方式得到对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串对象地址是否相同</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">        System.out.println(s1 == s3);</span><br><span class="line">        System.out.println(s3 == s4);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//比较字符串内容是否相同</span></span><br><span class="line">        System.out.println(s1.equals(s2));</span><br><span class="line">        System.out.println(s1.equals(s3));</span><br><span class="line">        System.out.println(s3.equals(s4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-6用户登录案例"><a href="#2-6用户登录案例" class="headerlink" title="2.6用户登录案例"></a>2.6用户登录案例</h3><h4 id="2-6-1案例需求"><a href="#2-6-1案例需求" class="headerlink" title="2.6.1案例需求"></a>2.6.1案例需求</h4><p>​已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p><h4 id="2-6-2代码实现"><a href="#2-6-2代码实现" class="headerlink" title="2.6.2代码实现"></a>2.6.2代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span>登录案例 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义两个变量用来记录正确的用户名和密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">rightUsername</span> <span class="operator">=</span> <span class="string">&quot;itheima&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">rightPassword</span> <span class="operator">=</span> <span class="string">&quot;1234qwer&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.键盘录入用户名和密码</span></span><br><span class="line">        <span class="comment">//ctrl + alt + T 选择包裹方式</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;<span class="comment">//0 1 2</span></span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> sc.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.判断比较</span></span><br><span class="line">            <span class="keyword">if</span> (username.equals(rightUsername) &amp;&amp; password.equals(rightPassword)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="comment">//如果正确，循环结束</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//最后一次机会</span></span><br><span class="line">                <span class="keyword">if</span>(i == <span class="number">2</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;账户&quot;</span> + username + <span class="string">&quot;被锁定，请联系黑马程序员官方小姐姐：XXXXXXX&quot;</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//不是最后一次机会</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;用户名或密码错误，登录失败,还剩下&quot;</span> + (<span class="number">2</span> - i) + <span class="string">&quot;次机会&quot;</span>);<span class="comment">//2 1 0</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-7遍历字符串案例"><a href="#2-7遍历字符串案例" class="headerlink" title="2.7遍历字符串案例"></a>2.7遍历字符串案例</h3><h4 id="2-7-1案例需求"><a href="#2-7-1案例需求" class="headerlink" title="2.7.1案例需求"></a>2.7.1案例需求</h4><p>​键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><h4 id="2-7-2直接遍历字符串"><a href="#2-7-2直接遍历字符串" class="headerlink" title="2.7.2直接遍历字符串"></a>2.7.2直接遍历字符串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>字符串直接遍历 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//两个方法：</span></span><br><span class="line">        <span class="comment">//charAt()：会根据索引获取对应的字符</span></span><br><span class="line">        <span class="comment">//length(): 会返回字符串的长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示字符串的每一个索引</span></span><br><span class="line">            <span class="comment">//索引的范围：0 ~  长度-1</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据索引获取字符串里面的每一个字符</span></span><br><span class="line">            <span class="comment">//ctrl + alt + V 自动生成左边的接受变量</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-8统计字符次数案例"><a href="#2-8统计字符次数案例" class="headerlink" title="2.8统计字符次数案例"></a>2.8统计字符次数案例</h3><h4 id="2-8-1案例需求"><a href="#2-8-1案例需求" class="headerlink" title="2.8.1案例需求"></a>2.8.1案例需求</h4><p>​键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数(不考虑其他字符)</p><h4 id="2-8-2代码实现"><a href="#2-8-2代码实现" class="headerlink" title="2.8.2代码实现"></a>2.8.2代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span>统计个数 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//键盘录入一个字符串，统计大写，小写，数字出现的次数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.统计 --- 计数器count</span></span><br><span class="line">        <span class="comment">//此时我要统计的有3样东西，所以要定义3个计数器分别进行统计</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">bigCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">smallCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numberCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//得到这个字符串里面每一个字符</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">            <span class="comment">//i 表示字符串中的索引</span></span><br><span class="line">            <span class="comment">//c 表示字符串中的每一个字符</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> str.charAt(i);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对c进行判断</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                smallCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>)&#123;</span><br><span class="line">                bigCount++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                numberCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.当循环结束之后，三个变量记录的就是对应的个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;大写字符有:&quot;</span> + bigCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字符有:&quot;</span> + smallCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字字符有:&quot;</span> + numberCount + <span class="string">&quot;个&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-9字符串拼接案例"><a href="#2-9字符串拼接案例" class="headerlink" title="2.9字符串拼接案例"></a>2.9字符串拼接案例</h3><h4 id="2-9-1案例需求"><a href="#2-9-1案例需求" class="headerlink" title="2.9.1案例需求"></a>2.9.1案例需求</h4><p>​定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</p><p>​并在控制台输出结果。例如，数组为 int[] arr &#x3D; {1,2,3}; ，执行方法后的输出结果为：[1, 2, 3]</p><h4 id="2-9-2代码实现"><a href="#2-9-2代码实现" class="headerlink" title="2.9.2代码实现"></a>2.9.2代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span>数组拼接成字符串 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，</span></span><br><span class="line">        <span class="comment">//并在控制台输出结果。例如，数组为 int[] arr = &#123;1,2,3&#125;;</span></span><br><span class="line">        <span class="comment">//执行方法后的输出结果为：[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arrToString(arr);</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//作用：把一个数组变成字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrToString</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//拼接左括号</span></span><br><span class="line">        s = s + <span class="string">&quot;[&quot;</span>; <span class="comment">//此时是拿着长度为0的字符串，跟[进行拼接，产生一个新的字符串。</span></span><br><span class="line">        <span class="comment">//把新的字符串再赋值给s，此时变量s记录的就是新的字符串&quot;[&quot;的地址值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面我想得到数组里面的每一个元素并进行拼接</span></span><br><span class="line">        <span class="comment">//那么就需要遍历数组，得到每一个元素才行</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//假设第一次循环:i = 0 获取的就是0索引上的元素</span></span><br><span class="line">            <span class="comment">//在拼接的时候：&quot;[&quot; + 1 + &quot;, &quot; 拼接完毕之后产生一个新的字符串 &quot;[1, &quot;</span></span><br><span class="line">            <span class="comment">//第二次循环：i = 1 获取的就是1索引上的元素</span></span><br><span class="line">            <span class="comment">//在拼接的时候： 此时s就是第一次循环结束后拼接完毕的结果：&quot;[1, &quot;</span></span><br><span class="line">            <span class="comment">//在拼接的时候：&quot;[1, &quot; + 2 + &quot;, &quot; 拼接完毕之后产生一个新的字符串 &quot;[1, 2, &quot;</span></span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">           <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">               <span class="comment">//如果是最后一个元素，那么不需要拼接逗号空格</span></span><br><span class="line">               s = s + arr[i];</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="comment">//如果不是最后一个元素，需要拼接元素和逗号空格</span></span><br><span class="line">               s = s + arr[i] + <span class="string">&quot;, &quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等循环结束之后，再拼接最后一个右括号</span></span><br><span class="line">        s = s + <span class="string">&quot;]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//用来遍历数组</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArr</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[i] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//[1, 2, 3, 4, 5]</span></span><br><span class="line">        <span class="comment">//我们现在要知道，这个最终结果是怎么来的？</span></span><br><span class="line">        <span class="comment">//从到右依次打印得来的。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-10字符串反转案例"><a href="#2-10字符串反转案例" class="headerlink" title="2.10字符串反转案例"></a>2.10字符串反转案例</h3><h4 id="2-10-1案例需求"><a href="#2-10-1案例需求" class="headerlink" title="2.10.1案例需求"></a>2.10.1案例需求</h4><p>​定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</p><p>​例如，键盘录入 abc，输出结果 cba</p><h4 id="2-10-2代码实现"><a href="#2-10-2代码实现" class="headerlink" title="2.10.2代码实现"></a>2.10.2代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span>反转字符串 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</span></span><br><span class="line"><span class="comment">        例如，键盘录入 abc，输出结果 cba*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line">        <span class="comment">//2.定义一个方法，反转字符串</span></span><br><span class="line">        <span class="comment">//abc  ---&gt;  cba</span></span><br><span class="line">        <span class="comment">//可以把字符串倒着遍历，再拼接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> reverse(str);</span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注释：方法的作用就是反转字符串</span></span><br><span class="line">    <span class="comment">//把传递进来的字符串进行反转</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverse</span><span class="params">(String str)</span>&#123;<span class="comment">//abc</span></span><br><span class="line">        <span class="comment">//核心思想：倒着遍历并进行拼接就可以了</span></span><br><span class="line">        <span class="comment">//fori :正着遍历  forr：倒着遍历</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> str.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="comment">//i 依次表示字符串里面的每一个索引（倒着的）</span></span><br><span class="line">            <span class="comment">//我们就可以拿到里面的每一个字符并拼接</span></span><br><span class="line">            s = s + str.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把倒着拼接之后的结果返回即可</span></span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-11-金额转换"><a href="#2-11-金额转换" class="headerlink" title="2.11 金额转换"></a>2.11 金额转换</h3><h4 id="2-11-1-案例需求"><a href="#2-11-1-案例需求" class="headerlink" title="2.11.1 案例需求"></a>2.11.1 案例需求</h4><p>​把2135变成：零佰零拾零万贰仟壹佰叁拾伍元 </p><p>​把789变成：零佰零拾零万零仟柒佰捌拾玖元</p><h4 id="2-11-2-代码实现"><a href="#2-11-2-代码实现" class="headerlink" title="2.11.2 代码实现"></a>2.11.2 代码实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入一个金额</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> money;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请录入一个金额&quot;</span>);</span><br><span class="line">            money = sc.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (money &gt;= <span class="number">0</span> &amp;&amp; money &lt;= <span class="number">9999999</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;金额无效&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义一个变量用来表示钱的大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">moneyStr</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.得到money里面的每一位数字,再转成中文</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;<span class="comment">//2135</span></span><br><span class="line">            <span class="comment">//从右往左获取数据，因为右侧是数据的个位</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">ge</span> <span class="operator">=</span> money % <span class="number">10</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">capitalNumber</span> <span class="operator">=</span> getCapitalNumber(ge);</span><br><span class="line">            <span class="comment">//把转换之后的大写拼接到moneyStr当中</span></span><br><span class="line">            moneyStr = capitalNumber + moneyStr;</span><br><span class="line">            <span class="comment">//第一次循环 ： &quot;伍&quot; + &quot;&quot; = &quot;伍&quot;</span></span><br><span class="line">            <span class="comment">//第二次循环 ： &quot;叁&quot; + &quot;伍&quot; = &quot;叁伍&quot;</span></span><br><span class="line">            <span class="comment">//去掉刚刚获取的数据</span></span><br><span class="line">            money = money / <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果数字上的每一位全部获取到了，那么money记录的就是0，此时循环结束</span></span><br><span class="line">            <span class="keyword">if</span> (money == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.在前面补0，补齐7位</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">7</span> - moneyStr.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            moneyStr = <span class="string">&quot;零&quot;</span> + moneyStr;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(moneyStr);<span class="comment">//零零零贰壹叁伍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.插入单位</span></span><br><span class="line">        <span class="comment">//定义一个数组表示单位</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;万&quot;</span>,<span class="string">&quot;仟&quot;</span>,<span class="string">&quot;佰&quot;</span>,<span class="string">&quot;拾&quot;</span>,<span class="string">&quot;元&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//               零    零   零   贰   壹   叁   伍</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历moneyStr，依次得到 零    零   零   贰   壹   叁   伍</span></span><br><span class="line">        <span class="comment">//然后把arr的单位插入进去</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; moneyStr.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> moneyStr.charAt(i);</span><br><span class="line">            <span class="comment">//把大写数字和单位拼接到result当中</span></span><br><span class="line">            result = result + c + arr[i];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.打印最终结果</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法把数字变成大写的中文</span></span><br><span class="line">    <span class="comment">//1 -- 壹</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getCapitalNumber</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="comment">//定义数组，让数字跟大写的中文产生一个对应关系</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;零&quot;</span>, <span class="string">&quot;壹&quot;</span>, <span class="string">&quot;贰&quot;</span>, <span class="string">&quot;叁&quot;</span>, <span class="string">&quot;肆&quot;</span>, <span class="string">&quot;伍&quot;</span>, <span class="string">&quot;陆&quot;</span>, <span class="string">&quot;柒&quot;</span>, <span class="string">&quot;捌&quot;</span>, <span class="string">&quot;玖&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> arr[number];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-12-手机号屏蔽"><a href="#2-12-手机号屏蔽" class="headerlink" title="2.12 手机号屏蔽"></a>2.12 手机号屏蔽</h3><p>需求：以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</p><p>最终效果为：<code>131****9468</code></p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span>手机号屏蔽 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*以字符串的形式从键盘接受一个手机号，将中间四位号码屏蔽</span></span><br><span class="line"><span class="comment">        最终效果为：131****9468*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.键盘录入一个手机号码</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入手机号码&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phoneNumber</span> <span class="operator">=</span> sc.next();<span class="comment">//13112349408</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.截取手机号码中的前三位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">star</span> <span class="operator">=</span> phoneNumber.substring(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.截取手机号码中的最后四位</span></span><br><span class="line">        <span class="comment">//此时我用substring方法，是用1个参数的，还是两个参数的？1个参数的会更好</span></span><br><span class="line">        <span class="comment">//因为现在我要截取到最后，所以建议使用1个参数的。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">end</span> <span class="operator">=</span> phoneNumber.substring(<span class="number">7</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.拼接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> star + <span class="string">&quot;****&quot;</span> + end;</span><br><span class="line"></span><br><span class="line">        System.out.println(result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-13-敏感词替换"><a href="#2-13-敏感词替换" class="headerlink" title="2.13 敏感词替换"></a>2.13 敏感词替换</h3><p>需求1：键盘录入一个 字符串，如果字符串中包含（TMD），则使用***替换 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span>敏感词替换 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个变量表示骂人的话</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">talk</span> <span class="operator">=</span> <span class="string">&quot;后裔你玩什么啊，TMD&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.把这句话中的敏感词进行替换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> talk.replace(<span class="string">&quot;TMD&quot;</span>, <span class="string">&quot;***&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line">        System.out.println(talk);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需求2：如果要替换的敏感词比较多怎么办？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span>多个敏感词替换 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//实际开发中，敏感词会有很多很多</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.先键盘录入要说的话</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要说的话&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">talk</span> <span class="operator">=</span> sc.next();<span class="comment">//后裔你玩什么啊，TMD,GDX,ctmd,ZZ</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.定义一个数组用来存多个敏感词</span></span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;TMD&quot;</span>,<span class="string">&quot;GDX&quot;</span>,<span class="string">&quot;ctmd&quot;</span>,<span class="string">&quot;ZZ&quot;</span>,<span class="string">&quot;lj&quot;</span>,<span class="string">&quot;FW&quot;</span>,<span class="string">&quot;nt&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.把说的话中所有的敏感词都替换为***</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">//i 索引</span></span><br><span class="line">            <span class="comment">//arr[i] 元素 --- 敏感词</span></span><br><span class="line">            talk = talk.replace(arr[i],<span class="string">&quot;***&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.打印结果</span></span><br><span class="line">        System.out.println(talk);<span class="comment">//后裔你玩什么啊，***,***,***,***</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-14-身份证信息查看"><a href="#2-14-身份证信息查看" class="headerlink" title="2.14 身份证信息查看"></a>2.14 身份证信息查看</h3><p>​身份证的每一位都是有固定的含义：</p><ul><li>1、2位：省份 </li><li>3、4位：城市 </li><li>5、6位：区县 </li><li>7-14位：出生年、月、日 </li><li>15、16位：所在地派出所 </li><li>17位：性别（奇数男性，偶数女性）</li><li>18位：个人信息码（随机产生）</li></ul><p>要求打印内容方式如下：</p><p>​人物信息为：</p><p>​出生年月日：XXXX年X月X日</p><p>​性别为：男&#x2F;女</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义一个字符串记录身份证号码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> <span class="string">&quot;321281202001011234&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取出生年月日</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">year</span> <span class="operator">=</span> id.substring(<span class="number">6</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">month</span> <span class="operator">=</span> id.substring(<span class="number">10</span>, <span class="number">12</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">day</span> <span class="operator">=</span> id.substring(<span class="number">12</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;人物信息为：&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;出生年月日:&quot;</span> + year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + day + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.获取性别</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">gender</span> <span class="operator">=</span> id.charAt(<span class="number">16</span>);<span class="comment">//&#x27;3&#x27;  ---&gt; 3</span></span><br><span class="line">        <span class="comment">//利用ASCII码表进行转换</span></span><br><span class="line">        <span class="comment">//&#x27;0&#x27; ---&gt;  48</span></span><br><span class="line">        <span class="comment">//&#x27;1&#x27; ---&gt;  49</span></span><br><span class="line">        <span class="comment">//&#x27;2&#x27; ---&gt;  50</span></span><br><span class="line">        <span class="comment">//&#x27;3&#x27; ---&gt;  51</span></span><br><span class="line">        <span class="comment">//&#x27;4&#x27; ---&gt;  52</span></span><br><span class="line">        <span class="comment">//&#x27;5&#x27; ---&gt;  53</span></span><br><span class="line">        <span class="comment">//&#x27;6&#x27; ---&gt;  54</span></span><br><span class="line">        <span class="comment">//&#x27;7&#x27; ---&gt;  55</span></span><br><span class="line">        <span class="comment">//&#x27;8&#x27; ---&gt;  56</span></span><br><span class="line">        <span class="comment">//&#x27;9&#x27; ---&gt;  57</span></span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> gender - <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;性别为:女&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;性别为:男&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-StringBuilder"><a href="#3-StringBuilder" class="headerlink" title="3.StringBuilder"></a>3.StringBuilder</h2><p>StringBuilder 可以看成是一个容器，创建之后里面的内容是可变的。</p><p>当我们在拼接字符串和反转字符串的时候会使用到</p><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加元素</span></span><br><span class="line">        <span class="comment">/*sb.append(1);</span></span><br><span class="line"><span class="comment">        sb.append(2.3);</span></span><br><span class="line"><span class="comment">        sb.append(true);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//反转</span></span><br><span class="line">        sb.reverse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sb.length();</span><br><span class="line">        System.out.println(len);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印</span></span><br><span class="line">        <span class="comment">//普及：</span></span><br><span class="line">        <span class="comment">//因为StringBuilder是Java已经写好的类</span></span><br><span class="line">        <span class="comment">//java在底层对他做了一些特殊处理。</span></span><br><span class="line">        <span class="comment">//打印对象不是地址值而是属性值。</span></span><br><span class="line">        System.out.println(sb);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-链式编程"><a href="#3-2-链式编程" class="headerlink" title="3.2 链式编程"></a>3.2 链式编程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建对象</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.添加字符串</span></span><br><span class="line">        sb.append(<span class="string">&quot;aaa&quot;</span>).append(<span class="string">&quot;bbb&quot;</span>).append(<span class="string">&quot;ccc&quot;</span>).append(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sb);<span class="comment">//aaabbbcccddd</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.再把StringBuilder变回字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sb.toString();</span><br><span class="line">        System.out.println(str);<span class="comment">//aaabbbcccddd</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-练习1：对称字符串"><a href="#3-3-练习1：对称字符串" class="headerlink" title="3.3 练习1：对称字符串"></a>3.3 练习1：对称字符串</h3><p>需求：</p><p>​键盘接受一个字符串，程序判断出该字符串是否是对称字符串，并在控制台打印是或不是</p><pre><code>  对称字符串：123321、111    非对称字符串：123123</code></pre><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo6</span> &#123;</span><br><span class="line">    <span class="comment">//使用StringBuilder的场景：</span></span><br><span class="line">    <span class="comment">//1.字符串的拼接</span></span><br><span class="line">    <span class="comment">//2.字符串的反转</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.键盘录入一个字符串</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sc.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.反转键盘录入的字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(str).reverse().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.比较</span></span><br><span class="line">        <span class="keyword">if</span>(str.equals(result))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前字符串是对称字符串&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前字符串不是对称字符串&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-4-练习2：拼接字符串"><a href="#3-4-练习2：拼接字符串" class="headerlink" title="3.4 练习2：拼接字符串"></a>3.4 练习2：拼接字符串</h3><p>需求：定义一个方法，把 int 数组中的数据按照指定的格式拼接成一个字符串返回。</p><p>​          调用该方法，并在控制台输出结果。</p><p>​          例如：数组为int[] arr &#x3D; {1,2,3}; </p><p>​          执行方法后的输出结果为：[1, 2, 3]</p><p>代码示例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.stringbuilderdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBuilderDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.定义数组</span></span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.调用方法把数组变成字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> arrToString(arr);</span><br><span class="line"></span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">arrToString</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i == arr.length - <span class="number">1</span>)&#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-StringJoiner"><a href="#4-StringJoiner" class="headerlink" title="4. StringJoiner"></a>4. StringJoiner</h2><ul><li>StringJoiner跟StringBuilder一样，也可以看成是一个容器，创建之后里面的内容是可变的。</li><li>作用：提高字符串的操作效率，而且代码编写特别简洁，但是目前市场上很少有人用。 </li><li>JDK8出现的</li></ul><p>基本使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建一个对象，并指定中间的间隔符号</span></span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;---&quot;</span>);</span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">sj.add(<span class="string">&quot;aaa&quot;</span>).add(<span class="string">&quot;bbb&quot;</span>).add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="comment">//3.打印结果</span></span><br><span class="line">System.out.println(sj);<span class="comment">//aaa---bbb---ccc</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建对象</span></span><br><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;, &quot;</span>,<span class="string">&quot;[&quot;</span>,<span class="string">&quot;]&quot;</span>);</span><br><span class="line"><span class="comment">//2.添加元素</span></span><br><span class="line">sj.add(<span class="string">&quot;aaa&quot;</span>).add(<span class="string">&quot;bbb&quot;</span>).add(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> sj.length();</span><br><span class="line">System.out.println(len);<span class="comment">//15</span></span><br><span class="line"><span class="comment">//3.打印</span></span><br><span class="line">System.out.println(sj);<span class="comment">//[aaa, bbb, ccc]</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sj.toString();</span><br><span class="line">System.out.println(str);<span class="comment">//[aaa, bbb, ccc]</span></span><br></pre></td></tr></table></figure><h2 id="关于字符串的小扩展："><a href="#关于字符串的小扩展：" class="headerlink" title="关于字符串的小扩展："></a>关于字符串的小扩展：</h2><ol><li><p>字符串存储的内存原理</p><p>String s &#x3D; “abc”；直接赋值</p><p>特点：</p><p>​此时字符串abc是存在字符串常量池中的。</p><p>​先检查字符串常量池中有没有字符串abc，如果有，不会创建新的，而是直接复用。如果没有abc，才会创建一个新的。</p><p>所以，直接赋值的方式，代码简单，而且节约内存。</p></li><li><p>new出来的字符串</p><p>看到new关键字，一定是在堆里面开辟了一个小空间。</p><p>String s1 &#x3D; new String（“abc”）；</p><p>String s2 &#x3D; “abc”；</p><p>s1记录的是new出来的，在堆里面的地址值。</p><p>s2是直接赋值的，所以记录的是字符串常量池中的地址值。</p></li><li><p>&#x3D;&#x3D;号比较的到底是什么？</p><p>如果比较的是基本数据类型：比的是具体的数值是否相等。</p><p>如果比较的是引用数据类型：比的是地址值是否相等。</p><p>结论：&#x3D;&#x3D;只能用于比较基本数据类型。不能比较引用数据类型。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环高级</title>
      <link href="/2023/01/20/%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7/"/>
      <url>/2023/01/20/%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="1-无限循环"><a href="#1-无限循环" class="headerlink" title="1.无限循环"></a>1.无限循环</h2><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>​又叫死循环。循环一直停不下来。</p><h3 id="for格式："><a href="#for格式：" class="headerlink" title="for格式："></a>for格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>初始化语句可以空着不写，表示循环之前不定义任何的控制变量。</p><p>条件判断语句可以空着不写，如果不写，默认表示true，循环一直进行。</p><p>条件控制语句可以空着不写，表示每次循环体执行完毕后，控制变量不做任何变化。</p><h3 id="while格式："><a href="#while格式：" class="headerlink" title="while格式："></a>while格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：</p><p>​小括号里面就不能省略了，true一定要写出来，否则代码会报错。</p><h3 id="do…while格式："><a href="#do…while格式：" class="headerlink" title="do…while格式："></a>do…while格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;循环执行一直在打印内容&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>解释：</p><p>​小括号里面就不能省略了，true一定要写出来，否则代码会报错。</p><h3 id="无限循环的注意事项："><a href="#无限循环的注意事项：" class="headerlink" title="无限循环的注意事项："></a>无限循环的注意事项：</h3><ul><li>最为常用的格式：while</li><li>无限循环下面不能再写其他代码了，因为永远执行不到。</li></ul><h2 id="2-条件控制语句"><a href="#2-条件控制语句" class="headerlink" title="2.条件控制语句"></a>2.条件控制语句</h2><ul><li>break</li><li>continue</li></ul><h3 id="break"><a href="#break" class="headerlink" title="break:"></a>break:</h3><p>​不能单独存在的。可以用在switch和循环中，表示结束，跳出的意思。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">    <span class="comment">//2.吃完第三个的时候就不吃了</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">break</span>;<span class="comment">//结束整个循环。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="continue"><a href="#continue" class="headerlink" title="continue:"></a>continue:</h3><p>​不能单独存在的。只能存在于循环当中。</p><p>​表示：跳过本次循环，继续执行下次循环。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.吃1~5号包子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//2.第3个包子有虫子就跳过，继续吃下面的包子</span></span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">//跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;在吃第&quot;</span> + i + <span class="string">&quot;个包子&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Random"><a href="#3-Random" class="headerlink" title="3. Random"></a>3. Random</h2><p>Random跟Scanner一样，也是Java提前写好的类，我们不需要关心是如何实现的，只要直接使用就可以了。</p><h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><ol><li>导包</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line">导包的动作必须出现在类定义的上边。</span><br></pre></td></tr></table></figure><ol start="2"><li>创建对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span> ();</span><br><span class="line">上面这个格式里面，只有r是变量名，可以变，其他的都不允许变。</span><br></pre></td></tr></table></figure><ol start="3"><li>生成随机数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(随机数的范围);</span><br><span class="line">上面这个格式里面，只有number是变量名，可以变，其他的都不允许变。</span><br><span class="line">随机数范围的特点：从<span class="number">0</span>开始，不包含指定值。比如：参数为<span class="number">10</span>，生成的范围[<span class="number">0</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//2.创建对象</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="comment">//3.生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>);<span class="comment">//包左不包右，包头不包尾</span></span><br><span class="line">        <span class="comment">//0 ~ 99</span></span><br><span class="line">        System.out.println(number);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-逢七过"><a href="#4-逢七过" class="headerlink" title="4. 逢七过"></a>4. 逢七过</h2><p>需求：</p><p>​朋友聚会的时候可能会玩一个游戏：逢7过 </p><p>​游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过</p><p>​使用程序在控制台打印出1-100之间的满足逢七必过规则的数据 </p><p>举例：</p><p>​1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 …</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*朋友聚会的时候可能会玩一个游戏：逢7过</span></span><br><span class="line"><span class="comment">        游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过</span></span><br><span class="line"><span class="comment">        需求：使用程序在控制台打印出1-100之间的满足逢七必过规则的数据*/</span></span><br><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//个位7  十位7   7倍数</span></span><br><span class="line"><span class="comment">//1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 19 20 过....</span></span><br><span class="line"><span class="comment">//69 过 过 过 过 过 过... 80</span></span><br><span class="line"><span class="comment">//1.得到1~100之间的每一个数字</span></span><br><span class="line"><span class="comment">//开始：1</span></span><br><span class="line"><span class="comment">//结束：100</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="comment">//2.判断每一个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字</span></span><br><span class="line">    <span class="keyword">if</span>(i % <span class="number">10</span> == <span class="number">7</span> || i / <span class="number">10</span> % <span class="number">10</span> == <span class="number">7</span>  ||  i % <span class="number">7</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;过&quot;</span>);</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-平方根"><a href="#5-平方根" class="headerlink" title="5. 平方根"></a>5. 平方根</h2><p>需求：</p><p>​键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。结果只保留整数部分 ，小数部分将被舍去 。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*需求：键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。</span></span><br><span class="line"><span class="comment">        结果只保留整数部分 ，小数部分将被舍去 。*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//平方根   16的平方根4</span></span><br><span class="line"><span class="comment">//         4的平方根2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 1 * 1 = 1 &lt; 10</span></span><br><span class="line"><span class="comment">// 2 * 2 = 4 &lt; 10</span></span><br><span class="line"><span class="comment">// 3 * 3 = 9 &lt; 10</span></span><br><span class="line"><span class="comment">// 4 * 4 = 16 &gt; 10</span></span><br><span class="line"><span class="comment">//推断：10的平方根是在3~4之间。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 1 * 1 = 1 &lt; 20</span></span><br><span class="line"><span class="comment">// 2 * 2 = 4 &lt; 20</span></span><br><span class="line"><span class="comment">// 3 * 3 = 9 &lt; 20</span></span><br><span class="line"><span class="comment">// 4 * 4 = 16 &lt; 20</span></span><br><span class="line"><span class="comment">// 5 * 5 = 25 &gt; 20</span></span><br><span class="line"><span class="comment">//推断：20的平方根是在4~5之间。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在代码当中</span></span><br><span class="line"><span class="comment">//从1开始循环，拿着数字的平方跟原来的数字进行比较</span></span><br><span class="line"><span class="comment">//如果小于的，那么继续往后判断</span></span><br><span class="line"><span class="comment">//如果相等，那么当前数字就是平方根</span></span><br><span class="line"><span class="comment">//如果大于的，那么前一个数字就是平方跟的整数部分</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.键盘录入一个整数</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//2.从1开始循环判断</span></span><br><span class="line"><span class="comment">//开始：1 结束: number</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= number; i++) &#123;</span><br><span class="line">    <span class="comment">//用i * i 再跟number进行比较</span></span><br><span class="line">    <span class="keyword">if</span>(i * i == number)&#123;</span><br><span class="line">        System.out.println(i + <span class="string">&quot;就是&quot;</span> + number + <span class="string">&quot;的平方根&quot;</span>);</span><br><span class="line">        <span class="comment">//一旦找到了，循环就可以停止了，后面的数字就不需要再找了，提高代码的运行效率。</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i * i &gt; number)&#123;</span><br><span class="line">        System.out.println((i - <span class="number">1</span>) + <span class="string">&quot;就是&quot;</span> + number + <span class="string">&quot;平方根的整数部分&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-判断是否为质数"><a href="#6-判断是否为质数" class="headerlink" title="6.判断是否为质数"></a>6.判断是否为质数</h2><p>需求：</p><p>​键盘录入一个正整数 x ，判断该整数是否为一个质数。 </p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求：键盘录入一个正整数 x ，判断该整数是否为一个质数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//质数：</span></span><br><span class="line"><span class="comment">//如果一个整数只能被1和本身整除，那么这个数就是质数。否则这个数叫做合数</span></span><br><span class="line"><span class="comment">//7 = 1 * 7 质数</span></span><br><span class="line"><span class="comment">//8 = 1 * 8  2 * 4 合数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.键盘录入一个正整数</span></span><br><span class="line"><span class="comment">//number</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">System.out.println(<span class="string">&quot;请输入一个正整数&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个变量，表示标记</span></span><br><span class="line"><span class="comment">//标记着number是否为一个质数</span></span><br><span class="line"><span class="comment">//true： 是一个质数</span></span><br><span class="line"><span class="comment">//false : 不是一个质数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表示最初就认为number是一个质数</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.判断</span></span><br><span class="line"><span class="comment">//写一个循环，从2开始判断，一直判断到number-1为止</span></span><br><span class="line"><span class="comment">//看这个范围之内，有没有数字可以被number整除</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; number; i++) &#123;</span><br><span class="line">    <span class="comment">//i 依次表示这个范围之内的每一个数字</span></span><br><span class="line">    <span class="comment">//看number是否能被i整除就可以了</span></span><br><span class="line">    <span class="keyword">if</span>(number % i == <span class="number">0</span>)&#123;<span class="comment">// 9 % 2 = 1</span></span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">//System.out.println(number + &quot;不是一个质数&quot;);</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="comment">/*else&#123;</span></span><br><span class="line"><span class="comment">                System.out.println(number + &quot;是一个质数&quot;);</span></span><br><span class="line"><span class="comment">            &#125;*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//只有当这个循环结束了，表示这个范围之内所有的数字都判断完毕了</span></span><br><span class="line"><span class="comment">//此时才能断定number是一个质数</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    System.out.println(number + <span class="string">&quot;是一个质数&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(number + <span class="string">&quot;不是一个质数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-猜数字小游戏"><a href="#7-猜数字小游戏" class="headerlink" title="7. 猜数字小游戏"></a>7. 猜数字小游戏</h2><p>需求：</p><p>​程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？</p><p>要求：</p><p>​使用循环猜，一直猜中为止。</p><p>思路分析：</p><ol><li>生成一个1-100之间的随机数</li><li>使用键盘录入去猜出这个数字是多少</li><li>把反复猜的代码写在循环中</li></ol><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.生成一个1-100之间的随机数</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;<span class="comment">// 0 ~ 99 + 1 --- 1 ~ 100</span></span><br><span class="line">System.out.println(number);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用键盘录入去猜出这个数字是多少？</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;请输入一个整数&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">guessNumber</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">    <span class="comment">//3.比较</span></span><br><span class="line">    <span class="keyword">if</span>(guessNumber &gt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字大了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(guessNumber &lt; number)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;您猜的数字小了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;恭喜你，猜中了&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组</title>
      <link href="/2023/01/20/%E6%95%B0%E7%BB%84/"/>
      <url>/2023/01/20/%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>​指的是一种容器，可以同来存储同种数据类型的多个值。</p><p>​但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p><p>比如：</p><p>​定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，</p><p>​但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。</p><p>建议：</p><p>​容器的类，和存储的数据类型保持一致。</p><p>举例：</p><p>​整数1 2 3 4 56 就可以使用int类型的数组来存储。</p><p>​小数1.1 1.2 1.3 1.4 就可以使用double类型的数组来存储。</p><p>​字符串”aaa”  “bbb”  “ccc” 就可以使用String类型的数组来存储。</p><h1 id="2-数组的定义"><a href="#2-数组的定义" class="headerlink" title="2.数组的定义"></a>2.数组的定义</h1><h3 id="格式一："><a href="#格式一：" class="headerlink" title="格式一："></a>格式一：</h3><p>​数据类型 [] 数组名</p><p>比如：int [] array</p><h3 id="格式二："><a href="#格式二：" class="headerlink" title="格式二："></a>格式二：</h3><p>​数据类型  数组名 []</p><p>比如： int array []</p><h3 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h3><p>数据类型：限定了数组以后能存什么类型的数据。</p><p>方括号：表示现在定义的是一个数组。</p><p>数组名：就是一个名字而已，方便以后使用。</p><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><p>​方法括号跟数组名，谁写在前面，谁写在后面都是一样的。</p><p>​平时习惯性使用第一种方式。</p><h1 id="3-数组的静态初始化"><a href="#3-数组的静态初始化" class="headerlink" title="3.数组的静态初始化"></a>3.数组的静态初始化</h1><h3 id="完整格式："><a href="#完整格式：" class="headerlink" title="完整格式："></a>完整格式：</h3><p>​数据类型[] 数组名 &#x3D; new 数据类型[]{元素1，元素2，元素3，元素4…};</p><p>比如：</p><p>​int[] arr &#x3D; new int[]{11,22,33};</p><p>​double[] arr &#x3D; new double[]{1.1,1.2,1.3};</p><h3 id="格式详解："><a href="#格式详解：" class="headerlink" title="格式详解："></a>格式详解：</h3><p>​数据类型：限定了数组以后能存什么类型的数据。</p><p>​方括号：表示现在定义的是一个数组。</p><p>​数组名：其实就是名字而已，方便以后使用，在起名字的时候遵循小驼峰命名法。</p><p>​arr   namesArr</p><p>​new：就是给数组在内存中开辟了一个空间。</p><p>​数据类型：限定了数组以后能存什么类型的数据。</p><p>​  前面和后面的数据类型一定要保持一致。</p><p>​int[] arr &#x3D; new double[]{11,22,33};&#x2F;&#x2F;错误写法</p><p>​方括号：表示现在定义的是一个数组。</p><p>​大括号：表示数组里面的元素。元素也就是存入到数组中的数据。</p><p>​多个元素之间，一定要用逗号隔开。</p><h3 id="注意点：-1"><a href="#注意点：-1" class="headerlink" title="注意点："></a>注意点：</h3><ul><li>等号前后的数据类型必须保持一致。</li><li>数组一旦创建之后，长度不能发生变化。</li></ul><h3 id="简化格式"><a href="#简化格式" class="headerlink" title="简化格式:"></a>简化格式:</h3><p>​数据类型[] 数组名 &#x3D; {元素1，元素2，元素3，元素4…};</p><p>比如：</p><p>​int[] array &#x3D; {1,2,3,4,5};</p><p>​double[] array &#x3D; {1.1,1.2,1.3};</p><h3 id="练习1："><a href="#练习1：" class="headerlink" title="练习1："></a>练习1：</h3><p>定义数组存储5个学生的年龄。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>给数组限定什么类型？ <span class="type">int</span></span><br><span class="line"><span class="number">2.</span>利用静态初始化完成创建并添加元素</span><br><span class="line"><span class="type">int</span>[] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>&#125;;</span><br><span class="line"><span class="type">int</span>[] agesArr = &#123;<span class="number">18</span>,<span class="number">19</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="练习2："><a href="#练习2：" class="headerlink" title="练习2："></a>练习2：</h3><p>定义数组存储3个学生的姓名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>给数组限定什么类型？ String</span><br><span class="line"><span class="number">2.</span>利用静态初始化完成创建并添加元素</span><br><span class="line">String[] namesArr = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>&#125;;</span><br><span class="line">String[] namesArr = &#123;<span class="string">&quot;zhangsan&quot;</span>,<span class="string">&quot;lisi&quot;</span>,<span class="string">&quot;wangwu&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="练习3："><a href="#练习3：" class="headerlink" title="练习3："></a>练习3：</h3><p>定义数组存储4个学生的身高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>给数组限定什么类型？ <span class="type">double</span></span><br><span class="line"><span class="number">2.</span>利用静态初始化完成创建并添加元素</span><br><span class="line"><span class="type">double</span>[] heightsArr = <span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1.85</span>,<span class="number">1.82</span>,<span class="number">1.78</span>,<span class="number">1.65</span>&#125;;</span><br><span class="line"><span class="type">double</span>[] heightsArr = &#123;<span class="number">1.85</span>,<span class="number">1.82</span>,<span class="number">1.78</span>,<span class="number">1.65</span>&#125;;</span><br></pre></td></tr></table></figure><h1 id="4-地址值"><a href="#4-地址值" class="headerlink" title="4.地址值"></a>4.地址值</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(arr);<span class="comment">//[I@6d03e736</span></span><br><span class="line"></span><br><span class="line"><span class="type">double</span>[] arr2 = &#123;<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>&#125;;</span><br><span class="line">System.out.println(arr2);<span class="comment">//[D@568db2f2</span></span><br></pre></td></tr></table></figure><p>打印数组的时候，实际出现的是数组的地址值。</p><p>数组的地址值：就表示数组在内存中的位置。</p><p>以[I@6d03e736为例：</p><p>[ ：表示现在打印的是一个数组。</p><p>I：表示现在打印的数组是int类型的。</p><p>@：仅仅是一个间隔符号而已。</p><p>6d03e736：就是数组在内存中真正的地址值。（十六进制的）</p><p>但是，我们习惯性会把[I@6d03e736这个整体称之为数组的地址值。</p><p>地址值对于我们来京，作用不大，简单了解。</p><h1 id="5-数组元素访问"><a href="#5-数组元素访问" class="headerlink" title="5.数组元素访问"></a>5.数组元素访问</h1><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h3><p>​数组名[索引];</p><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul><li><p>获取数组中对应索引上的值</p></li><li><p>修改数组中对应索引上的值</p><p>一旦修改之后，原来的值就会被覆盖了。</p></li></ul><h3 id="代码示例："><a href="#代码示例：" class="headerlink" title="代码示例："></a>代码示例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo2</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        数组中元素访问的格式：</span></span><br><span class="line"><span class="comment">                数组名[索引];</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         作用：</span></span><br><span class="line"><span class="comment">            1.获取指定索引上对应的元素</span></span><br><span class="line"><span class="comment">            2.修改指定索引上对应的元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">       <span class="comment">//需求1：获取arr数组中，3索引上的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> arr[<span class="number">3</span>];</span><br><span class="line">        System.out.println(number);</span><br><span class="line">        System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//需求2：将arr数组中，3索引上的值修改为10</span></span><br><span class="line">            arr[<span class="number">3</span>] = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改之后为:&quot;</span> + arr[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-索引"><a href="#6-索引" class="headerlink" title="6.索引"></a>6.索引</h1><p>​也叫角标、下标</p><p>​就是数组容器中每一个小格子对应的编号。</p><h3 id="索引的特点："><a href="#索引的特点：" class="headerlink" title="索引的特点："></a>索引的特点：</h3><ul><li>索引一定是从0开始的。</li><li>连续不间断。</li><li>逐个+1增长。</li></ul><h1 id="7-数组的遍历"><a href="#7-数组的遍历" class="headerlink" title="7.数组的遍历"></a>7.数组的遍历</h1><p>遍历：就是把数组里面所有的内容一个一个全部取出来。</p><p>数组的长度：数组名.length;</p><p>通用代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">    <span class="comment">//在循环的过程中，i依次表示数组中的每一个索引</span></span><br><span class="line">    sout(arr[i]);<span class="comment">//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-数组的动态初始化"><a href="#8-数组的动态初始化" class="headerlink" title="8.数组的动态初始化"></a>8.数组的动态初始化</h1><h3 id="格式：-1"><a href="#格式：-1" class="headerlink" title="格式："></a>格式：</h3><p>​数据类型[] 数组名 &#x3D; new 数据类型[数组的长度];</p><h3 id="举例："><a href="#举例：" class="headerlink" title="举例："></a>举例：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义一个数组，存3个人的年龄，年龄未知</span></span><br><span class="line"><span class="type">int</span>[] agesArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span></span><br><span class="line"><span class="type">int</span>[] scoresArr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="数组的默认初始化值："><a href="#数组的默认初始化值：" class="headerlink" title="数组的默认初始化值："></a>数组的默认初始化值：</h3><p>整数类型：0</p><p>小数类型：0.0</p><p>布尔类型：false</p><p>字符类型：’\u0000’</p><p>引用类型：null</p><h1 id="9-数组两种初始化方式的区别"><a href="#9-数组两种初始化方式的区别" class="headerlink" title="9.数组两种初始化方式的区别"></a>9.数组两种初始化方式的区别</h1><p>静态初始化：int[] arr &#x3D; {1,2,3,4,5};</p><p>动态初始化：int[] arr &#x3D; new int[3];</p><p>静态初始化：手动指定数组的元素，系统会根据元素的个数，计算出数组的长度。</p><p>动态初始化：手动指定数组长度，由系统给出默认初始化值。</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>只明确元素个数，但是不明确具体的数据，推荐使用动态初始化。</p><p>已经明确了要操作的所有数据，推荐使用静态初始化。</p><h3 id="举例：-1"><a href="#举例：-1" class="headerlink" title="举例："></a>举例：</h3><ul><li><p>使用数组来存储键盘录入的5个整数。</p><p>int[] arr &#x3D; new int[5];</p></li><li><p>将全班的学生成绩存入数组中，已知学生成绩为：66,77,88,99,100</p><p>int[] arr &#x3D; new int[5];</p><p>arr[0] &#x3D; 66;</p><p>arr[1] &#x3D; 77;</p><p>… 虽然可以实现，但是太麻烦了。</p><p>建议使用静态初始化：int[] arr &#x3D; {66,77,88,99,100};</p></li></ul><h1 id="10-数组常见问题"><a href="#10-数组常见问题" class="headerlink" title="10.数组常见问题"></a>10.数组常见问题</h1><p>当访问了数组中不存在的索引，就会引发索引越界异常。</p><p>避免：</p><p>​针对于任意一个数组，索引的范围：<br>       最小索引：0<br>       最大索引：数组的长度 - 1<br>​               数组名.length - 1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="comment">//用索引来访问数组中的元素</span></span><br><span class="line">        System.out.println(arr[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(arr[<span class="number">10</span>]);<span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-数组的练习"><a href="#11-数组的练习" class="headerlink" title="11.数组的练习"></a>11.数组的练习</h1><h2 id="练习1：求和"><a href="#练习1：求和" class="headerlink" title="练习1：求和"></a>练习1：求和</h2><p>需求：定义一个数组，存储1,2,3,4,5</p><p>遍历数组得到每一个元素，求数组里面所有的数据和</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义一个数组，存储1,2,3,4,5</span></span><br><span class="line"><span class="comment">        遍历数组得到每一个元素，求数组里面所有的数据和*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.定义一个数组，并添加数据1,2,3,4,5</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求和变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//2.遍历数组得到每一个数据，累加求和</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 依次表示数组里面的每一个索引</span></span><br><span class="line">    <span class="comment">//arr[i] 依次表示数组里面的每一个元素</span></span><br><span class="line">    sum = sum + arr[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当循环结束之后，sum的值就是累加之后的结果</span></span><br><span class="line">System.out.println(sum);</span><br></pre></td></tr></table></figure><h2 id="练习2：统计个数"><a href="#练习2：统计个数" class="headerlink" title="练习2：统计个数"></a>练习2：统计个数</h2><p>需求：定义一个数组，存储1,2,3,4,5,6,7,8,9,10</p><p>遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.定义一个数组 存储1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//定义一个变量，用来统计次数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//2.遍历数组得到每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 表示数组里面的每一个索引</span></span><br><span class="line">    <span class="comment">//arr[i] 表示数组里面的每一个元素</span></span><br><span class="line">    <span class="comment">//3.判断当前的元素是否为3的倍数，如果是那么统计变量就需要自增一次。</span></span><br><span class="line">    <span class="keyword">if</span>(arr[i] % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">// System.out.println(arr[i]);</span></span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，就表示数组里面所有的数字都判断完毕了，直接打印count即可</span></span><br><span class="line">System.out.println(<span class="string">&quot;数组中能被3整除的数字有&quot;</span> + count + <span class="string">&quot;个&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="练习3：变化数据"><a href="#练习3：变化数据" class="headerlink" title="练习3：变化数据"></a>练习3：变化数据</h2><p>需求：</p><p>定义一个数组，存储1,2,3,4,5,6,7,8,9,10</p><p>遍历数组得到每一个元素。</p><p>要求：</p><p>1，如果是奇数，则将当前数字扩大两倍</p><p>2，如果是偶数，则将当前数字变成二分之一</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.定义一个数组，存1,2,3,4,5,6,7,8,9,10</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="comment">//2.遍历数组得到每一个元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 依次表示数组里面的每一个索引</span></span><br><span class="line">    <span class="comment">//arr[i] 依次表示数组里面的每一个元素</span></span><br><span class="line">    <span class="comment">//3.对每一个元素进行判断</span></span><br><span class="line">    <span class="keyword">if</span>(arr[i] % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//偶数 变成二分之一</span></span><br><span class="line">        arr[i] = arr[i] / <span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//奇数 扩大两倍</span></span><br><span class="line">        arr[i] = arr[i] * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line"><span class="comment">//一个循环尽量只做一件事情。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习4：求最值"><a href="#练习4：求最值" class="headerlink" title="练习4：求最值"></a>练习4：求最值</h2><p>需求：求数组中的最大值</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义数组求最大值：33,5,22,44,55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//扩展问题：</span></span><br><span class="line"><span class="comment">//1.根据求最大值的思路，自己改写一下求最小智</span></span><br><span class="line"><span class="comment">//2.为什么max要记录为arr[0],默认值不能为0吗？</span></span><br><span class="line"><span class="comment">//不能写0</span></span><br><span class="line"><span class="comment">//max的初始化值一定要是数组中的值。</span></span><br><span class="line"><span class="comment">//3.循环中开始条件一定是0吗？</span></span><br><span class="line"><span class="comment">//循环的开始条件如果为0，那么第一次循环的时候是自己跟自己比了一下，对结果没有任何影响，但是效率偏低</span></span><br><span class="line"><span class="comment">//为了提高效率，减少一次循环的次数，循环开始条件可以写1.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义数组用来存储5个值</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">33</span>,<span class="number">5</span>,<span class="number">22</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="comment">//2.定义一个变量max用来存储最大值</span></span><br><span class="line"><span class="comment">//临时认为0索引的数据是最大的</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//3.循环获取数组中的每一个元素</span></span><br><span class="line"><span class="comment">//拿着每一个元素跟max进行比较</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//i 索引  arr[i] 元素</span></span><br><span class="line">    <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">        max = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4.当循环结束之后，max记录的就是数组中的最大值</span></span><br><span class="line">System.out.println(max);<span class="comment">//55</span></span><br></pre></td></tr></table></figure><h2 id="练习5：统计个数"><a href="#练习5：统计个数" class="headerlink" title="练习5：统计个数"></a>练习5：统计个数</h2><p>需求：生成10个1~100之间的随机数存入数组。</p><p>1）求出所有数据的和</p><p>2）求所有数据的平均数</p><p>3）统计有多少个数据比平均值小</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分析：</span></span><br><span class="line"><span class="comment">//1.定义数组</span></span><br><span class="line"><span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//2.把随机数存入到数组当中</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//每循环一次，就会生成一个新的随机数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//把生成的随机数添加的数组当中</span></span><br><span class="line">    <span class="comment">//数组名[索引] = 数据;</span></span><br><span class="line">    arr[i] = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1）求出所有数据的和</span></span><br><span class="line"><span class="comment">//定义求和变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//循环得到每一个元素</span></span><br><span class="line">    <span class="comment">//并把元素累加到sum当中</span></span><br><span class="line">    sum = sum + arr[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中所有数据的和为：&quot;</span> + sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2）求所有数据的平均数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">avg</span> <span class="operator">=</span> sum / arr.length;</span><br><span class="line">System.out.println(<span class="string">&quot;数组中平均数为：&quot;</span> + avg);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3）统计有多少个数据比平均值小</span></span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arr[i] &lt; avg)&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当循环结束之后，就表示我已经找到了所有的比平均数小的数据</span></span><br><span class="line">System.out.println(<span class="string">&quot;在数组中，一共有&quot;</span> + count + <span class="string">&quot;个数据，比平均数小&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组，验证答案</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习6：交换数据"><a href="#练习6：交换数据" class="headerlink" title="练习6：交换数据"></a>练习6：交换数据</h2><p>需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。</p><p>交换前：1,2,3,4,5</p><p>交换后：5,2,3,4,1</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义数组存储数据</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//2.利用循环去交换数据</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>,j = arr.length - <span class="number">1</span>; i &lt; j; i++,j--)&#123;</span><br><span class="line">    <span class="comment">//交换变量i和变量j指向的元素</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，那么数组中的数据就实现了头尾交换</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习7：打乱数据"><a href="#练习7：打乱数据" class="headerlink" title="练习7：打乱数据"></a>练习7：打乱数据</h2><p>需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义数组存储1~5</span></span><br><span class="line"><span class="type">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="comment">//2.循环遍历数组，从0索引开始打乱数据的顺序</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//生成一个随机索引</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">randomIndex</span> <span class="operator">=</span> r.nextInt(arr.length);</span><br><span class="line">    <span class="comment">//拿着随机索引指向的元素 跟 i 指向的元素进行交换</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">    arr[i] = arr[randomIndex];</span><br><span class="line">    arr[randomIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当循环结束之后，那么数组中所有的数据已经打乱顺序了</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.print(arr[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>番号</title>
      <link href="/2023/01/20/%E7%95%AA%E5%8F%B7/"/>
      <url>/2023/01/20/%E7%95%AA%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">番号</th><th align="center">演员</th><th align="center">图片</th><th align="center">类型</th><th align="center">码</th></tr></thead><tbody><tr><td align="center">gachi1151</td><td align="center">蘭</td><td align="center"><a href="https://pic.imgdb.cn/item/63ca603fbe43e0d30eb8f859.png">https://pic.imgdb.cn/item/63ca603fbe43e0d30eb8f859.png</a></td><td align="center"></td><td align="center">有</td></tr><tr><td align="center">MDTM-013</td><td align="center">铃原爱蜜莉</td><td align="center"><a href="https://pic.imgdb.cn/item/63ca603fbe43e0d30eb8f859.png">https://pic.imgdb.cn/item/63ca603fbe43e0d30eb8f859.png</a></td><td align="center"></td><td align="center">有</td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 娱乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 番号 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活脚步_01</title>
      <link href="/2023/01/20/%E7%94%9F%E6%B4%BB%E8%84%9A%E6%AD%A5-01/"/>
      <url>/2023/01/20/%E7%94%9F%E6%B4%BB%E8%84%9A%E6%AD%A5-01/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式-day17</title>
      <link href="/2023/01/20/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-02/"/>
      <url>/2023/01/20/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93-02/</url>
      
        <content type="html"><![CDATA[<h2 id="在Api文档中搜pattern获取规则信息"><a href="#在Api文档中搜pattern获取规则信息" class="headerlink" title="在Api文档中搜pattern获取规则信息"></a>在Api文档中搜pattern获取规则信息</h2><h2 id="字符类（只匹配一个字符）"><a href="#字符类（只匹配一个字符）" class="headerlink" title="字符类（只匹配一个字符）"></a>字符类（只匹配一个字符）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[abc] 只能是a,b,或c</span><br><span class="line">[^abc] 除了a,b,c之外的任何字符</span><br><span class="line">[a-zA-Z] a到zA到Z,包括（范围）</span><br><span class="line">[a-d[m-p]] a到d,或m到p</span><br><span class="line">[a-z&amp;&amp;[def]] a-z和def的交集。为：d,e,f</span><br><span class="line">[a-z&amp;&amp;[^bc] a-z和非bc的交集。（等同于[ad-z])</span><br><span class="line">[a-z&amp;&amp;[^m-p] a到z和除了m到p的交集。</span><br><span class="line"> (等同于[a-lq-z])</span><br></pre></td></tr></table></figure><h2 id="预定义字符（只匹配一个字符）"><a href="#预定义字符（只匹配一个字符）" class="headerlink" title="预定义字符（只匹配一个字符）"></a>预定义字符（只匹配一个字符）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">. 任何字符</span><br><span class="line">\d 一个数字：[<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\D 非数字：[^<span class="number">0</span>-<span class="number">9</span>]</span><br><span class="line">\s 一个空白字符：[\t\n\x0B\f\r]</span><br><span class="line">\S 非空白字符：[^\s]</span><br><span class="line">\w [a-zA-Z_0-<span class="number">9</span>]英文、数字、下划线</span><br><span class="line">\W [^\W]一个非单词字符</span><br></pre></td></tr></table></figure><h2 id="数量词"><a href="#数量词" class="headerlink" title="数量词"></a>数量词</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">X? X,一次或<span class="number">0</span>次</span><br><span class="line">X* X,零次或多次</span><br><span class="line">X+ X,一次或多次</span><br><span class="line">Xn&#125; X,正好n次</span><br><span class="line">X&#123;n,&#125; X,至少n次</span><br><span class="line">X [n,m&#125; X,至少n但不超过m次</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object-day17</title>
      <link href="/2023/01/20/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_01/"/>
      <url>/2023/01/20/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93_01/</url>
      
        <content type="html"><![CDATA[<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><ol><li>Object是 Java 中的顶级父类。<br>  所有的类都直接或间接的继承于object类。</li><li><code>toString():</code>一般会重写，打印对象时打印属性  </li><li><code>equals():</code>比较对象时会重写，比较对象属性值是否相同  </li><li><code>c1one():</code>默认浅克隆。<br>如果需要深克隆需要重写方法或者使用第三方工具类。</li></ol><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><ol><li><p><code>Objects</code>是一个对象工具类，提供了一些操作对象的方法</p></li><li><p><code>equals(对象1 ，对象2)：</code>先做非空判断，比较两个对象</p></li><li><p><code>isNull(对象)</code>判断对象是否为空</p></li><li><p><code>nonNull(对象)</code>  判断对象是否不是空</p></li></ol><h2 id="BigInteger构造方法小结"><a href="#BigInteger构造方法小结" class="headerlink" title="BigInteger构造方法小结"></a>BigInteger构造方法小结</h2><ol><li>如果BigInteger表示的数字没有超出long的范围，可以用静态方法获取。    </li><li>如果BigInteger表示的超出long的范围，可以用构造方法获取。</li><li>对象一旦创建，BigInteger内部记录的值不能发生改变。</li><li>只要进行计算都会产生一个新的BigIntegerx对象</li></ol><h2 id="BigDecimall"><a href="#BigDecimall" class="headerlink" title="BigDecimall"></a>BigDecimall</h2><h3 id="BigDecimall的作用是什么？"><a href="#BigDecimall的作用是什么？" class="headerlink" title="BigDecimall的作用是什么？"></a>BigDecimall的作用是什么？</h3><ul><li>表示较大的小数和解决小数运算精度失真问题。</li></ul><h3 id="BigDecimal的对象如何获取？"><a href="#BigDecimal的对象如何获取？" class="headerlink" title="BigDecimal的对象如何获取？"></a>BigDecimal的对象如何获取？</h3><ul><li><code>BigDecimal bd1=new BigDecimal(&quot;较大的小数&quot;)；</code>  </li><li><code>BigDecimal bd2 BigDecimal.valueof(0.1);</code></li></ul><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><ul><li>加：<code>add</code></li><li>减：<code>subtract</code></li><li>乘：<code>multiply</code></li><li>除：<code>divide(四舍五入：RoundingMode,HALF UP)</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 程序猿 </category>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java个人总结 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
